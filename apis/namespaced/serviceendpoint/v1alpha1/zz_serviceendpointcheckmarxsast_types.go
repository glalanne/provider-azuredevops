// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ServiceendpointCheckmarxSastInitParameters struct {

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The password of the Checkmarx SAST.
	PasswordSecretRef v1.LocalSecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset *string `json:"preset,omitempty" tf:"preset,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// The Server URL of the Checkmarx SAST.
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The full team name of the Checkmarx.
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// The username of the Checkmarx SAST.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceendpointCheckmarxSastObservation struct {

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset *string `json:"preset,omitempty" tf:"preset,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Server URL of the Checkmarx SAST.
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The full team name of the Checkmarx.
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// The username of the Checkmarx SAST.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceendpointCheckmarxSastParameters struct {

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The password of the Checkmarx SAST.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.LocalSecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	// +kubebuilder:validation:Optional
	Preset *string `json:"preset,omitempty" tf:"preset,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// The Server URL of the Checkmarx SAST.
	// +kubebuilder:validation:Optional
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The Service Endpoint name.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The full team name of the Checkmarx.
	// +kubebuilder:validation:Optional
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// The username of the Checkmarx SAST.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// ServiceendpointCheckmarxSastSpec defines the desired state of ServiceendpointCheckmarxSast
type ServiceendpointCheckmarxSastSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ServiceendpointCheckmarxSastParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointCheckmarxSastInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointCheckmarxSastStatus defines the observed state of ServiceendpointCheckmarxSast.
type ServiceendpointCheckmarxSastStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointCheckmarxSastObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointCheckmarxSast is the Schema for the ServiceendpointCheckmarxSasts API. Manages a Checkmarx SAST service endpoint within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type ServiceendpointCheckmarxSast struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverUrl) || (has(self.initProvider) && has(self.initProvider.serverUrl))",message="spec.forProvider.serverUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   ServiceendpointCheckmarxSastSpec   `json:"spec"`
	Status ServiceendpointCheckmarxSastStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointCheckmarxSastList contains a list of ServiceendpointCheckmarxSasts
type ServiceendpointCheckmarxSastList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointCheckmarxSast `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointCheckmarxSast_Kind             = "ServiceendpointCheckmarxSast"
	ServiceendpointCheckmarxSast_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointCheckmarxSast_Kind}.String()
	ServiceendpointCheckmarxSast_KindAPIVersion   = ServiceendpointCheckmarxSast_Kind + "." + CRDGroupVersion.String()
	ServiceendpointCheckmarxSast_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointCheckmarxSast_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointCheckmarxSast{}, &ServiceendpointCheckmarxSastList{})
}
