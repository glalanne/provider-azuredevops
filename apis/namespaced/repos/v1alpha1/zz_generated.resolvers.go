// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-azuredevops/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *BranchPolicyAutoReviewers) ResolveReferences( // ResolveReferences of this BranchPolicyAutoReviewers.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.azuredevops.m.crossplane.io", "v1alpha1", "UserEntitlement", "UserEntitlementList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Settings.AutoReviewerIds),
				Extract:       resource.ExtractResourceID(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.Settings.AutoReviewerIdsRefs,
				Selector:      mg.Spec.ForProvider.Settings.AutoReviewerIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Settings.AutoReviewerIds")
		}
		mg.Spec.ForProvider.Settings.AutoReviewerIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.Settings.AutoReviewerIdsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.azuredevops.m.crossplane.io", "v1alpha1", "UserEntitlement", "UserEntitlementList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Settings.AutoReviewerIds),
				Extract:       resource.ExtractResourceID(),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.Settings.AutoReviewerIdsRefs,
				Selector:      mg.Spec.InitProvider.Settings.AutoReviewerIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Settings.AutoReviewerIds")
		}
		mg.Spec.InitProvider.Settings.AutoReviewerIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.Settings.AutoReviewerIdsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this BranchPolicyBuildValidation.
func (mg *BranchPolicyBuildValidation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("pipelines.azuredevops.m.crossplane.io", "v1alpha1", "BuildDefinition", "BuildDefinitionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.Settings.BuildDefinitionID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Settings.BuildDefinitionIDRef,
				Selector:     mg.Spec.ForProvider.Settings.BuildDefinitionIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Settings.BuildDefinitionID")
		}
		mg.Spec.ForProvider.Settings.BuildDefinitionID = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Settings.BuildDefinitionIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("pipelines.azuredevops.m.crossplane.io", "v1alpha1", "BuildDefinition", "BuildDefinitionList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.Settings.BuildDefinitionID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Settings.BuildDefinitionIDRef,
				Selector:     mg.Spec.InitProvider.Settings.BuildDefinitionIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Settings.BuildDefinitionID")
		}
		mg.Spec.InitProvider.Settings.BuildDefinitionID = reference.ToFloatPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Settings.BuildDefinitionIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this BranchPolicyCommentResolution.
func (mg *BranchPolicyCommentResolution) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this BranchPolicyMergeTypes.
func (mg *BranchPolicyMergeTypes) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this BranchPolicyMinReviewers.
func (mg *BranchPolicyMinReviewers) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this BranchPolicyStatusCheck.
func (mg *BranchPolicyStatusCheck) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.azuredevops.m.crossplane.io", "v1alpha1", "UserEntitlement", "UserEntitlementList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.AuthorID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Settings.AuthorIDRef,
				Selector:     mg.Spec.ForProvider.Settings.AuthorIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Settings.AuthorID")
		}
		mg.Spec.ForProvider.Settings.AuthorID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Settings.AuthorIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.azuredevops.m.crossplane.io", "v1alpha1", "UserEntitlement", "UserEntitlementList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.AuthorID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Settings.AuthorIDRef,
				Selector:     mg.Spec.InitProvider.Settings.AuthorIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Settings.AuthorID")
		}
		mg.Spec.InitProvider.Settings.AuthorID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Settings.AuthorIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this BranchPolicyWorkItemLinking.
func (mg *BranchPolicyWorkItemLinking) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.InitProvider.Settings != nil {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Settings.Scope); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef),
					Extract:      resource.ExtractParamPath("default_branch", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef,
					Selector:     mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef")
			}
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRef = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Settings.Scope[i4].RepositoryRefRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this CheckApproval.
func (mg *CheckApproval) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("security.azuredevops.m.crossplane.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Approvers),
			Extract:       resource.ExtractParamPath("origin_id", false),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.ApproversRefs,
			Selector:      mg.Spec.ForProvider.ApproversSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Approvers")
	}
	mg.Spec.ForProvider.Approvers = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ApproversRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("security.azuredevops.m.crossplane.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Approvers),
			Extract:       resource.ExtractParamPath("origin_id", false),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.ApproversRefs,
			Selector:      mg.Spec.InitProvider.ApproversSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Approvers")
	}
	mg.Spec.InitProvider.Approvers = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ApproversRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CheckBranchControl.
func (mg *CheckBranchControl) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CheckBusinessHours.
func (mg *CheckBusinessHours) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CheckExclusiveLock.
func (mg *CheckExclusiveLock) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CheckRequiredTemplate.
func (mg *CheckRequiredTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CheckRestAPI.
func (mg *CheckRestAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.TargetResourceIDRef,
			Selector:     mg.Spec.ForProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetResourceID")
	}
	mg.Spec.ForProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("pipelines.azuredevops.m.crossplane.io", "v1alpha1", "VariableGroup", "VariableGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VariableGroupName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VariableGroupNameRef,
			Selector:     mg.Spec.ForProvider.VariableGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VariableGroupName")
	}
	mg.Spec.ForProvider.VariableGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VariableGroupNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGeneric", "ServiceendpointGenericList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.TargetResourceID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.TargetResourceIDRef,
			Selector:     mg.Spec.InitProvider.TargetResourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TargetResourceID")
	}
	mg.Spec.InitProvider.TargetResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TargetResourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("pipelines.azuredevops.m.crossplane.io", "v1alpha1", "VariableGroup", "VariableGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VariableGroupName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VariableGroupNameRef,
			Selector:     mg.Spec.InitProvider.VariableGroupNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VariableGroupName")
	}
	mg.Spec.InitProvider.VariableGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VariableGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GitRepository.
func (mg *GitRepository) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Initialization != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGenericGit", "ServiceendpointGenericGitList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Initialization.ServiceConnectionID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Initialization.ServiceConnectionIDRef,
				Selector:     mg.Spec.ForProvider.Initialization.ServiceConnectionIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Initialization.ServiceConnectionID")
		}
		mg.Spec.ForProvider.Initialization.ServiceConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Initialization.ServiceConnectionIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentRepositoryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ParentRepositoryIDRef,
			Selector:     mg.Spec.ForProvider.ParentRepositoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentRepositoryID")
	}
	mg.Spec.ForProvider.ParentRepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentRepositoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Initialization != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.m.crossplane.io", "v1alpha1", "ServiceendpointGenericGit", "ServiceendpointGenericGitList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Initialization.ServiceConnectionID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Initialization.ServiceConnectionIDRef,
				Selector:     mg.Spec.InitProvider.Initialization.ServiceConnectionIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Initialization.ServiceConnectionID")
		}
		mg.Spec.InitProvider.Initialization.ServiceConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Initialization.ServiceConnectionIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ParentRepositoryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ParentRepositoryIDRef,
			Selector:     mg.Spec.InitProvider.ParentRepositoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ParentRepositoryID")
	}
	mg.Spec.InitProvider.ParentRepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ParentRepositoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GitRepositoryBranch.
func (mg *GitRepositoryBranch) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RefBranch),
			Extract:      resource.ExtractParamPath("default_branch", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RefBranchRef,
			Selector:     mg.Spec.ForProvider.RefBranchSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RefBranch")
	}
	mg.Spec.ForProvider.RefBranch = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RefBranchRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepositoryBranch", "GitRepositoryBranchList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RefCommitID),
			Extract:      resource.ExtractParamPath("last_commit_id", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RefCommitIDRef,
			Selector:     mg.Spec.ForProvider.RefCommitIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RefCommitID")
	}
	mg.Spec.ForProvider.RefCommitID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RefCommitIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RepositoryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RepositoryIDRef,
			Selector:     mg.Spec.ForProvider.RepositoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryID")
	}
	mg.Spec.ForProvider.RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RepositoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RefBranch),
			Extract:      resource.ExtractParamPath("default_branch", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RefBranchRef,
			Selector:     mg.Spec.InitProvider.RefBranchSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RefBranch")
	}
	mg.Spec.InitProvider.RefBranch = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RefBranchRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepositoryBranch", "GitRepositoryBranchList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RefCommitID),
			Extract:      resource.ExtractParamPath("last_commit_id", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RefCommitIDRef,
			Selector:     mg.Spec.InitProvider.RefCommitIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RefCommitID")
	}
	mg.Spec.InitProvider.RefCommitID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RefCommitIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RepositoryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RepositoryIDRef,
			Selector:     mg.Spec.InitProvider.RepositoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryID")
	}
	mg.Spec.InitProvider.RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RepositoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GitRepositoryFile.
func (mg *GitRepositoryFile) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RepositoryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.RepositoryIDRef,
			Selector:     mg.Spec.ForProvider.RepositoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryID")
	}
	mg.Spec.ForProvider.RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RepositoryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RepositoryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.RepositoryIDRef,
			Selector:     mg.Spec.InitProvider.RepositoryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryID")
	}
	mg.Spec.InitProvider.RepositoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RepositoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RepositoryPolicyAuthorEmailPattern.
func (mg *RepositoryPolicyAuthorEmailPattern) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RepositoryPolicyCaseEnforcement.
func (mg *RepositoryPolicyCaseEnforcement) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RepositoryPolicyCheckCredentials.
func (mg *RepositoryPolicyCheckCredentials) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RepositoryPolicyFilePathPattern.
func (mg *RepositoryPolicyFilePathPattern) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RepositoryPolicyMaxFileSize.
func (mg *RepositoryPolicyMaxFileSize) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RepositoryPolicyMaxPathLength.
func (mg *RepositoryPolicyMaxPathLength) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this RepositoryPolicyReservedNames.
func (mg *RepositoryPolicyReservedNames) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var mrsp reference.MultiNamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.ForProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RepositoryIds")
	}
	mg.Spec.ForProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RepositoryIdsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.m.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("repos.azuredevops.m.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RepositoryIds),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.RepositoryIdsRefs,
			Selector:      mg.Spec.InitProvider.RepositoryIdsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RepositoryIds")
	}
	mg.Spec.InitProvider.RepositoryIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RepositoryIdsRefs = mrsp.ResolvedReferences

	return nil
}
