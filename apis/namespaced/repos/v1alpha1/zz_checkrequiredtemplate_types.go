// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CheckRequiredTemplateInitParameters struct {

	// The project ID. Changing this forces a new Required Template Check to be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// One or more required_template blocks documented below.
	RequiredTemplate []RequiredTemplateInitParameters `json:"requiredTemplate,omitempty" tf:"required_template,omitempty"`

	// The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/serviceendpoint/v1alpha1.ServiceendpointGeneric
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	TargetResourceID *string `json:"targetResourceId,omitempty" tf:"target_resource_id,omitempty"`

	// Reference to a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDRef *v1.NamespacedReference `json:"targetResourceIdRef,omitempty" tf:"-"`

	// Selector for a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDSelector *v1.NamespacedSelector `json:"targetResourceIdSelector,omitempty" tf:"-"`

	// The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new Required Template Check to be created.
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`
}

type CheckRequiredTemplateObservation struct {

	// The ID of the check.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The project ID. Changing this forces a new Required Template Check to be created.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// One or more required_template blocks documented below.
	RequiredTemplate []RequiredTemplateObservation `json:"requiredTemplate,omitempty" tf:"required_template,omitempty"`

	// The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.
	TargetResourceID *string `json:"targetResourceId,omitempty" tf:"target_resource_id,omitempty"`

	// The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new Required Template Check to be created.
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`

	// The version of the check.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type CheckRequiredTemplateParameters struct {

	// The project ID. Changing this forces a new Required Template Check to be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// One or more required_template blocks documented below.
	// +kubebuilder:validation:Optional
	RequiredTemplate []RequiredTemplateParameters `json:"requiredTemplate,omitempty" tf:"required_template,omitempty"`

	// The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/serviceendpoint/v1alpha1.ServiceendpointGeneric
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TargetResourceID *string `json:"targetResourceId,omitempty" tf:"target_resource_id,omitempty"`

	// Reference to a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDRef *v1.NamespacedReference `json:"targetResourceIdRef,omitempty" tf:"-"`

	// Selector for a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDSelector *v1.NamespacedSelector `json:"targetResourceIdSelector,omitempty" tf:"-"`

	// The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new Required Template Check to be created.
	// +kubebuilder:validation:Optional
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`
}

type RequiredTemplateInitParameters struct {

	// The name of the repository storing the template.
	RepositoryName *string `json:"repositoryName,omitempty" tf:"repository_name,omitempty"`

	// The branch in which the template will be referenced.
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`

	// The type of the repository storing the template. Possible values are: azuregit, github, githubenterprise, bitbucket. Defaults to azuregit.
	RepositoryType *string `json:"repositoryType,omitempty" tf:"repository_type,omitempty"`

	// The path to the template yaml.
	TemplatePath *string `json:"templatePath,omitempty" tf:"template_path,omitempty"`
}

type RequiredTemplateObservation struct {

	// The name of the repository storing the template.
	RepositoryName *string `json:"repositoryName,omitempty" tf:"repository_name,omitempty"`

	// The branch in which the template will be referenced.
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`

	// The type of the repository storing the template. Possible values are: azuregit, github, githubenterprise, bitbucket. Defaults to azuregit.
	RepositoryType *string `json:"repositoryType,omitempty" tf:"repository_type,omitempty"`

	// The path to the template yaml.
	TemplatePath *string `json:"templatePath,omitempty" tf:"template_path,omitempty"`
}

type RequiredTemplateParameters struct {

	// The name of the repository storing the template.
	// +kubebuilder:validation:Optional
	RepositoryName *string `json:"repositoryName" tf:"repository_name,omitempty"`

	// The branch in which the template will be referenced.
	// +kubebuilder:validation:Optional
	RepositoryRef *string `json:"repositoryRef" tf:"repository_ref,omitempty"`

	// The type of the repository storing the template. Possible values are: azuregit, github, githubenterprise, bitbucket. Defaults to azuregit.
	// +kubebuilder:validation:Optional
	RepositoryType *string `json:"repositoryType,omitempty" tf:"repository_type,omitempty"`

	// The path to the template yaml.
	// +kubebuilder:validation:Optional
	TemplatePath *string `json:"templatePath" tf:"template_path,omitempty"`
}

// CheckRequiredTemplateSpec defines the desired state of CheckRequiredTemplate
type CheckRequiredTemplateSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            CheckRequiredTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CheckRequiredTemplateInitParameters `json:"initProvider,omitempty"`
}

// CheckRequiredTemplateStatus defines the observed state of CheckRequiredTemplate.
type CheckRequiredTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckRequiredTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CheckRequiredTemplate is the Schema for the CheckRequiredTemplates API. Manages a Required Template Check.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type CheckRequiredTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.requiredTemplate) || (has(self.initProvider) && has(self.initProvider.requiredTemplate))",message="spec.forProvider.requiredTemplate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetResourceType) || (has(self.initProvider) && has(self.initProvider.targetResourceType))",message="spec.forProvider.targetResourceType is a required parameter"
	Spec   CheckRequiredTemplateSpec   `json:"spec"`
	Status CheckRequiredTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckRequiredTemplateList contains a list of CheckRequiredTemplates
type CheckRequiredTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CheckRequiredTemplate `json:"items"`
}

// Repository type metadata.
var (
	CheckRequiredTemplate_Kind             = "CheckRequiredTemplate"
	CheckRequiredTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CheckRequiredTemplate_Kind}.String()
	CheckRequiredTemplate_KindAPIVersion   = CheckRequiredTemplate_Kind + "." + CRDGroupVersion.String()
	CheckRequiredTemplate_GroupVersionKind = CRDGroupVersion.WithKind(CheckRequiredTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&CheckRequiredTemplate{}, &CheckRequiredTemplateList{})
}
