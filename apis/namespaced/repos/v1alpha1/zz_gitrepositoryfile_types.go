// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GitRepositoryFileInitParameters struct {

	// The email of the author.
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// The name of the author.
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it does not already exist.
	// The branch name, defaults to "refs/heads/master"
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating or updating the file
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The email of the committer.
	CommitterEmail *string `json:"committerEmail,omitempty" tf:"committer_email,omitempty"`

	// The name of the committer.
	CommitterName *string `json:"committerName,omitempty" tf:"committer_name,omitempty"`

	// The file content.
	// The file's content
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Enable overwriting existing files (defaults to false).
	// Enable overwriting existing files, defaults to "false"
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// The ID of the Git repository.
	// The repository ID
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.NamespacedReference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.NamespacedSelector `json:"repositoryIdSelector,omitempty" tf:"-"`
}

type GitRepositoryFileObservation struct {

	// The email of the author.
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// The name of the author.
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it does not already exist.
	// The branch name, defaults to "refs/heads/master"
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating or updating the file
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The email of the committer.
	CommitterEmail *string `json:"committerEmail,omitempty" tf:"committer_email,omitempty"`

	// The name of the committer.
	CommitterName *string `json:"committerName,omitempty" tf:"committer_name,omitempty"`

	// The file content.
	// The file's content
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// The ID of the git repository file in format of repository ID/file
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Enable overwriting existing files (defaults to false).
	// Enable overwriting existing files, defaults to "false"
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// The ID of the Git repository.
	// The repository ID
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`
}

type GitRepositoryFileParameters struct {

	// The email of the author.
	// +kubebuilder:validation:Optional
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// The name of the author.
	// +kubebuilder:validation:Optional
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it does not already exist.
	// The branch name, defaults to "refs/heads/master"
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// Commit message when adding or updating the managed file.
	// The commit message when creating or updating the file
	// +kubebuilder:validation:Optional
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`

	// The email of the committer.
	// +kubebuilder:validation:Optional
	CommitterEmail *string `json:"committerEmail,omitempty" tf:"committer_email,omitempty"`

	// The name of the committer.
	// +kubebuilder:validation:Optional
	CommitterName *string `json:"committerName,omitempty" tf:"committer_name,omitempty"`

	// The file content.
	// The file's content
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The path of the file to manage.
	// The file path to manage
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Enable overwriting existing files (defaults to false).
	// Enable overwriting existing files, defaults to "false"
	// +kubebuilder:validation:Optional
	OverwriteOnCreate *bool `json:"overwriteOnCreate,omitempty" tf:"overwrite_on_create,omitempty"`

	// The ID of the Git repository.
	// The repository ID
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.NamespacedReference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.NamespacedSelector `json:"repositoryIdSelector,omitempty" tf:"-"`
}

// GitRepositoryFileSpec defines the desired state of GitRepositoryFile
type GitRepositoryFileSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GitRepositoryFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GitRepositoryFileInitParameters `json:"initProvider,omitempty"`
}

// GitRepositoryFileStatus defines the observed state of GitRepositoryFile.
type GitRepositoryFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GitRepositoryFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GitRepositoryFile is the Schema for the GitRepositoryFiles API. Manage files within an Azure DevOps Git repository.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type GitRepositoryFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.file) || (has(self.initProvider) && has(self.initProvider.file))",message="spec.forProvider.file is a required parameter"
	Spec   GitRepositoryFileSpec   `json:"spec"`
	Status GitRepositoryFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitRepositoryFileList contains a list of GitRepositoryFiles
type GitRepositoryFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitRepositoryFile `json:"items"`
}

// Repository type metadata.
var (
	GitRepositoryFile_Kind             = "GitRepositoryFile"
	GitRepositoryFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GitRepositoryFile_Kind}.String()
	GitRepositoryFile_KindAPIVersion   = GitRepositoryFile_Kind + "." + CRDGroupVersion.String()
	GitRepositoryFile_GroupVersionKind = CRDGroupVersion.WithKind(GitRepositoryFile_Kind)
)

func init() {
	SchemeBuilder.Register(&GitRepositoryFile{}, &GitRepositoryFileList{})
}
