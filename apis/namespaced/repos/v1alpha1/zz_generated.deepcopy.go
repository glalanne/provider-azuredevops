//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewers) DeepCopyInto(out *BranchPolicyAutoReviewers) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewers.
func (in *BranchPolicyAutoReviewers) DeepCopy() *BranchPolicyAutoReviewers {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyAutoReviewers) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewersInitParameters) DeepCopyInto(out *BranchPolicyAutoReviewersInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(SettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewersInitParameters.
func (in *BranchPolicyAutoReviewersInitParameters) DeepCopy() *BranchPolicyAutoReviewersInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewersList) DeepCopyInto(out *BranchPolicyAutoReviewersList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyAutoReviewers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewersList.
func (in *BranchPolicyAutoReviewersList) DeepCopy() *BranchPolicyAutoReviewersList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewersList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyAutoReviewersList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewersObservation) DeepCopyInto(out *BranchPolicyAutoReviewersObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(SettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewersObservation.
func (in *BranchPolicyAutoReviewersObservation) DeepCopy() *BranchPolicyAutoReviewersObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewersParameters) DeepCopyInto(out *BranchPolicyAutoReviewersParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(SettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewersParameters.
func (in *BranchPolicyAutoReviewersParameters) DeepCopy() *BranchPolicyAutoReviewersParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewersSpec) DeepCopyInto(out *BranchPolicyAutoReviewersSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewersSpec.
func (in *BranchPolicyAutoReviewersSpec) DeepCopy() *BranchPolicyAutoReviewersSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewersSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyAutoReviewersStatus) DeepCopyInto(out *BranchPolicyAutoReviewersStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyAutoReviewersStatus.
func (in *BranchPolicyAutoReviewersStatus) DeepCopy() *BranchPolicyAutoReviewersStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyAutoReviewersStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidation) DeepCopyInto(out *BranchPolicyBuildValidation) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidation.
func (in *BranchPolicyBuildValidation) DeepCopy() *BranchPolicyBuildValidation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyBuildValidation) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationInitParameters) DeepCopyInto(out *BranchPolicyBuildValidationInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyBuildValidationSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationInitParameters.
func (in *BranchPolicyBuildValidationInitParameters) DeepCopy() *BranchPolicyBuildValidationInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationList) DeepCopyInto(out *BranchPolicyBuildValidationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyBuildValidation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationList.
func (in *BranchPolicyBuildValidationList) DeepCopy() *BranchPolicyBuildValidationList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyBuildValidationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationObservation) DeepCopyInto(out *BranchPolicyBuildValidationObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyBuildValidationSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationObservation.
func (in *BranchPolicyBuildValidationObservation) DeepCopy() *BranchPolicyBuildValidationObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationParameters) DeepCopyInto(out *BranchPolicyBuildValidationParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyBuildValidationSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationParameters.
func (in *BranchPolicyBuildValidationParameters) DeepCopy() *BranchPolicyBuildValidationParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationSettingsInitParameters) DeepCopyInto(out *BranchPolicyBuildValidationSettingsInitParameters) {
	*out = *in
	if in.BuildDefinitionID != nil {
		in, out := &in.BuildDefinitionID, &out.BuildDefinitionID
		*out = new(float64)
		**out = **in
	}
	if in.BuildDefinitionIDRef != nil {
		in, out := &in.BuildDefinitionIDRef, &out.BuildDefinitionIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.BuildDefinitionIDSelector != nil {
		in, out := &in.BuildDefinitionIDSelector, &out.BuildDefinitionIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FilenamePatterns != nil {
		in, out := &in.FilenamePatterns, &out.FilenamePatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ManualQueueOnly != nil {
		in, out := &in.ManualQueueOnly, &out.ManualQueueOnly
		*out = new(bool)
		**out = **in
	}
	if in.QueueOnSourceUpdateOnly != nil {
		in, out := &in.QueueOnSourceUpdateOnly, &out.QueueOnSourceUpdateOnly
		*out = new(bool)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]SettingsScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ValidDuration != nil {
		in, out := &in.ValidDuration, &out.ValidDuration
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationSettingsInitParameters.
func (in *BranchPolicyBuildValidationSettingsInitParameters) DeepCopy() *BranchPolicyBuildValidationSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationSettingsObservation) DeepCopyInto(out *BranchPolicyBuildValidationSettingsObservation) {
	*out = *in
	if in.BuildDefinitionID != nil {
		in, out := &in.BuildDefinitionID, &out.BuildDefinitionID
		*out = new(float64)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FilenamePatterns != nil {
		in, out := &in.FilenamePatterns, &out.FilenamePatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ManualQueueOnly != nil {
		in, out := &in.ManualQueueOnly, &out.ManualQueueOnly
		*out = new(bool)
		**out = **in
	}
	if in.QueueOnSourceUpdateOnly != nil {
		in, out := &in.QueueOnSourceUpdateOnly, &out.QueueOnSourceUpdateOnly
		*out = new(bool)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]SettingsScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ValidDuration != nil {
		in, out := &in.ValidDuration, &out.ValidDuration
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationSettingsObservation.
func (in *BranchPolicyBuildValidationSettingsObservation) DeepCopy() *BranchPolicyBuildValidationSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationSettingsParameters) DeepCopyInto(out *BranchPolicyBuildValidationSettingsParameters) {
	*out = *in
	if in.BuildDefinitionID != nil {
		in, out := &in.BuildDefinitionID, &out.BuildDefinitionID
		*out = new(float64)
		**out = **in
	}
	if in.BuildDefinitionIDRef != nil {
		in, out := &in.BuildDefinitionIDRef, &out.BuildDefinitionIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.BuildDefinitionIDSelector != nil {
		in, out := &in.BuildDefinitionIDSelector, &out.BuildDefinitionIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FilenamePatterns != nil {
		in, out := &in.FilenamePatterns, &out.FilenamePatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ManualQueueOnly != nil {
		in, out := &in.ManualQueueOnly, &out.ManualQueueOnly
		*out = new(bool)
		**out = **in
	}
	if in.QueueOnSourceUpdateOnly != nil {
		in, out := &in.QueueOnSourceUpdateOnly, &out.QueueOnSourceUpdateOnly
		*out = new(bool)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]SettingsScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ValidDuration != nil {
		in, out := &in.ValidDuration, &out.ValidDuration
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationSettingsParameters.
func (in *BranchPolicyBuildValidationSettingsParameters) DeepCopy() *BranchPolicyBuildValidationSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationSpec) DeepCopyInto(out *BranchPolicyBuildValidationSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationSpec.
func (in *BranchPolicyBuildValidationSpec) DeepCopy() *BranchPolicyBuildValidationSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyBuildValidationStatus) DeepCopyInto(out *BranchPolicyBuildValidationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyBuildValidationStatus.
func (in *BranchPolicyBuildValidationStatus) DeepCopy() *BranchPolicyBuildValidationStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyBuildValidationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolution) DeepCopyInto(out *BranchPolicyCommentResolution) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolution.
func (in *BranchPolicyCommentResolution) DeepCopy() *BranchPolicyCommentResolution {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolution)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyCommentResolution) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionInitParameters) DeepCopyInto(out *BranchPolicyCommentResolutionInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyCommentResolutionSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionInitParameters.
func (in *BranchPolicyCommentResolutionInitParameters) DeepCopy() *BranchPolicyCommentResolutionInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionList) DeepCopyInto(out *BranchPolicyCommentResolutionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyCommentResolution, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionList.
func (in *BranchPolicyCommentResolutionList) DeepCopy() *BranchPolicyCommentResolutionList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyCommentResolutionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionObservation) DeepCopyInto(out *BranchPolicyCommentResolutionObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyCommentResolutionSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionObservation.
func (in *BranchPolicyCommentResolutionObservation) DeepCopy() *BranchPolicyCommentResolutionObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionParameters) DeepCopyInto(out *BranchPolicyCommentResolutionParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyCommentResolutionSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionParameters.
func (in *BranchPolicyCommentResolutionParameters) DeepCopy() *BranchPolicyCommentResolutionParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSettingsInitParameters) DeepCopyInto(out *BranchPolicyCommentResolutionSettingsInitParameters) {
	*out = *in
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyCommentResolutionSettingsScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSettingsInitParameters.
func (in *BranchPolicyCommentResolutionSettingsInitParameters) DeepCopy() *BranchPolicyCommentResolutionSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSettingsObservation) DeepCopyInto(out *BranchPolicyCommentResolutionSettingsObservation) {
	*out = *in
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyCommentResolutionSettingsScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSettingsObservation.
func (in *BranchPolicyCommentResolutionSettingsObservation) DeepCopy() *BranchPolicyCommentResolutionSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSettingsParameters) DeepCopyInto(out *BranchPolicyCommentResolutionSettingsParameters) {
	*out = *in
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyCommentResolutionSettingsScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSettingsParameters.
func (in *BranchPolicyCommentResolutionSettingsParameters) DeepCopy() *BranchPolicyCommentResolutionSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSettingsScopeInitParameters) DeepCopyInto(out *BranchPolicyCommentResolutionSettingsScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSettingsScopeInitParameters.
func (in *BranchPolicyCommentResolutionSettingsScopeInitParameters) DeepCopy() *BranchPolicyCommentResolutionSettingsScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSettingsScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSettingsScopeObservation) DeepCopyInto(out *BranchPolicyCommentResolutionSettingsScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSettingsScopeObservation.
func (in *BranchPolicyCommentResolutionSettingsScopeObservation) DeepCopy() *BranchPolicyCommentResolutionSettingsScopeObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSettingsScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSettingsScopeParameters) DeepCopyInto(out *BranchPolicyCommentResolutionSettingsScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSettingsScopeParameters.
func (in *BranchPolicyCommentResolutionSettingsScopeParameters) DeepCopy() *BranchPolicyCommentResolutionSettingsScopeParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSettingsScopeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionSpec) DeepCopyInto(out *BranchPolicyCommentResolutionSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionSpec.
func (in *BranchPolicyCommentResolutionSpec) DeepCopy() *BranchPolicyCommentResolutionSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyCommentResolutionStatus) DeepCopyInto(out *BranchPolicyCommentResolutionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyCommentResolutionStatus.
func (in *BranchPolicyCommentResolutionStatus) DeepCopy() *BranchPolicyCommentResolutionStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyCommentResolutionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypes) DeepCopyInto(out *BranchPolicyMergeTypes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypes.
func (in *BranchPolicyMergeTypes) DeepCopy() *BranchPolicyMergeTypes {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyMergeTypes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesInitParameters) DeepCopyInto(out *BranchPolicyMergeTypesInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyMergeTypesSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesInitParameters.
func (in *BranchPolicyMergeTypesInitParameters) DeepCopy() *BranchPolicyMergeTypesInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesList) DeepCopyInto(out *BranchPolicyMergeTypesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyMergeTypes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesList.
func (in *BranchPolicyMergeTypesList) DeepCopy() *BranchPolicyMergeTypesList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyMergeTypesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesObservation) DeepCopyInto(out *BranchPolicyMergeTypesObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyMergeTypesSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesObservation.
func (in *BranchPolicyMergeTypesObservation) DeepCopy() *BranchPolicyMergeTypesObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesParameters) DeepCopyInto(out *BranchPolicyMergeTypesParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyMergeTypesSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesParameters.
func (in *BranchPolicyMergeTypesParameters) DeepCopy() *BranchPolicyMergeTypesParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSettingsInitParameters) DeepCopyInto(out *BranchPolicyMergeTypesSettingsInitParameters) {
	*out = *in
	if in.AllowBasicNoFastForward != nil {
		in, out := &in.AllowBasicNoFastForward, &out.AllowBasicNoFastForward
		*out = new(bool)
		**out = **in
	}
	if in.AllowRebaseAndFastForward != nil {
		in, out := &in.AllowRebaseAndFastForward, &out.AllowRebaseAndFastForward
		*out = new(bool)
		**out = **in
	}
	if in.AllowRebaseWithMerge != nil {
		in, out := &in.AllowRebaseWithMerge, &out.AllowRebaseWithMerge
		*out = new(bool)
		**out = **in
	}
	if in.AllowSquash != nil {
		in, out := &in.AllowSquash, &out.AllowSquash
		*out = new(bool)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyMergeTypesSettingsScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSettingsInitParameters.
func (in *BranchPolicyMergeTypesSettingsInitParameters) DeepCopy() *BranchPolicyMergeTypesSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSettingsObservation) DeepCopyInto(out *BranchPolicyMergeTypesSettingsObservation) {
	*out = *in
	if in.AllowBasicNoFastForward != nil {
		in, out := &in.AllowBasicNoFastForward, &out.AllowBasicNoFastForward
		*out = new(bool)
		**out = **in
	}
	if in.AllowRebaseAndFastForward != nil {
		in, out := &in.AllowRebaseAndFastForward, &out.AllowRebaseAndFastForward
		*out = new(bool)
		**out = **in
	}
	if in.AllowRebaseWithMerge != nil {
		in, out := &in.AllowRebaseWithMerge, &out.AllowRebaseWithMerge
		*out = new(bool)
		**out = **in
	}
	if in.AllowSquash != nil {
		in, out := &in.AllowSquash, &out.AllowSquash
		*out = new(bool)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyMergeTypesSettingsScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSettingsObservation.
func (in *BranchPolicyMergeTypesSettingsObservation) DeepCopy() *BranchPolicyMergeTypesSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSettingsParameters) DeepCopyInto(out *BranchPolicyMergeTypesSettingsParameters) {
	*out = *in
	if in.AllowBasicNoFastForward != nil {
		in, out := &in.AllowBasicNoFastForward, &out.AllowBasicNoFastForward
		*out = new(bool)
		**out = **in
	}
	if in.AllowRebaseAndFastForward != nil {
		in, out := &in.AllowRebaseAndFastForward, &out.AllowRebaseAndFastForward
		*out = new(bool)
		**out = **in
	}
	if in.AllowRebaseWithMerge != nil {
		in, out := &in.AllowRebaseWithMerge, &out.AllowRebaseWithMerge
		*out = new(bool)
		**out = **in
	}
	if in.AllowSquash != nil {
		in, out := &in.AllowSquash, &out.AllowSquash
		*out = new(bool)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyMergeTypesSettingsScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSettingsParameters.
func (in *BranchPolicyMergeTypesSettingsParameters) DeepCopy() *BranchPolicyMergeTypesSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSettingsScopeInitParameters) DeepCopyInto(out *BranchPolicyMergeTypesSettingsScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSettingsScopeInitParameters.
func (in *BranchPolicyMergeTypesSettingsScopeInitParameters) DeepCopy() *BranchPolicyMergeTypesSettingsScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSettingsScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSettingsScopeObservation) DeepCopyInto(out *BranchPolicyMergeTypesSettingsScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSettingsScopeObservation.
func (in *BranchPolicyMergeTypesSettingsScopeObservation) DeepCopy() *BranchPolicyMergeTypesSettingsScopeObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSettingsScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSettingsScopeParameters) DeepCopyInto(out *BranchPolicyMergeTypesSettingsScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSettingsScopeParameters.
func (in *BranchPolicyMergeTypesSettingsScopeParameters) DeepCopy() *BranchPolicyMergeTypesSettingsScopeParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSettingsScopeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesSpec) DeepCopyInto(out *BranchPolicyMergeTypesSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesSpec.
func (in *BranchPolicyMergeTypesSpec) DeepCopy() *BranchPolicyMergeTypesSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMergeTypesStatus) DeepCopyInto(out *BranchPolicyMergeTypesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMergeTypesStatus.
func (in *BranchPolicyMergeTypesStatus) DeepCopy() *BranchPolicyMergeTypesStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMergeTypesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewers) DeepCopyInto(out *BranchPolicyMinReviewers) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewers.
func (in *BranchPolicyMinReviewers) DeepCopy() *BranchPolicyMinReviewers {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyMinReviewers) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersInitParameters) DeepCopyInto(out *BranchPolicyMinReviewersInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyMinReviewersSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersInitParameters.
func (in *BranchPolicyMinReviewersInitParameters) DeepCopy() *BranchPolicyMinReviewersInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersList) DeepCopyInto(out *BranchPolicyMinReviewersList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyMinReviewers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersList.
func (in *BranchPolicyMinReviewersList) DeepCopy() *BranchPolicyMinReviewersList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyMinReviewersList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersObservation) DeepCopyInto(out *BranchPolicyMinReviewersObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyMinReviewersSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersObservation.
func (in *BranchPolicyMinReviewersObservation) DeepCopy() *BranchPolicyMinReviewersObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersParameters) DeepCopyInto(out *BranchPolicyMinReviewersParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyMinReviewersSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersParameters.
func (in *BranchPolicyMinReviewersParameters) DeepCopy() *BranchPolicyMinReviewersParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSettingsInitParameters) DeepCopyInto(out *BranchPolicyMinReviewersSettingsInitParameters) {
	*out = *in
	if in.AllowCompletionWithRejectsOrWaits != nil {
		in, out := &in.AllowCompletionWithRejectsOrWaits, &out.AllowCompletionWithRejectsOrWaits
		*out = new(bool)
		**out = **in
	}
	if in.LastPusherCannotApprove != nil {
		in, out := &in.LastPusherCannotApprove, &out.LastPusherCannotApprove
		*out = new(bool)
		**out = **in
	}
	if in.OnLastIterationRequireVote != nil {
		in, out := &in.OnLastIterationRequireVote, &out.OnLastIterationRequireVote
		*out = new(bool)
		**out = **in
	}
	if in.OnPushResetAllVotes != nil {
		in, out := &in.OnPushResetAllVotes, &out.OnPushResetAllVotes
		*out = new(bool)
		**out = **in
	}
	if in.OnPushResetApprovedVotes != nil {
		in, out := &in.OnPushResetApprovedVotes, &out.OnPushResetApprovedVotes
		*out = new(bool)
		**out = **in
	}
	if in.ReviewerCount != nil {
		in, out := &in.ReviewerCount, &out.ReviewerCount
		*out = new(float64)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyMinReviewersSettingsScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmitterCanVote != nil {
		in, out := &in.SubmitterCanVote, &out.SubmitterCanVote
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSettingsInitParameters.
func (in *BranchPolicyMinReviewersSettingsInitParameters) DeepCopy() *BranchPolicyMinReviewersSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSettingsObservation) DeepCopyInto(out *BranchPolicyMinReviewersSettingsObservation) {
	*out = *in
	if in.AllowCompletionWithRejectsOrWaits != nil {
		in, out := &in.AllowCompletionWithRejectsOrWaits, &out.AllowCompletionWithRejectsOrWaits
		*out = new(bool)
		**out = **in
	}
	if in.LastPusherCannotApprove != nil {
		in, out := &in.LastPusherCannotApprove, &out.LastPusherCannotApprove
		*out = new(bool)
		**out = **in
	}
	if in.OnLastIterationRequireVote != nil {
		in, out := &in.OnLastIterationRequireVote, &out.OnLastIterationRequireVote
		*out = new(bool)
		**out = **in
	}
	if in.OnPushResetAllVotes != nil {
		in, out := &in.OnPushResetAllVotes, &out.OnPushResetAllVotes
		*out = new(bool)
		**out = **in
	}
	if in.OnPushResetApprovedVotes != nil {
		in, out := &in.OnPushResetApprovedVotes, &out.OnPushResetApprovedVotes
		*out = new(bool)
		**out = **in
	}
	if in.ReviewerCount != nil {
		in, out := &in.ReviewerCount, &out.ReviewerCount
		*out = new(float64)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyMinReviewersSettingsScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmitterCanVote != nil {
		in, out := &in.SubmitterCanVote, &out.SubmitterCanVote
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSettingsObservation.
func (in *BranchPolicyMinReviewersSettingsObservation) DeepCopy() *BranchPolicyMinReviewersSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSettingsParameters) DeepCopyInto(out *BranchPolicyMinReviewersSettingsParameters) {
	*out = *in
	if in.AllowCompletionWithRejectsOrWaits != nil {
		in, out := &in.AllowCompletionWithRejectsOrWaits, &out.AllowCompletionWithRejectsOrWaits
		*out = new(bool)
		**out = **in
	}
	if in.LastPusherCannotApprove != nil {
		in, out := &in.LastPusherCannotApprove, &out.LastPusherCannotApprove
		*out = new(bool)
		**out = **in
	}
	if in.OnLastIterationRequireVote != nil {
		in, out := &in.OnLastIterationRequireVote, &out.OnLastIterationRequireVote
		*out = new(bool)
		**out = **in
	}
	if in.OnPushResetAllVotes != nil {
		in, out := &in.OnPushResetAllVotes, &out.OnPushResetAllVotes
		*out = new(bool)
		**out = **in
	}
	if in.OnPushResetApprovedVotes != nil {
		in, out := &in.OnPushResetApprovedVotes, &out.OnPushResetApprovedVotes
		*out = new(bool)
		**out = **in
	}
	if in.ReviewerCount != nil {
		in, out := &in.ReviewerCount, &out.ReviewerCount
		*out = new(float64)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyMinReviewersSettingsScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmitterCanVote != nil {
		in, out := &in.SubmitterCanVote, &out.SubmitterCanVote
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSettingsParameters.
func (in *BranchPolicyMinReviewersSettingsParameters) DeepCopy() *BranchPolicyMinReviewersSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSettingsScopeInitParameters) DeepCopyInto(out *BranchPolicyMinReviewersSettingsScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSettingsScopeInitParameters.
func (in *BranchPolicyMinReviewersSettingsScopeInitParameters) DeepCopy() *BranchPolicyMinReviewersSettingsScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSettingsScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSettingsScopeObservation) DeepCopyInto(out *BranchPolicyMinReviewersSettingsScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSettingsScopeObservation.
func (in *BranchPolicyMinReviewersSettingsScopeObservation) DeepCopy() *BranchPolicyMinReviewersSettingsScopeObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSettingsScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSettingsScopeParameters) DeepCopyInto(out *BranchPolicyMinReviewersSettingsScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSettingsScopeParameters.
func (in *BranchPolicyMinReviewersSettingsScopeParameters) DeepCopy() *BranchPolicyMinReviewersSettingsScopeParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSettingsScopeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersSpec) DeepCopyInto(out *BranchPolicyMinReviewersSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersSpec.
func (in *BranchPolicyMinReviewersSpec) DeepCopy() *BranchPolicyMinReviewersSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyMinReviewersStatus) DeepCopyInto(out *BranchPolicyMinReviewersStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyMinReviewersStatus.
func (in *BranchPolicyMinReviewersStatus) DeepCopy() *BranchPolicyMinReviewersStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyMinReviewersStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheck) DeepCopyInto(out *BranchPolicyStatusCheck) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheck.
func (in *BranchPolicyStatusCheck) DeepCopy() *BranchPolicyStatusCheck {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheck)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyStatusCheck) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckInitParameters) DeepCopyInto(out *BranchPolicyStatusCheckInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyStatusCheckSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckInitParameters.
func (in *BranchPolicyStatusCheckInitParameters) DeepCopy() *BranchPolicyStatusCheckInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckList) DeepCopyInto(out *BranchPolicyStatusCheckList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyStatusCheck, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckList.
func (in *BranchPolicyStatusCheckList) DeepCopy() *BranchPolicyStatusCheckList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyStatusCheckList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckObservation) DeepCopyInto(out *BranchPolicyStatusCheckObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyStatusCheckSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckObservation.
func (in *BranchPolicyStatusCheckObservation) DeepCopy() *BranchPolicyStatusCheckObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckParameters) DeepCopyInto(out *BranchPolicyStatusCheckParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyStatusCheckSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckParameters.
func (in *BranchPolicyStatusCheckParameters) DeepCopy() *BranchPolicyStatusCheckParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSettingsInitParameters) DeepCopyInto(out *BranchPolicyStatusCheckSettingsInitParameters) {
	*out = *in
	if in.Applicability != nil {
		in, out := &in.Applicability, &out.Applicability
		*out = new(string)
		**out = **in
	}
	if in.AuthorID != nil {
		in, out := &in.AuthorID, &out.AuthorID
		*out = new(string)
		**out = **in
	}
	if in.AuthorIDRef != nil {
		in, out := &in.AuthorIDRef, &out.AuthorIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorIDSelector != nil {
		in, out := &in.AuthorIDSelector, &out.AuthorIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FilenamePatterns != nil {
		in, out := &in.FilenamePatterns, &out.FilenamePatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Genre != nil {
		in, out := &in.Genre, &out.Genre
		*out = new(string)
		**out = **in
	}
	if in.InvalidateOnUpdate != nil {
		in, out := &in.InvalidateOnUpdate, &out.InvalidateOnUpdate
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyStatusCheckSettingsScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSettingsInitParameters.
func (in *BranchPolicyStatusCheckSettingsInitParameters) DeepCopy() *BranchPolicyStatusCheckSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSettingsObservation) DeepCopyInto(out *BranchPolicyStatusCheckSettingsObservation) {
	*out = *in
	if in.Applicability != nil {
		in, out := &in.Applicability, &out.Applicability
		*out = new(string)
		**out = **in
	}
	if in.AuthorID != nil {
		in, out := &in.AuthorID, &out.AuthorID
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FilenamePatterns != nil {
		in, out := &in.FilenamePatterns, &out.FilenamePatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Genre != nil {
		in, out := &in.Genre, &out.Genre
		*out = new(string)
		**out = **in
	}
	if in.InvalidateOnUpdate != nil {
		in, out := &in.InvalidateOnUpdate, &out.InvalidateOnUpdate
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyStatusCheckSettingsScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSettingsObservation.
func (in *BranchPolicyStatusCheckSettingsObservation) DeepCopy() *BranchPolicyStatusCheckSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSettingsParameters) DeepCopyInto(out *BranchPolicyStatusCheckSettingsParameters) {
	*out = *in
	if in.Applicability != nil {
		in, out := &in.Applicability, &out.Applicability
		*out = new(string)
		**out = **in
	}
	if in.AuthorID != nil {
		in, out := &in.AuthorID, &out.AuthorID
		*out = new(string)
		**out = **in
	}
	if in.AuthorIDRef != nil {
		in, out := &in.AuthorIDRef, &out.AuthorIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.AuthorIDSelector != nil {
		in, out := &in.AuthorIDSelector, &out.AuthorIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.FilenamePatterns != nil {
		in, out := &in.FilenamePatterns, &out.FilenamePatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Genre != nil {
		in, out := &in.Genre, &out.Genre
		*out = new(string)
		**out = **in
	}
	if in.InvalidateOnUpdate != nil {
		in, out := &in.InvalidateOnUpdate, &out.InvalidateOnUpdate
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyStatusCheckSettingsScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSettingsParameters.
func (in *BranchPolicyStatusCheckSettingsParameters) DeepCopy() *BranchPolicyStatusCheckSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSettingsScopeInitParameters) DeepCopyInto(out *BranchPolicyStatusCheckSettingsScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSettingsScopeInitParameters.
func (in *BranchPolicyStatusCheckSettingsScopeInitParameters) DeepCopy() *BranchPolicyStatusCheckSettingsScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSettingsScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSettingsScopeObservation) DeepCopyInto(out *BranchPolicyStatusCheckSettingsScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSettingsScopeObservation.
func (in *BranchPolicyStatusCheckSettingsScopeObservation) DeepCopy() *BranchPolicyStatusCheckSettingsScopeObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSettingsScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSettingsScopeParameters) DeepCopyInto(out *BranchPolicyStatusCheckSettingsScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSettingsScopeParameters.
func (in *BranchPolicyStatusCheckSettingsScopeParameters) DeepCopy() *BranchPolicyStatusCheckSettingsScopeParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSettingsScopeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckSpec) DeepCopyInto(out *BranchPolicyStatusCheckSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckSpec.
func (in *BranchPolicyStatusCheckSpec) DeepCopy() *BranchPolicyStatusCheckSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyStatusCheckStatus) DeepCopyInto(out *BranchPolicyStatusCheckStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyStatusCheckStatus.
func (in *BranchPolicyStatusCheckStatus) DeepCopy() *BranchPolicyStatusCheckStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyStatusCheckStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinking) DeepCopyInto(out *BranchPolicyWorkItemLinking) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinking.
func (in *BranchPolicyWorkItemLinking) DeepCopy() *BranchPolicyWorkItemLinking {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinking)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyWorkItemLinking) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingInitParameters) DeepCopyInto(out *BranchPolicyWorkItemLinkingInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyWorkItemLinkingSettingsInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingInitParameters.
func (in *BranchPolicyWorkItemLinkingInitParameters) DeepCopy() *BranchPolicyWorkItemLinkingInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingList) DeepCopyInto(out *BranchPolicyWorkItemLinkingList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BranchPolicyWorkItemLinking, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingList.
func (in *BranchPolicyWorkItemLinkingList) DeepCopy() *BranchPolicyWorkItemLinkingList {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BranchPolicyWorkItemLinkingList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingObservation) DeepCopyInto(out *BranchPolicyWorkItemLinkingObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyWorkItemLinkingSettingsObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingObservation.
func (in *BranchPolicyWorkItemLinkingObservation) DeepCopy() *BranchPolicyWorkItemLinkingObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingParameters) DeepCopyInto(out *BranchPolicyWorkItemLinkingParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = new(BranchPolicyWorkItemLinkingSettingsParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingParameters.
func (in *BranchPolicyWorkItemLinkingParameters) DeepCopy() *BranchPolicyWorkItemLinkingParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSettingsInitParameters) DeepCopyInto(out *BranchPolicyWorkItemLinkingSettingsInitParameters) {
	*out = *in
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyWorkItemLinkingSettingsScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSettingsInitParameters.
func (in *BranchPolicyWorkItemLinkingSettingsInitParameters) DeepCopy() *BranchPolicyWorkItemLinkingSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSettingsObservation) DeepCopyInto(out *BranchPolicyWorkItemLinkingSettingsObservation) {
	*out = *in
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyWorkItemLinkingSettingsScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSettingsObservation.
func (in *BranchPolicyWorkItemLinkingSettingsObservation) DeepCopy() *BranchPolicyWorkItemLinkingSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSettingsParameters) DeepCopyInto(out *BranchPolicyWorkItemLinkingSettingsParameters) {
	*out = *in
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]BranchPolicyWorkItemLinkingSettingsScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSettingsParameters.
func (in *BranchPolicyWorkItemLinkingSettingsParameters) DeepCopy() *BranchPolicyWorkItemLinkingSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSettingsScopeInitParameters) DeepCopyInto(out *BranchPolicyWorkItemLinkingSettingsScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSettingsScopeInitParameters.
func (in *BranchPolicyWorkItemLinkingSettingsScopeInitParameters) DeepCopy() *BranchPolicyWorkItemLinkingSettingsScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSettingsScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSettingsScopeObservation) DeepCopyInto(out *BranchPolicyWorkItemLinkingSettingsScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSettingsScopeObservation.
func (in *BranchPolicyWorkItemLinkingSettingsScopeObservation) DeepCopy() *BranchPolicyWorkItemLinkingSettingsScopeObservation {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSettingsScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSettingsScopeParameters) DeepCopyInto(out *BranchPolicyWorkItemLinkingSettingsScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSettingsScopeParameters.
func (in *BranchPolicyWorkItemLinkingSettingsScopeParameters) DeepCopy() *BranchPolicyWorkItemLinkingSettingsScopeParameters {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSettingsScopeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingSpec) DeepCopyInto(out *BranchPolicyWorkItemLinkingSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingSpec.
func (in *BranchPolicyWorkItemLinkingSpec) DeepCopy() *BranchPolicyWorkItemLinkingSpec {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchPolicyWorkItemLinkingStatus) DeepCopyInto(out *BranchPolicyWorkItemLinkingStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchPolicyWorkItemLinkingStatus.
func (in *BranchPolicyWorkItemLinkingStatus) DeepCopy() *BranchPolicyWorkItemLinkingStatus {
	if in == nil {
		return nil
	}
	out := new(BranchPolicyWorkItemLinkingStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApproval) DeepCopyInto(out *CheckApproval) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApproval.
func (in *CheckApproval) DeepCopy() *CheckApproval {
	if in == nil {
		return nil
	}
	out := new(CheckApproval)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckApproval) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApprovalInitParameters) DeepCopyInto(out *CheckApprovalInitParameters) {
	*out = *in
	if in.Approvers != nil {
		in, out := &in.Approvers, &out.Approvers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ApproversRefs != nil {
		in, out := &in.ApproversRefs, &out.ApproversRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ApproversSelector != nil {
		in, out := &in.ApproversSelector, &out.ApproversSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Instructions != nil {
		in, out := &in.Instructions, &out.Instructions
		*out = new(string)
		**out = **in
	}
	if in.MinimumRequiredApprovers != nil {
		in, out := &in.MinimumRequiredApprovers, &out.MinimumRequiredApprovers
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RequesterCanApprove != nil {
		in, out := &in.RequesterCanApprove, &out.RequesterCanApprove
		*out = new(bool)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApprovalInitParameters.
func (in *CheckApprovalInitParameters) DeepCopy() *CheckApprovalInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckApprovalInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApprovalList) DeepCopyInto(out *CheckApprovalList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CheckApproval, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApprovalList.
func (in *CheckApprovalList) DeepCopy() *CheckApprovalList {
	if in == nil {
		return nil
	}
	out := new(CheckApprovalList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckApprovalList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApprovalObservation) DeepCopyInto(out *CheckApprovalObservation) {
	*out = *in
	if in.Approvers != nil {
		in, out := &in.Approvers, &out.Approvers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Instructions != nil {
		in, out := &in.Instructions, &out.Instructions
		*out = new(string)
		**out = **in
	}
	if in.MinimumRequiredApprovers != nil {
		in, out := &in.MinimumRequiredApprovers, &out.MinimumRequiredApprovers
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RequesterCanApprove != nil {
		in, out := &in.RequesterCanApprove, &out.RequesterCanApprove
		*out = new(bool)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApprovalObservation.
func (in *CheckApprovalObservation) DeepCopy() *CheckApprovalObservation {
	if in == nil {
		return nil
	}
	out := new(CheckApprovalObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApprovalParameters) DeepCopyInto(out *CheckApprovalParameters) {
	*out = *in
	if in.Approvers != nil {
		in, out := &in.Approvers, &out.Approvers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ApproversRefs != nil {
		in, out := &in.ApproversRefs, &out.ApproversRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ApproversSelector != nil {
		in, out := &in.ApproversSelector, &out.ApproversSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Instructions != nil {
		in, out := &in.Instructions, &out.Instructions
		*out = new(string)
		**out = **in
	}
	if in.MinimumRequiredApprovers != nil {
		in, out := &in.MinimumRequiredApprovers, &out.MinimumRequiredApprovers
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RequesterCanApprove != nil {
		in, out := &in.RequesterCanApprove, &out.RequesterCanApprove
		*out = new(bool)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApprovalParameters.
func (in *CheckApprovalParameters) DeepCopy() *CheckApprovalParameters {
	if in == nil {
		return nil
	}
	out := new(CheckApprovalParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApprovalSpec) DeepCopyInto(out *CheckApprovalSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApprovalSpec.
func (in *CheckApprovalSpec) DeepCopy() *CheckApprovalSpec {
	if in == nil {
		return nil
	}
	out := new(CheckApprovalSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckApprovalStatus) DeepCopyInto(out *CheckApprovalStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckApprovalStatus.
func (in *CheckApprovalStatus) DeepCopy() *CheckApprovalStatus {
	if in == nil {
		return nil
	}
	out := new(CheckApprovalStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControl) DeepCopyInto(out *CheckBranchControl) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControl.
func (in *CheckBranchControl) DeepCopy() *CheckBranchControl {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControl)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckBranchControl) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControlInitParameters) DeepCopyInto(out *CheckBranchControlInitParameters) {
	*out = *in
	if in.AllowedBranches != nil {
		in, out := &in.AllowedBranches, &out.AllowedBranches
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUnknownProtectionStatus != nil {
		in, out := &in.IgnoreUnknownProtectionStatus, &out.IgnoreUnknownProtectionStatus
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.VerifyBranchProtection != nil {
		in, out := &in.VerifyBranchProtection, &out.VerifyBranchProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControlInitParameters.
func (in *CheckBranchControlInitParameters) DeepCopy() *CheckBranchControlInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControlInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControlList) DeepCopyInto(out *CheckBranchControlList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CheckBranchControl, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControlList.
func (in *CheckBranchControlList) DeepCopy() *CheckBranchControlList {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControlList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckBranchControlList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControlObservation) DeepCopyInto(out *CheckBranchControlObservation) {
	*out = *in
	if in.AllowedBranches != nil {
		in, out := &in.AllowedBranches, &out.AllowedBranches
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUnknownProtectionStatus != nil {
		in, out := &in.IgnoreUnknownProtectionStatus, &out.IgnoreUnknownProtectionStatus
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.VerifyBranchProtection != nil {
		in, out := &in.VerifyBranchProtection, &out.VerifyBranchProtection
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControlObservation.
func (in *CheckBranchControlObservation) DeepCopy() *CheckBranchControlObservation {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControlObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControlParameters) DeepCopyInto(out *CheckBranchControlParameters) {
	*out = *in
	if in.AllowedBranches != nil {
		in, out := &in.AllowedBranches, &out.AllowedBranches
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUnknownProtectionStatus != nil {
		in, out := &in.IgnoreUnknownProtectionStatus, &out.IgnoreUnknownProtectionStatus
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.VerifyBranchProtection != nil {
		in, out := &in.VerifyBranchProtection, &out.VerifyBranchProtection
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControlParameters.
func (in *CheckBranchControlParameters) DeepCopy() *CheckBranchControlParameters {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControlParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControlSpec) DeepCopyInto(out *CheckBranchControlSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControlSpec.
func (in *CheckBranchControlSpec) DeepCopy() *CheckBranchControlSpec {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControlSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBranchControlStatus) DeepCopyInto(out *CheckBranchControlStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBranchControlStatus.
func (in *CheckBranchControlStatus) DeepCopy() *CheckBranchControlStatus {
	if in == nil {
		return nil
	}
	out := new(CheckBranchControlStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHours) DeepCopyInto(out *CheckBusinessHours) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHours.
func (in *CheckBusinessHours) DeepCopy() *CheckBusinessHours {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHours)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckBusinessHours) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHoursInitParameters) DeepCopyInto(out *CheckBusinessHoursInitParameters) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.Friday != nil {
		in, out := &in.Friday, &out.Friday
		*out = new(bool)
		**out = **in
	}
	if in.Monday != nil {
		in, out := &in.Monday, &out.Monday
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Saturday != nil {
		in, out := &in.Saturday, &out.Saturday
		*out = new(bool)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Sunday != nil {
		in, out := &in.Sunday, &out.Sunday
		*out = new(bool)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Thursday != nil {
		in, out := &in.Thursday, &out.Thursday
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Tuesday != nil {
		in, out := &in.Tuesday, &out.Tuesday
		*out = new(bool)
		**out = **in
	}
	if in.Wednesday != nil {
		in, out := &in.Wednesday, &out.Wednesday
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHoursInitParameters.
func (in *CheckBusinessHoursInitParameters) DeepCopy() *CheckBusinessHoursInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHoursInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHoursList) DeepCopyInto(out *CheckBusinessHoursList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CheckBusinessHours, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHoursList.
func (in *CheckBusinessHoursList) DeepCopy() *CheckBusinessHoursList {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHoursList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckBusinessHoursList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHoursObservation) DeepCopyInto(out *CheckBusinessHoursObservation) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.Friday != nil {
		in, out := &in.Friday, &out.Friday
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Monday != nil {
		in, out := &in.Monday, &out.Monday
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Saturday != nil {
		in, out := &in.Saturday, &out.Saturday
		*out = new(bool)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Sunday != nil {
		in, out := &in.Sunday, &out.Sunday
		*out = new(bool)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Thursday != nil {
		in, out := &in.Thursday, &out.Thursday
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Tuesday != nil {
		in, out := &in.Tuesday, &out.Tuesday
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(float64)
		**out = **in
	}
	if in.Wednesday != nil {
		in, out := &in.Wednesday, &out.Wednesday
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHoursObservation.
func (in *CheckBusinessHoursObservation) DeepCopy() *CheckBusinessHoursObservation {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHoursObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHoursParameters) DeepCopyInto(out *CheckBusinessHoursParameters) {
	*out = *in
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.Friday != nil {
		in, out := &in.Friday, &out.Friday
		*out = new(bool)
		**out = **in
	}
	if in.Monday != nil {
		in, out := &in.Monday, &out.Monday
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Saturday != nil {
		in, out := &in.Saturday, &out.Saturday
		*out = new(bool)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Sunday != nil {
		in, out := &in.Sunday, &out.Sunday
		*out = new(bool)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Thursday != nil {
		in, out := &in.Thursday, &out.Thursday
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Tuesday != nil {
		in, out := &in.Tuesday, &out.Tuesday
		*out = new(bool)
		**out = **in
	}
	if in.Wednesday != nil {
		in, out := &in.Wednesday, &out.Wednesday
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHoursParameters.
func (in *CheckBusinessHoursParameters) DeepCopy() *CheckBusinessHoursParameters {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHoursParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHoursSpec) DeepCopyInto(out *CheckBusinessHoursSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHoursSpec.
func (in *CheckBusinessHoursSpec) DeepCopy() *CheckBusinessHoursSpec {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHoursSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckBusinessHoursStatus) DeepCopyInto(out *CheckBusinessHoursStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckBusinessHoursStatus.
func (in *CheckBusinessHoursStatus) DeepCopy() *CheckBusinessHoursStatus {
	if in == nil {
		return nil
	}
	out := new(CheckBusinessHoursStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLock) DeepCopyInto(out *CheckExclusiveLock) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLock.
func (in *CheckExclusiveLock) DeepCopy() *CheckExclusiveLock {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLock)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckExclusiveLock) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLockInitParameters) DeepCopyInto(out *CheckExclusiveLockInitParameters) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLockInitParameters.
func (in *CheckExclusiveLockInitParameters) DeepCopy() *CheckExclusiveLockInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLockInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLockList) DeepCopyInto(out *CheckExclusiveLockList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CheckExclusiveLock, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLockList.
func (in *CheckExclusiveLockList) DeepCopy() *CheckExclusiveLockList {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLockList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckExclusiveLockList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLockObservation) DeepCopyInto(out *CheckExclusiveLockObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLockObservation.
func (in *CheckExclusiveLockObservation) DeepCopy() *CheckExclusiveLockObservation {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLockObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLockParameters) DeepCopyInto(out *CheckExclusiveLockParameters) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLockParameters.
func (in *CheckExclusiveLockParameters) DeepCopy() *CheckExclusiveLockParameters {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLockParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLockSpec) DeepCopyInto(out *CheckExclusiveLockSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLockSpec.
func (in *CheckExclusiveLockSpec) DeepCopy() *CheckExclusiveLockSpec {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLockSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckExclusiveLockStatus) DeepCopyInto(out *CheckExclusiveLockStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckExclusiveLockStatus.
func (in *CheckExclusiveLockStatus) DeepCopy() *CheckExclusiveLockStatus {
	if in == nil {
		return nil
	}
	out := new(CheckExclusiveLockStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplate) DeepCopyInto(out *CheckRequiredTemplate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplate.
func (in *CheckRequiredTemplate) DeepCopy() *CheckRequiredTemplate {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckRequiredTemplate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplateInitParameters) DeepCopyInto(out *CheckRequiredTemplateInitParameters) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RequiredTemplate != nil {
		in, out := &in.RequiredTemplate, &out.RequiredTemplate
		*out = make([]RequiredTemplateInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplateInitParameters.
func (in *CheckRequiredTemplateInitParameters) DeepCopy() *CheckRequiredTemplateInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplateList) DeepCopyInto(out *CheckRequiredTemplateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CheckRequiredTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplateList.
func (in *CheckRequiredTemplateList) DeepCopy() *CheckRequiredTemplateList {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckRequiredTemplateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplateObservation) DeepCopyInto(out *CheckRequiredTemplateObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RequiredTemplate != nil {
		in, out := &in.RequiredTemplate, &out.RequiredTemplate
		*out = make([]RequiredTemplateObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplateObservation.
func (in *CheckRequiredTemplateObservation) DeepCopy() *CheckRequiredTemplateObservation {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplateParameters) DeepCopyInto(out *CheckRequiredTemplateParameters) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RequiredTemplate != nil {
		in, out := &in.RequiredTemplate, &out.RequiredTemplate
		*out = make([]RequiredTemplateParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplateParameters.
func (in *CheckRequiredTemplateParameters) DeepCopy() *CheckRequiredTemplateParameters {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplateSpec) DeepCopyInto(out *CheckRequiredTemplateSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplateSpec.
func (in *CheckRequiredTemplateSpec) DeepCopy() *CheckRequiredTemplateSpec {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRequiredTemplateStatus) DeepCopyInto(out *CheckRequiredTemplateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRequiredTemplateStatus.
func (in *CheckRequiredTemplateStatus) DeepCopy() *CheckRequiredTemplateStatus {
	if in == nil {
		return nil
	}
	out := new(CheckRequiredTemplateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPI) DeepCopyInto(out *CheckRestAPI) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPI.
func (in *CheckRestAPI) DeepCopy() *CheckRestAPI {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPI)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckRestAPI) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPIInitParameters) DeepCopyInto(out *CheckRestAPIInitParameters) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.CompletionEvent != nil {
		in, out := &in.CompletionEvent, &out.CompletionEvent
		*out = new(string)
		**out = **in
	}
	if in.ConnectedServiceName != nil {
		in, out := &in.ConnectedServiceName, &out.ConnectedServiceName
		*out = new(string)
		**out = **in
	}
	if in.ConnectedServiceNameSelector != nil {
		in, out := &in.ConnectedServiceNameSelector, &out.ConnectedServiceNameSelector
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RetryInterval != nil {
		in, out := &in.RetryInterval, &out.RetryInterval
		*out = new(float64)
		**out = **in
	}
	if in.SuccessCriteria != nil {
		in, out := &in.SuccessCriteria, &out.SuccessCriteria
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.URLSuffix != nil {
		in, out := &in.URLSuffix, &out.URLSuffix
		*out = new(string)
		**out = **in
	}
	if in.VariableGroupName != nil {
		in, out := &in.VariableGroupName, &out.VariableGroupName
		*out = new(string)
		**out = **in
	}
	if in.VariableGroupNameRef != nil {
		in, out := &in.VariableGroupNameRef, &out.VariableGroupNameRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.VariableGroupNameSelector != nil {
		in, out := &in.VariableGroupNameSelector, &out.VariableGroupNameSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPIInitParameters.
func (in *CheckRestAPIInitParameters) DeepCopy() *CheckRestAPIInitParameters {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPIInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPIList) DeepCopyInto(out *CheckRestAPIList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CheckRestAPI, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPIList.
func (in *CheckRestAPIList) DeepCopy() *CheckRestAPIList {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPIList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CheckRestAPIList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPIObservation) DeepCopyInto(out *CheckRestAPIObservation) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.CompletionEvent != nil {
		in, out := &in.CompletionEvent, &out.CompletionEvent
		*out = new(string)
		**out = **in
	}
	if in.ConnectedServiceName != nil {
		in, out := &in.ConnectedServiceName, &out.ConnectedServiceName
		*out = new(string)
		**out = **in
	}
	if in.ConnectedServiceNameSelector != nil {
		in, out := &in.ConnectedServiceNameSelector, &out.ConnectedServiceNameSelector
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RetryInterval != nil {
		in, out := &in.RetryInterval, &out.RetryInterval
		*out = new(float64)
		**out = **in
	}
	if in.SuccessCriteria != nil {
		in, out := &in.SuccessCriteria, &out.SuccessCriteria
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.URLSuffix != nil {
		in, out := &in.URLSuffix, &out.URLSuffix
		*out = new(string)
		**out = **in
	}
	if in.VariableGroupName != nil {
		in, out := &in.VariableGroupName, &out.VariableGroupName
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPIObservation.
func (in *CheckRestAPIObservation) DeepCopy() *CheckRestAPIObservation {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPIObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPIParameters) DeepCopyInto(out *CheckRestAPIParameters) {
	*out = *in
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		*out = new(string)
		**out = **in
	}
	if in.CompletionEvent != nil {
		in, out := &in.CompletionEvent, &out.CompletionEvent
		*out = new(string)
		**out = **in
	}
	if in.ConnectedServiceName != nil {
		in, out := &in.ConnectedServiceName, &out.ConnectedServiceName
		*out = new(string)
		**out = **in
	}
	if in.ConnectedServiceNameSelector != nil {
		in, out := &in.ConnectedServiceNameSelector, &out.ConnectedServiceNameSelector
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = new(string)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RetryInterval != nil {
		in, out := &in.RetryInterval, &out.RetryInterval
		*out = new(float64)
		**out = **in
	}
	if in.SuccessCriteria != nil {
		in, out := &in.SuccessCriteria, &out.SuccessCriteria
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceID != nil {
		in, out := &in.TargetResourceID, &out.TargetResourceID
		*out = new(string)
		**out = **in
	}
	if in.TargetResourceIDRef != nil {
		in, out := &in.TargetResourceIDRef, &out.TargetResourceIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceIDSelector != nil {
		in, out := &in.TargetResourceIDSelector, &out.TargetResourceIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetResourceType != nil {
		in, out := &in.TargetResourceType, &out.TargetResourceType
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.URLSuffix != nil {
		in, out := &in.URLSuffix, &out.URLSuffix
		*out = new(string)
		**out = **in
	}
	if in.VariableGroupName != nil {
		in, out := &in.VariableGroupName, &out.VariableGroupName
		*out = new(string)
		**out = **in
	}
	if in.VariableGroupNameRef != nil {
		in, out := &in.VariableGroupNameRef, &out.VariableGroupNameRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.VariableGroupNameSelector != nil {
		in, out := &in.VariableGroupNameSelector, &out.VariableGroupNameSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPIParameters.
func (in *CheckRestAPIParameters) DeepCopy() *CheckRestAPIParameters {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPIParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPISpec) DeepCopyInto(out *CheckRestAPISpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPISpec.
func (in *CheckRestAPISpec) DeepCopy() *CheckRestAPISpec {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPISpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRestAPIStatus) DeepCopyInto(out *CheckRestAPIStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRestAPIStatus.
func (in *CheckRestAPIStatus) DeepCopy() *CheckRestAPIStatus {
	if in == nil {
		return nil
	}
	out := new(CheckRestAPIStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepository) DeepCopyInto(out *GitRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepository.
func (in *GitRepository) DeepCopy() *GitRepository {
	if in == nil {
		return nil
	}
	out := new(GitRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranch) DeepCopyInto(out *GitRepositoryBranch) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranch.
func (in *GitRepositoryBranch) DeepCopy() *GitRepositoryBranch {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitRepositoryBranch) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranchInitParameters) DeepCopyInto(out *GitRepositoryBranchInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RefBranch != nil {
		in, out := &in.RefBranch, &out.RefBranch
		*out = new(string)
		**out = **in
	}
	if in.RefBranchRef != nil {
		in, out := &in.RefBranchRef, &out.RefBranchRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RefBranchSelector != nil {
		in, out := &in.RefBranchSelector, &out.RefBranchSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefCommitID != nil {
		in, out := &in.RefCommitID, &out.RefCommitID
		*out = new(string)
		**out = **in
	}
	if in.RefCommitIDRef != nil {
		in, out := &in.RefCommitIDRef, &out.RefCommitIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RefCommitIDSelector != nil {
		in, out := &in.RefCommitIDSelector, &out.RefCommitIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefTag != nil {
		in, out := &in.RefTag, &out.RefTag
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranchInitParameters.
func (in *GitRepositoryBranchInitParameters) DeepCopy() *GitRepositoryBranchInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranchInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranchList) DeepCopyInto(out *GitRepositoryBranchList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GitRepositoryBranch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranchList.
func (in *GitRepositoryBranchList) DeepCopy() *GitRepositoryBranchList {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranchList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitRepositoryBranchList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranchObservation) DeepCopyInto(out *GitRepositoryBranchObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RefBranch != nil {
		in, out := &in.RefBranch, &out.RefBranch
		*out = new(string)
		**out = **in
	}
	if in.RefCommitID != nil {
		in, out := &in.RefCommitID, &out.RefCommitID
		*out = new(string)
		**out = **in
	}
	if in.RefTag != nil {
		in, out := &in.RefTag, &out.RefTag
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranchObservation.
func (in *GitRepositoryBranchObservation) DeepCopy() *GitRepositoryBranchObservation {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranchParameters) DeepCopyInto(out *GitRepositoryBranchParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RefBranch != nil {
		in, out := &in.RefBranch, &out.RefBranch
		*out = new(string)
		**out = **in
	}
	if in.RefBranchRef != nil {
		in, out := &in.RefBranchRef, &out.RefBranchRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RefBranchSelector != nil {
		in, out := &in.RefBranchSelector, &out.RefBranchSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefCommitID != nil {
		in, out := &in.RefCommitID, &out.RefCommitID
		*out = new(string)
		**out = **in
	}
	if in.RefCommitIDRef != nil {
		in, out := &in.RefCommitIDRef, &out.RefCommitIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RefCommitIDSelector != nil {
		in, out := &in.RefCommitIDSelector, &out.RefCommitIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefTag != nil {
		in, out := &in.RefTag, &out.RefTag
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranchParameters.
func (in *GitRepositoryBranchParameters) DeepCopy() *GitRepositoryBranchParameters {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranchSpec) DeepCopyInto(out *GitRepositoryBranchSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranchSpec.
func (in *GitRepositoryBranchSpec) DeepCopy() *GitRepositoryBranchSpec {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranchSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryBranchStatus) DeepCopyInto(out *GitRepositoryBranchStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryBranchStatus.
func (in *GitRepositoryBranchStatus) DeepCopy() *GitRepositoryBranchStatus {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryBranchStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFile) DeepCopyInto(out *GitRepositoryFile) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFile.
func (in *GitRepositoryFile) DeepCopy() *GitRepositoryFile {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitRepositoryFile) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFileInitParameters) DeepCopyInto(out *GitRepositoryFileInitParameters) {
	*out = *in
	if in.AuthorEmail != nil {
		in, out := &in.AuthorEmail, &out.AuthorEmail
		*out = new(string)
		**out = **in
	}
	if in.AuthorName != nil {
		in, out := &in.AuthorName, &out.AuthorName
		*out = new(string)
		**out = **in
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommitMessage != nil {
		in, out := &in.CommitMessage, &out.CommitMessage
		*out = new(string)
		**out = **in
	}
	if in.CommitterEmail != nil {
		in, out := &in.CommitterEmail, &out.CommitterEmail
		*out = new(string)
		**out = **in
	}
	if in.CommitterName != nil {
		in, out := &in.CommitterName, &out.CommitterName
		*out = new(string)
		**out = **in
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.File != nil {
		in, out := &in.File, &out.File
		*out = new(string)
		**out = **in
	}
	if in.OverwriteOnCreate != nil {
		in, out := &in.OverwriteOnCreate, &out.OverwriteOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFileInitParameters.
func (in *GitRepositoryFileInitParameters) DeepCopy() *GitRepositoryFileInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFileInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFileList) DeepCopyInto(out *GitRepositoryFileList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GitRepositoryFile, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFileList.
func (in *GitRepositoryFileList) DeepCopy() *GitRepositoryFileList {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFileList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitRepositoryFileList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFileObservation) DeepCopyInto(out *GitRepositoryFileObservation) {
	*out = *in
	if in.AuthorEmail != nil {
		in, out := &in.AuthorEmail, &out.AuthorEmail
		*out = new(string)
		**out = **in
	}
	if in.AuthorName != nil {
		in, out := &in.AuthorName, &out.AuthorName
		*out = new(string)
		**out = **in
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommitMessage != nil {
		in, out := &in.CommitMessage, &out.CommitMessage
		*out = new(string)
		**out = **in
	}
	if in.CommitterEmail != nil {
		in, out := &in.CommitterEmail, &out.CommitterEmail
		*out = new(string)
		**out = **in
	}
	if in.CommitterName != nil {
		in, out := &in.CommitterName, &out.CommitterName
		*out = new(string)
		**out = **in
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.File != nil {
		in, out := &in.File, &out.File
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.OverwriteOnCreate != nil {
		in, out := &in.OverwriteOnCreate, &out.OverwriteOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFileObservation.
func (in *GitRepositoryFileObservation) DeepCopy() *GitRepositoryFileObservation {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFileObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFileParameters) DeepCopyInto(out *GitRepositoryFileParameters) {
	*out = *in
	if in.AuthorEmail != nil {
		in, out := &in.AuthorEmail, &out.AuthorEmail
		*out = new(string)
		**out = **in
	}
	if in.AuthorName != nil {
		in, out := &in.AuthorName, &out.AuthorName
		*out = new(string)
		**out = **in
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		*out = new(string)
		**out = **in
	}
	if in.CommitMessage != nil {
		in, out := &in.CommitMessage, &out.CommitMessage
		*out = new(string)
		**out = **in
	}
	if in.CommitterEmail != nil {
		in, out := &in.CommitterEmail, &out.CommitterEmail
		*out = new(string)
		**out = **in
	}
	if in.CommitterName != nil {
		in, out := &in.CommitterName, &out.CommitterName
		*out = new(string)
		**out = **in
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(string)
		**out = **in
	}
	if in.File != nil {
		in, out := &in.File, &out.File
		*out = new(string)
		**out = **in
	}
	if in.OverwriteOnCreate != nil {
		in, out := &in.OverwriteOnCreate, &out.OverwriteOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFileParameters.
func (in *GitRepositoryFileParameters) DeepCopy() *GitRepositoryFileParameters {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFileParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFileSpec) DeepCopyInto(out *GitRepositoryFileSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFileSpec.
func (in *GitRepositoryFileSpec) DeepCopy() *GitRepositoryFileSpec {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFileSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryFileStatus) DeepCopyInto(out *GitRepositoryFileStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryFileStatus.
func (in *GitRepositoryFileStatus) DeepCopy() *GitRepositoryFileStatus {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryFileStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryInitParameters) DeepCopyInto(out *GitRepositoryInitParameters) {
	*out = *in
	if in.DefaultBranch != nil {
		in, out := &in.DefaultBranch, &out.DefaultBranch
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Initialization != nil {
		in, out := &in.Initialization, &out.Initialization
		*out = new(InitializationInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentRepositoryID != nil {
		in, out := &in.ParentRepositoryID, &out.ParentRepositoryID
		*out = new(string)
		**out = **in
	}
	if in.ParentRepositoryIDRef != nil {
		in, out := &in.ParentRepositoryIDRef, &out.ParentRepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ParentRepositoryIDSelector != nil {
		in, out := &in.ParentRepositoryIDSelector, &out.ParentRepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryInitParameters.
func (in *GitRepositoryInitParameters) DeepCopy() *GitRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryList) DeepCopyInto(out *GitRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GitRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryList.
func (in *GitRepositoryList) DeepCopy() *GitRepositoryList {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GitRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryObservation) DeepCopyInto(out *GitRepositoryObservation) {
	*out = *in
	if in.DefaultBranch != nil {
		in, out := &in.DefaultBranch, &out.DefaultBranch
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Initialization != nil {
		in, out := &in.Initialization, &out.Initialization
		*out = new(InitializationObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.IsFork != nil {
		in, out := &in.IsFork, &out.IsFork
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentRepositoryID != nil {
		in, out := &in.ParentRepositoryID, &out.ParentRepositoryID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RemoteURL != nil {
		in, out := &in.RemoteURL, &out.RemoteURL
		*out = new(string)
		**out = **in
	}
	if in.SSHURL != nil {
		in, out := &in.SSHURL, &out.SSHURL
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
	if in.WebURL != nil {
		in, out := &in.WebURL, &out.WebURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryObservation.
func (in *GitRepositoryObservation) DeepCopy() *GitRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryParameters) DeepCopyInto(out *GitRepositoryParameters) {
	*out = *in
	if in.DefaultBranch != nil {
		in, out := &in.DefaultBranch, &out.DefaultBranch
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Initialization != nil {
		in, out := &in.Initialization, &out.Initialization
		*out = new(InitializationParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentRepositoryID != nil {
		in, out := &in.ParentRepositoryID, &out.ParentRepositoryID
		*out = new(string)
		**out = **in
	}
	if in.ParentRepositoryIDRef != nil {
		in, out := &in.ParentRepositoryIDRef, &out.ParentRepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ParentRepositoryIDSelector != nil {
		in, out := &in.ParentRepositoryIDSelector, &out.ParentRepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryParameters.
func (in *GitRepositoryParameters) DeepCopy() *GitRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositorySpec) DeepCopyInto(out *GitRepositorySpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositorySpec.
func (in *GitRepositorySpec) DeepCopy() *GitRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(GitRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitRepositoryStatus) DeepCopyInto(out *GitRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitRepositoryStatus.
func (in *GitRepositoryStatus) DeepCopy() *GitRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(GitRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InitializationInitParameters) DeepCopyInto(out *InitializationInitParameters) {
	*out = *in
	if in.InitType != nil {
		in, out := &in.InitType, &out.InitType
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.ServiceConnectionID != nil {
		in, out := &in.ServiceConnectionID, &out.ServiceConnectionID
		*out = new(string)
		**out = **in
	}
	if in.ServiceConnectionIDRef != nil {
		in, out := &in.ServiceConnectionIDRef, &out.ServiceConnectionIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceConnectionIDSelector != nil {
		in, out := &in.ServiceConnectionIDSelector, &out.ServiceConnectionIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.SourceURL != nil {
		in, out := &in.SourceURL, &out.SourceURL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InitializationInitParameters.
func (in *InitializationInitParameters) DeepCopy() *InitializationInitParameters {
	if in == nil {
		return nil
	}
	out := new(InitializationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InitializationObservation) DeepCopyInto(out *InitializationObservation) {
	*out = *in
	if in.InitType != nil {
		in, out := &in.InitType, &out.InitType
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.ServiceConnectionID != nil {
		in, out := &in.ServiceConnectionID, &out.ServiceConnectionID
		*out = new(string)
		**out = **in
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.SourceURL != nil {
		in, out := &in.SourceURL, &out.SourceURL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InitializationObservation.
func (in *InitializationObservation) DeepCopy() *InitializationObservation {
	if in == nil {
		return nil
	}
	out := new(InitializationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InitializationParameters) DeepCopyInto(out *InitializationParameters) {
	*out = *in
	if in.InitType != nil {
		in, out := &in.InitType, &out.InitType
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.ServiceConnectionID != nil {
		in, out := &in.ServiceConnectionID, &out.ServiceConnectionID
		*out = new(string)
		**out = **in
	}
	if in.ServiceConnectionIDRef != nil {
		in, out := &in.ServiceConnectionIDRef, &out.ServiceConnectionIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceConnectionIDSelector != nil {
		in, out := &in.ServiceConnectionIDSelector, &out.ServiceConnectionIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceType != nil {
		in, out := &in.SourceType, &out.SourceType
		*out = new(string)
		**out = **in
	}
	if in.SourceURL != nil {
		in, out := &in.SourceURL, &out.SourceURL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InitializationParameters.
func (in *InitializationParameters) DeepCopy() *InitializationParameters {
	if in == nil {
		return nil
	}
	out := new(InitializationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPattern) DeepCopyInto(out *RepositoryPolicyAuthorEmailPattern) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPattern.
func (in *RepositoryPolicyAuthorEmailPattern) DeepCopy() *RepositoryPolicyAuthorEmailPattern {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPattern)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyAuthorEmailPattern) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPatternInitParameters) DeepCopyInto(out *RepositoryPolicyAuthorEmailPatternInitParameters) {
	*out = *in
	if in.AuthorEmailPatterns != nil {
		in, out := &in.AuthorEmailPatterns, &out.AuthorEmailPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPatternInitParameters.
func (in *RepositoryPolicyAuthorEmailPatternInitParameters) DeepCopy() *RepositoryPolicyAuthorEmailPatternInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPatternInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPatternList) DeepCopyInto(out *RepositoryPolicyAuthorEmailPatternList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyAuthorEmailPattern, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPatternList.
func (in *RepositoryPolicyAuthorEmailPatternList) DeepCopy() *RepositoryPolicyAuthorEmailPatternList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPatternList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyAuthorEmailPatternList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPatternObservation) DeepCopyInto(out *RepositoryPolicyAuthorEmailPatternObservation) {
	*out = *in
	if in.AuthorEmailPatterns != nil {
		in, out := &in.AuthorEmailPatterns, &out.AuthorEmailPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPatternObservation.
func (in *RepositoryPolicyAuthorEmailPatternObservation) DeepCopy() *RepositoryPolicyAuthorEmailPatternObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPatternObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPatternParameters) DeepCopyInto(out *RepositoryPolicyAuthorEmailPatternParameters) {
	*out = *in
	if in.AuthorEmailPatterns != nil {
		in, out := &in.AuthorEmailPatterns, &out.AuthorEmailPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPatternParameters.
func (in *RepositoryPolicyAuthorEmailPatternParameters) DeepCopy() *RepositoryPolicyAuthorEmailPatternParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPatternParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPatternSpec) DeepCopyInto(out *RepositoryPolicyAuthorEmailPatternSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPatternSpec.
func (in *RepositoryPolicyAuthorEmailPatternSpec) DeepCopy() *RepositoryPolicyAuthorEmailPatternSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPatternSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyAuthorEmailPatternStatus) DeepCopyInto(out *RepositoryPolicyAuthorEmailPatternStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyAuthorEmailPatternStatus.
func (in *RepositoryPolicyAuthorEmailPatternStatus) DeepCopy() *RepositoryPolicyAuthorEmailPatternStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyAuthorEmailPatternStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcement) DeepCopyInto(out *RepositoryPolicyCaseEnforcement) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcement.
func (in *RepositoryPolicyCaseEnforcement) DeepCopy() *RepositoryPolicyCaseEnforcement {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyCaseEnforcement) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcementInitParameters) DeepCopyInto(out *RepositoryPolicyCaseEnforcementInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EnforceConsistentCase != nil {
		in, out := &in.EnforceConsistentCase, &out.EnforceConsistentCase
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcementInitParameters.
func (in *RepositoryPolicyCaseEnforcementInitParameters) DeepCopy() *RepositoryPolicyCaseEnforcementInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcementInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcementList) DeepCopyInto(out *RepositoryPolicyCaseEnforcementList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyCaseEnforcement, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcementList.
func (in *RepositoryPolicyCaseEnforcementList) DeepCopy() *RepositoryPolicyCaseEnforcementList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcementList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyCaseEnforcementList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcementObservation) DeepCopyInto(out *RepositoryPolicyCaseEnforcementObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EnforceConsistentCase != nil {
		in, out := &in.EnforceConsistentCase, &out.EnforceConsistentCase
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcementObservation.
func (in *RepositoryPolicyCaseEnforcementObservation) DeepCopy() *RepositoryPolicyCaseEnforcementObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcementObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcementParameters) DeepCopyInto(out *RepositoryPolicyCaseEnforcementParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.EnforceConsistentCase != nil {
		in, out := &in.EnforceConsistentCase, &out.EnforceConsistentCase
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcementParameters.
func (in *RepositoryPolicyCaseEnforcementParameters) DeepCopy() *RepositoryPolicyCaseEnforcementParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcementParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcementSpec) DeepCopyInto(out *RepositoryPolicyCaseEnforcementSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcementSpec.
func (in *RepositoryPolicyCaseEnforcementSpec) DeepCopy() *RepositoryPolicyCaseEnforcementSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcementSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCaseEnforcementStatus) DeepCopyInto(out *RepositoryPolicyCaseEnforcementStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCaseEnforcementStatus.
func (in *RepositoryPolicyCaseEnforcementStatus) DeepCopy() *RepositoryPolicyCaseEnforcementStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCaseEnforcementStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentials) DeepCopyInto(out *RepositoryPolicyCheckCredentials) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentials.
func (in *RepositoryPolicyCheckCredentials) DeepCopy() *RepositoryPolicyCheckCredentials {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentials)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyCheckCredentials) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentialsInitParameters) DeepCopyInto(out *RepositoryPolicyCheckCredentialsInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentialsInitParameters.
func (in *RepositoryPolicyCheckCredentialsInitParameters) DeepCopy() *RepositoryPolicyCheckCredentialsInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentialsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentialsList) DeepCopyInto(out *RepositoryPolicyCheckCredentialsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyCheckCredentials, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentialsList.
func (in *RepositoryPolicyCheckCredentialsList) DeepCopy() *RepositoryPolicyCheckCredentialsList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentialsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyCheckCredentialsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentialsObservation) DeepCopyInto(out *RepositoryPolicyCheckCredentialsObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentialsObservation.
func (in *RepositoryPolicyCheckCredentialsObservation) DeepCopy() *RepositoryPolicyCheckCredentialsObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentialsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentialsParameters) DeepCopyInto(out *RepositoryPolicyCheckCredentialsParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentialsParameters.
func (in *RepositoryPolicyCheckCredentialsParameters) DeepCopy() *RepositoryPolicyCheckCredentialsParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentialsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentialsSpec) DeepCopyInto(out *RepositoryPolicyCheckCredentialsSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentialsSpec.
func (in *RepositoryPolicyCheckCredentialsSpec) DeepCopy() *RepositoryPolicyCheckCredentialsSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentialsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyCheckCredentialsStatus) DeepCopyInto(out *RepositoryPolicyCheckCredentialsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyCheckCredentialsStatus.
func (in *RepositoryPolicyCheckCredentialsStatus) DeepCopy() *RepositoryPolicyCheckCredentialsStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyCheckCredentialsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPattern) DeepCopyInto(out *RepositoryPolicyFilePathPattern) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPattern.
func (in *RepositoryPolicyFilePathPattern) DeepCopy() *RepositoryPolicyFilePathPattern {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPattern)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyFilePathPattern) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPatternInitParameters) DeepCopyInto(out *RepositoryPolicyFilePathPatternInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FilepathPatterns != nil {
		in, out := &in.FilepathPatterns, &out.FilepathPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPatternInitParameters.
func (in *RepositoryPolicyFilePathPatternInitParameters) DeepCopy() *RepositoryPolicyFilePathPatternInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPatternInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPatternList) DeepCopyInto(out *RepositoryPolicyFilePathPatternList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyFilePathPattern, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPatternList.
func (in *RepositoryPolicyFilePathPatternList) DeepCopy() *RepositoryPolicyFilePathPatternList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPatternList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyFilePathPatternList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPatternObservation) DeepCopyInto(out *RepositoryPolicyFilePathPatternObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FilepathPatterns != nil {
		in, out := &in.FilepathPatterns, &out.FilepathPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPatternObservation.
func (in *RepositoryPolicyFilePathPatternObservation) DeepCopy() *RepositoryPolicyFilePathPatternObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPatternObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPatternParameters) DeepCopyInto(out *RepositoryPolicyFilePathPatternParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FilepathPatterns != nil {
		in, out := &in.FilepathPatterns, &out.FilepathPatterns
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPatternParameters.
func (in *RepositoryPolicyFilePathPatternParameters) DeepCopy() *RepositoryPolicyFilePathPatternParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPatternParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPatternSpec) DeepCopyInto(out *RepositoryPolicyFilePathPatternSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPatternSpec.
func (in *RepositoryPolicyFilePathPatternSpec) DeepCopy() *RepositoryPolicyFilePathPatternSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPatternSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyFilePathPatternStatus) DeepCopyInto(out *RepositoryPolicyFilePathPatternStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyFilePathPatternStatus.
func (in *RepositoryPolicyFilePathPatternStatus) DeepCopy() *RepositoryPolicyFilePathPatternStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyFilePathPatternStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSize) DeepCopyInto(out *RepositoryPolicyMaxFileSize) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSize.
func (in *RepositoryPolicyMaxFileSize) DeepCopy() *RepositoryPolicyMaxFileSize {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSize)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyMaxFileSize) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSizeInitParameters) DeepCopyInto(out *RepositoryPolicyMaxFileSizeInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSizeInitParameters.
func (in *RepositoryPolicyMaxFileSizeInitParameters) DeepCopy() *RepositoryPolicyMaxFileSizeInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSizeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSizeList) DeepCopyInto(out *RepositoryPolicyMaxFileSizeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyMaxFileSize, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSizeList.
func (in *RepositoryPolicyMaxFileSizeList) DeepCopy() *RepositoryPolicyMaxFileSizeList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSizeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyMaxFileSizeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSizeObservation) DeepCopyInto(out *RepositoryPolicyMaxFileSizeObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSizeObservation.
func (in *RepositoryPolicyMaxFileSizeObservation) DeepCopy() *RepositoryPolicyMaxFileSizeObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSizeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSizeParameters) DeepCopyInto(out *RepositoryPolicyMaxFileSizeParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxFileSize != nil {
		in, out := &in.MaxFileSize, &out.MaxFileSize
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSizeParameters.
func (in *RepositoryPolicyMaxFileSizeParameters) DeepCopy() *RepositoryPolicyMaxFileSizeParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSizeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSizeSpec) DeepCopyInto(out *RepositoryPolicyMaxFileSizeSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSizeSpec.
func (in *RepositoryPolicyMaxFileSizeSpec) DeepCopy() *RepositoryPolicyMaxFileSizeSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSizeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxFileSizeStatus) DeepCopyInto(out *RepositoryPolicyMaxFileSizeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxFileSizeStatus.
func (in *RepositoryPolicyMaxFileSizeStatus) DeepCopy() *RepositoryPolicyMaxFileSizeStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxFileSizeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLength) DeepCopyInto(out *RepositoryPolicyMaxPathLength) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLength.
func (in *RepositoryPolicyMaxPathLength) DeepCopy() *RepositoryPolicyMaxPathLength {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLength)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyMaxPathLength) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLengthInitParameters) DeepCopyInto(out *RepositoryPolicyMaxPathLengthInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLengthInitParameters.
func (in *RepositoryPolicyMaxPathLengthInitParameters) DeepCopy() *RepositoryPolicyMaxPathLengthInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLengthInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLengthList) DeepCopyInto(out *RepositoryPolicyMaxPathLengthList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyMaxPathLength, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLengthList.
func (in *RepositoryPolicyMaxPathLengthList) DeepCopy() *RepositoryPolicyMaxPathLengthList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLengthList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyMaxPathLengthList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLengthObservation) DeepCopyInto(out *RepositoryPolicyMaxPathLengthObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLengthObservation.
func (in *RepositoryPolicyMaxPathLengthObservation) DeepCopy() *RepositoryPolicyMaxPathLengthObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLengthObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLengthParameters) DeepCopyInto(out *RepositoryPolicyMaxPathLengthParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MaxPathLength != nil {
		in, out := &in.MaxPathLength, &out.MaxPathLength
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLengthParameters.
func (in *RepositoryPolicyMaxPathLengthParameters) DeepCopy() *RepositoryPolicyMaxPathLengthParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLengthParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLengthSpec) DeepCopyInto(out *RepositoryPolicyMaxPathLengthSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLengthSpec.
func (in *RepositoryPolicyMaxPathLengthSpec) DeepCopy() *RepositoryPolicyMaxPathLengthSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLengthSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyMaxPathLengthStatus) DeepCopyInto(out *RepositoryPolicyMaxPathLengthStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyMaxPathLengthStatus.
func (in *RepositoryPolicyMaxPathLengthStatus) DeepCopy() *RepositoryPolicyMaxPathLengthStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyMaxPathLengthStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNames) DeepCopyInto(out *RepositoryPolicyReservedNames) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNames.
func (in *RepositoryPolicyReservedNames) DeepCopy() *RepositoryPolicyReservedNames {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNames)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyReservedNames) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNamesInitParameters) DeepCopyInto(out *RepositoryPolicyReservedNamesInitParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNamesInitParameters.
func (in *RepositoryPolicyReservedNamesInitParameters) DeepCopy() *RepositoryPolicyReservedNamesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNamesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNamesList) DeepCopyInto(out *RepositoryPolicyReservedNamesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryPolicyReservedNames, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNamesList.
func (in *RepositoryPolicyReservedNamesList) DeepCopy() *RepositoryPolicyReservedNamesList {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNamesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryPolicyReservedNamesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNamesObservation) DeepCopyInto(out *RepositoryPolicyReservedNamesObservation) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNamesObservation.
func (in *RepositoryPolicyReservedNamesObservation) DeepCopy() *RepositoryPolicyReservedNamesObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNamesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNamesParameters) DeepCopyInto(out *RepositoryPolicyReservedNamesParameters) {
	*out = *in
	if in.Blocking != nil {
		in, out := &in.Blocking, &out.Blocking
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIds != nil {
		in, out := &in.RepositoryIds, &out.RepositoryIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RepositoryIdsRefs != nil {
		in, out := &in.RepositoryIdsRefs, &out.RepositoryIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositoryIdsSelector != nil {
		in, out := &in.RepositoryIdsSelector, &out.RepositoryIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNamesParameters.
func (in *RepositoryPolicyReservedNamesParameters) DeepCopy() *RepositoryPolicyReservedNamesParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNamesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNamesSpec) DeepCopyInto(out *RepositoryPolicyReservedNamesSpec) {
	*out = *in
	in.ManagedResourceSpec.DeepCopyInto(&out.ManagedResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNamesSpec.
func (in *RepositoryPolicyReservedNamesSpec) DeepCopy() *RepositoryPolicyReservedNamesSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNamesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPolicyReservedNamesStatus) DeepCopyInto(out *RepositoryPolicyReservedNamesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPolicyReservedNamesStatus.
func (in *RepositoryPolicyReservedNamesStatus) DeepCopy() *RepositoryPolicyReservedNamesStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryPolicyReservedNamesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredTemplateInitParameters) DeepCopyInto(out *RequiredTemplateInitParameters) {
	*out = *in
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryType != nil {
		in, out := &in.RepositoryType, &out.RepositoryType
		*out = new(string)
		**out = **in
	}
	if in.TemplatePath != nil {
		in, out := &in.TemplatePath, &out.TemplatePath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredTemplateInitParameters.
func (in *RequiredTemplateInitParameters) DeepCopy() *RequiredTemplateInitParameters {
	if in == nil {
		return nil
	}
	out := new(RequiredTemplateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredTemplateObservation) DeepCopyInto(out *RequiredTemplateObservation) {
	*out = *in
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryType != nil {
		in, out := &in.RepositoryType, &out.RepositoryType
		*out = new(string)
		**out = **in
	}
	if in.TemplatePath != nil {
		in, out := &in.TemplatePath, &out.TemplatePath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredTemplateObservation.
func (in *RequiredTemplateObservation) DeepCopy() *RequiredTemplateObservation {
	if in == nil {
		return nil
	}
	out := new(RequiredTemplateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredTemplateParameters) DeepCopyInto(out *RequiredTemplateParameters) {
	*out = *in
	if in.RepositoryName != nil {
		in, out := &in.RepositoryName, &out.RepositoryName
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryType != nil {
		in, out := &in.RepositoryType, &out.RepositoryType
		*out = new(string)
		**out = **in
	}
	if in.TemplatePath != nil {
		in, out := &in.TemplatePath, &out.TemplatePath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredTemplateParameters.
func (in *RequiredTemplateParameters) DeepCopy() *RequiredTemplateParameters {
	if in == nil {
		return nil
	}
	out := new(RequiredTemplateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScopeInitParameters) DeepCopyInto(out *ScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScopeInitParameters.
func (in *ScopeInitParameters) DeepCopy() *ScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScopeObservation) DeepCopyInto(out *ScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScopeObservation.
func (in *ScopeObservation) DeepCopy() *ScopeObservation {
	if in == nil {
		return nil
	}
	out := new(ScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScopeParameters) DeepCopyInto(out *ScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScopeParameters.
func (in *ScopeParameters) DeepCopy() *ScopeParameters {
	if in == nil {
		return nil
	}
	out := new(ScopeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsInitParameters) DeepCopyInto(out *SettingsInitParameters) {
	*out = *in
	if in.AutoReviewerIds != nil {
		in, out := &in.AutoReviewerIds, &out.AutoReviewerIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoReviewerIdsRefs != nil {
		in, out := &in.AutoReviewerIdsRefs, &out.AutoReviewerIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoReviewerIdsSelector != nil {
		in, out := &in.AutoReviewerIdsSelector, &out.AutoReviewerIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MinimumNumberOfReviewers != nil {
		in, out := &in.MinimumNumberOfReviewers, &out.MinimumNumberOfReviewers
		*out = new(float64)
		**out = **in
	}
	if in.PathFilters != nil {
		in, out := &in.PathFilters, &out.PathFilters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]ScopeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmitterCanVote != nil {
		in, out := &in.SubmitterCanVote, &out.SubmitterCanVote
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsInitParameters.
func (in *SettingsInitParameters) DeepCopy() *SettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsObservation) DeepCopyInto(out *SettingsObservation) {
	*out = *in
	if in.AutoReviewerIds != nil {
		in, out := &in.AutoReviewerIds, &out.AutoReviewerIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MinimumNumberOfReviewers != nil {
		in, out := &in.MinimumNumberOfReviewers, &out.MinimumNumberOfReviewers
		*out = new(float64)
		**out = **in
	}
	if in.PathFilters != nil {
		in, out := &in.PathFilters, &out.PathFilters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]ScopeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmitterCanVote != nil {
		in, out := &in.SubmitterCanVote, &out.SubmitterCanVote
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsObservation.
func (in *SettingsObservation) DeepCopy() *SettingsObservation {
	if in == nil {
		return nil
	}
	out := new(SettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsParameters) DeepCopyInto(out *SettingsParameters) {
	*out = *in
	if in.AutoReviewerIds != nil {
		in, out := &in.AutoReviewerIds, &out.AutoReviewerIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AutoReviewerIdsRefs != nil {
		in, out := &in.AutoReviewerIdsRefs, &out.AutoReviewerIdsRefs
		*out = make([]v1.NamespacedReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoReviewerIdsSelector != nil {
		in, out := &in.AutoReviewerIdsSelector, &out.AutoReviewerIdsSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.MinimumNumberOfReviewers != nil {
		in, out := &in.MinimumNumberOfReviewers, &out.MinimumNumberOfReviewers
		*out = new(float64)
		**out = **in
	}
	if in.PathFilters != nil {
		in, out := &in.PathFilters, &out.PathFilters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		*out = make([]ScopeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubmitterCanVote != nil {
		in, out := &in.SubmitterCanVote, &out.SubmitterCanVote
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsParameters.
func (in *SettingsParameters) DeepCopy() *SettingsParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsScopeInitParameters) DeepCopyInto(out *SettingsScopeInitParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsScopeInitParameters.
func (in *SettingsScopeInitParameters) DeepCopy() *SettingsScopeInitParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsScopeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsScopeObservation) DeepCopyInto(out *SettingsScopeObservation) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsScopeObservation.
func (in *SettingsScopeObservation) DeepCopy() *SettingsScopeObservation {
	if in == nil {
		return nil
	}
	out := new(SettingsScopeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsScopeParameters) DeepCopyInto(out *SettingsScopeParameters) {
	*out = *in
	if in.MatchType != nil {
		in, out := &in.MatchType, &out.MatchType
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRef != nil {
		in, out := &in.RepositoryRef, &out.RepositoryRef
		*out = new(string)
		**out = **in
	}
	if in.RepositoryRefRef != nil {
		in, out := &in.RepositoryRefRef, &out.RepositoryRefRef
		*out = new(v1.NamespacedReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryRefSelector != nil {
		in, out := &in.RepositoryRefSelector, &out.RepositoryRefSelector
		*out = new(v1.NamespacedSelector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsScopeParameters.
func (in *SettingsScopeParameters) DeepCopy() *SettingsScopeParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsScopeParameters)
	in.DeepCopyInto(out)
	return out
}
