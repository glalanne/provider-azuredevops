// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type RepositoryPolicyCaseEnforcementInitParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
	EnforceConsistentCase *bool `json:"enforceConsistentCase,omitempty" tf:"enforce_consistent_case,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryIds []*string `json:"repositoryIds,omitempty" tf:"repository_ids,omitempty"`

	// References to GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsRefs []v1.NamespacedReference `json:"repositoryIdsRefs,omitempty" tf:"-"`

	// Selector for a list of GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsSelector *v1.NamespacedSelector `json:"repositoryIdsSelector,omitempty" tf:"-"`
}

type RepositoryPolicyCaseEnforcementObservation struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
	EnforceConsistentCase *bool `json:"enforceConsistentCase,omitempty" tf:"enforce_consistent_case,omitempty"`

	// The ID of the repository policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project in which the policy will be created.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
	RepositoryIds []*string `json:"repositoryIds,omitempty" tf:"repository_ids,omitempty"`
}

type RepositoryPolicyCaseEnforcementParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	// +kubebuilder:validation:Optional
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
	// +kubebuilder:validation:Optional
	EnforceConsistentCase *bool `json:"enforceConsistentCase,omitempty" tf:"enforce_consistent_case,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryIds []*string `json:"repositoryIds,omitempty" tf:"repository_ids,omitempty"`

	// References to GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsRefs []v1.NamespacedReference `json:"repositoryIdsRefs,omitempty" tf:"-"`

	// Selector for a list of GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsSelector *v1.NamespacedSelector `json:"repositoryIdsSelector,omitempty" tf:"-"`
}

// RepositoryPolicyCaseEnforcementSpec defines the desired state of RepositoryPolicyCaseEnforcement
type RepositoryPolicyCaseEnforcementSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            RepositoryPolicyCaseEnforcementParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryPolicyCaseEnforcementInitParameters `json:"initProvider,omitempty"`
}

// RepositoryPolicyCaseEnforcementStatus defines the observed state of RepositoryPolicyCaseEnforcement.
type RepositoryPolicyCaseEnforcementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryPolicyCaseEnforcementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryPolicyCaseEnforcement is the Schema for the RepositoryPolicyCaseEnforcements API. Manages a case enforcement repository policy within Azure DevOps project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type RepositoryPolicyCaseEnforcement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enforceConsistentCase) || (has(self.initProvider) && has(self.initProvider.enforceConsistentCase))",message="spec.forProvider.enforceConsistentCase is a required parameter"
	Spec   RepositoryPolicyCaseEnforcementSpec   `json:"spec"`
	Status RepositoryPolicyCaseEnforcementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryPolicyCaseEnforcementList contains a list of RepositoryPolicyCaseEnforcements
type RepositoryPolicyCaseEnforcementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryPolicyCaseEnforcement `json:"items"`
}

// Repository type metadata.
var (
	RepositoryPolicyCaseEnforcement_Kind             = "RepositoryPolicyCaseEnforcement"
	RepositoryPolicyCaseEnforcement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryPolicyCaseEnforcement_Kind}.String()
	RepositoryPolicyCaseEnforcement_KindAPIVersion   = RepositoryPolicyCaseEnforcement_Kind + "." + CRDGroupVersion.String()
	RepositoryPolicyCaseEnforcement_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryPolicyCaseEnforcement_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryPolicyCaseEnforcement{}, &RepositoryPolicyCaseEnforcementList{})
}
