// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GitRepositoryInitParameters struct {

	// The ref of the default branch. Will be used as the branch name for initialized repositories.
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// The ability to disable or enable the repository. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// A initialization block as documented below.
	Initialization *InitializationInitParameters `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// The name of the git repository.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of a Git project from which a fork is to be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ParentRepositoryID *string `json:"parentRepositoryId,omitempty" tf:"parent_repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate parentRepositoryId.
	// +kubebuilder:validation:Optional
	ParentRepositoryIDRef *v1.NamespacedReference `json:"parentRepositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate parentRepositoryId.
	// +kubebuilder:validation:Optional
	ParentRepositoryIDSelector *v1.NamespacedSelector `json:"parentRepositoryIdSelector,omitempty" tf:"-"`

	// The project ID or project name.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`
}

type GitRepositoryObservation struct {

	// The ref of the default branch. Will be used as the branch name for initialized repositories.
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// The ability to disable or enable the repository. Defaults to false.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// The ID of the Git repository.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A initialization block as documented below.
	Initialization *InitializationObservation `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// True if the repository was created as a fork.
	IsFork *bool `json:"isFork,omitempty" tf:"is_fork,omitempty"`

	// The name of the git repository.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of a Git project from which a fork is to be created.
	ParentRepositoryID *string `json:"parentRepositoryId,omitempty" tf:"parent_repository_id,omitempty"`

	// The project ID or project name.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Git HTTPS URL of the repository
	RemoteURL *string `json:"remoteUrl,omitempty" tf:"remote_url,omitempty"`

	// Git SSH URL of the repository.
	SSHURL *string `json:"sshUrl,omitempty" tf:"ssh_url,omitempty"`

	// Size in bytes.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// REST API URL of the repository.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Web link to the repository.
	WebURL *string `json:"webUrl,omitempty" tf:"web_url,omitempty"`
}

type GitRepositoryParameters struct {

	// The ref of the default branch. Will be used as the branch name for initialized repositories.
	// +kubebuilder:validation:Optional
	DefaultBranch *string `json:"defaultBranch,omitempty" tf:"default_branch,omitempty"`

	// The ability to disable or enable the repository. Defaults to false.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// A initialization block as documented below.
	// +kubebuilder:validation:Optional
	Initialization *InitializationParameters `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// The name of the git repository.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of a Git project from which a fork is to be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ParentRepositoryID *string `json:"parentRepositoryId,omitempty" tf:"parent_repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate parentRepositoryId.
	// +kubebuilder:validation:Optional
	ParentRepositoryIDRef *v1.NamespacedReference `json:"parentRepositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate parentRepositoryId.
	// +kubebuilder:validation:Optional
	ParentRepositoryIDSelector *v1.NamespacedSelector `json:"parentRepositoryIdSelector,omitempty" tf:"-"`

	// The project ID or project name.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`
}

type InitializationInitParameters struct {

	// The type of repository to create. Valid values: Uninitialized, Clean or Import.
	InitType *string `json:"initType,omitempty" tf:"init_type,omitempty"`

	// only attribute, which allows ephemeral resources to be used.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with username and password.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/serviceendpoint/v1alpha1.ServiceendpointGenericGit
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ServiceConnectionID *string `json:"serviceConnectionId,omitempty" tf:"service_connection_id,omitempty"`

	// Reference to a ServiceendpointGenericGit in serviceendpoint to populate serviceConnectionId.
	// +kubebuilder:validation:Optional
	ServiceConnectionIDRef *v1.NamespacedReference `json:"serviceConnectionIdRef,omitempty" tf:"-"`

	// Selector for a ServiceendpointGenericGit in serviceendpoint to populate serviceConnectionId.
	// +kubebuilder:validation:Optional
	ServiceConnectionIDSelector *v1.NamespacedSelector `json:"serviceConnectionIdSelector,omitempty" tf:"-"`

	// Type of the source repository. Used if the init_type is Import. Valid values: Git.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// The URL of the source repository. Used if the init_type is Import.
	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`

	// The username used to authenticate to a private repository for import initialization. Conflicts with service_connection_id.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InitializationObservation struct {

	// The type of repository to create. Valid values: Uninitialized, Clean or Import.
	InitType *string `json:"initType,omitempty" tf:"init_type,omitempty"`

	// only attribute, which allows ephemeral resources to be used.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with username and password.
	ServiceConnectionID *string `json:"serviceConnectionId,omitempty" tf:"service_connection_id,omitempty"`

	// Type of the source repository. Used if the init_type is Import. Valid values: Git.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// The URL of the source repository. Used if the init_type is Import.
	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`

	// The username used to authenticate to a private repository for import initialization. Conflicts with service_connection_id.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type InitializationParameters struct {

	// The type of repository to create. Valid values: Uninitialized, Clean or Import.
	// +kubebuilder:validation:Optional
	InitType *string `json:"initType" tf:"init_type,omitempty"`

	// only attribute, which allows ephemeral resources to be used.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with username and password.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/serviceendpoint/v1alpha1.ServiceendpointGenericGit
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ServiceConnectionID *string `json:"serviceConnectionId,omitempty" tf:"service_connection_id,omitempty"`

	// Reference to a ServiceendpointGenericGit in serviceendpoint to populate serviceConnectionId.
	// +kubebuilder:validation:Optional
	ServiceConnectionIDRef *v1.NamespacedReference `json:"serviceConnectionIdRef,omitempty" tf:"-"`

	// Selector for a ServiceendpointGenericGit in serviceendpoint to populate serviceConnectionId.
	// +kubebuilder:validation:Optional
	ServiceConnectionIDSelector *v1.NamespacedSelector `json:"serviceConnectionIdSelector,omitempty" tf:"-"`

	// Type of the source repository. Used if the init_type is Import. Valid values: Git.
	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// The URL of the source repository. Used if the init_type is Import.
	// +kubebuilder:validation:Optional
	SourceURL *string `json:"sourceUrl,omitempty" tf:"source_url,omitempty"`

	// The username used to authenticate to a private repository for import initialization. Conflicts with service_connection_id.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// GitRepositorySpec defines the desired state of GitRepository
type GitRepositorySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GitRepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GitRepositoryInitParameters `json:"initProvider,omitempty"`
}

// GitRepositoryStatus defines the observed state of GitRepository.
type GitRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GitRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GitRepository is the Schema for the GitRepositorys API. Manages a git repository within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type GitRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.initialization) || (has(self.initProvider) && has(self.initProvider.initialization))",message="spec.forProvider.initialization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   GitRepositorySpec   `json:"spec"`
	Status GitRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitRepositoryList contains a list of GitRepositorys
type GitRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitRepository `json:"items"`
}

// Repository type metadata.
var (
	GitRepository_Kind             = "GitRepository"
	GitRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GitRepository_Kind}.String()
	GitRepository_KindAPIVersion   = GitRepository_Kind + "." + CRDGroupVersion.String()
	GitRepository_GroupVersionKind = CRDGroupVersion.WithKind(GitRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&GitRepository{}, &GitRepositoryList{})
}
