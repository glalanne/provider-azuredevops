// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type RepositoryPolicyMaxFileSizeInitParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Block pushes that contain new or updated files larger than this limit. Possible values are: 1, 2, 5, 10, 50, 100, 200 (MB).
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryIds []*string `json:"repositoryIds,omitempty" tf:"repository_ids,omitempty"`

	// References to GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsRefs []v1.NamespacedReference `json:"repositoryIdsRefs,omitempty" tf:"-"`

	// Selector for a list of GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsSelector *v1.NamespacedSelector `json:"repositoryIdsSelector,omitempty" tf:"-"`
}

type RepositoryPolicyMaxFileSizeObservation struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the repository policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Block pushes that contain new or updated files larger than this limit. Possible values are: 1, 2, 5, 10, 50, 100, 200 (MB).
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// The ID of the project in which the policy will be created.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
	RepositoryIds []*string `json:"repositoryIds,omitempty" tf:"repository_ids,omitempty"`
}

type RepositoryPolicyMaxFileSizeParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	// +kubebuilder:validation:Optional
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Block pushes that contain new or updated files larger than this limit. Possible values are: 1, 2, 5, 10, 50, 100, 200 (MB).
	// +kubebuilder:validation:Optional
	MaxFileSize *float64 `json:"maxFileSize,omitempty" tf:"max_file_size,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryIds []*string `json:"repositoryIds,omitempty" tf:"repository_ids,omitempty"`

	// References to GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsRefs []v1.NamespacedReference `json:"repositoryIdsRefs,omitempty" tf:"-"`

	// Selector for a list of GitRepository in repos to populate repositoryIds.
	// +kubebuilder:validation:Optional
	RepositoryIdsSelector *v1.NamespacedSelector `json:"repositoryIdsSelector,omitempty" tf:"-"`
}

// RepositoryPolicyMaxFileSizeSpec defines the desired state of RepositoryPolicyMaxFileSize
type RepositoryPolicyMaxFileSizeSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            RepositoryPolicyMaxFileSizeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryPolicyMaxFileSizeInitParameters `json:"initProvider,omitempty"`
}

// RepositoryPolicyMaxFileSizeStatus defines the observed state of RepositoryPolicyMaxFileSize.
type RepositoryPolicyMaxFileSizeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryPolicyMaxFileSizeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RepositoryPolicyMaxFileSize is the Schema for the RepositoryPolicyMaxFileSizes API. Manages a max file size repository policy within Azure DevOps project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type RepositoryPolicyMaxFileSize struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxFileSize) || (has(self.initProvider) && has(self.initProvider.maxFileSize))",message="spec.forProvider.maxFileSize is a required parameter"
	Spec   RepositoryPolicyMaxFileSizeSpec   `json:"spec"`
	Status RepositoryPolicyMaxFileSizeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryPolicyMaxFileSizeList contains a list of RepositoryPolicyMaxFileSizes
type RepositoryPolicyMaxFileSizeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryPolicyMaxFileSize `json:"items"`
}

// Repository type metadata.
var (
	RepositoryPolicyMaxFileSize_Kind             = "RepositoryPolicyMaxFileSize"
	RepositoryPolicyMaxFileSize_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryPolicyMaxFileSize_Kind}.String()
	RepositoryPolicyMaxFileSize_KindAPIVersion   = RepositoryPolicyMaxFileSize_Kind + "." + CRDGroupVersion.String()
	RepositoryPolicyMaxFileSize_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryPolicyMaxFileSize_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryPolicyMaxFileSize{}, &RepositoryPolicyMaxFileSizeList{})
}
