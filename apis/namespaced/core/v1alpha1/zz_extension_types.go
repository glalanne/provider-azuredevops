// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ExtensionInitParameters struct {

	// Whether to disable the extension.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// The publisher ID of the extension.
	ExtensionID *string `json:"extensionId,omitempty" tf:"extension_id,omitempty"`

	// The extension ID of the extension.
	PublisherID *string `json:"publisherId,omitempty" tf:"publisher_id,omitempty"`

	// The version of the extension.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExtensionObservation struct {

	// Whether to disable the extension.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// The publisher ID of the extension.
	ExtensionID *string `json:"extensionId,omitempty" tf:"extension_id,omitempty"`

	// The name of the extension.
	ExtensionName *string `json:"extensionName,omitempty" tf:"extension_name,omitempty"`

	// The ID of the Extension.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The extension ID of the extension.
	PublisherID *string `json:"publisherId,omitempty" tf:"publisher_id,omitempty"`

	// The name of the publisher.
	PublisherName *string `json:"publisherName,omitempty" tf:"publisher_name,omitempty"`

	// List of all oauth scopes required by this extension.
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The version of the extension.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExtensionParameters struct {

	// Whether to disable the extension.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// The publisher ID of the extension.
	// +kubebuilder:validation:Optional
	ExtensionID *string `json:"extensionId,omitempty" tf:"extension_id,omitempty"`

	// The extension ID of the extension.
	// +kubebuilder:validation:Optional
	PublisherID *string `json:"publisherId,omitempty" tf:"publisher_id,omitempty"`

	// The version of the extension.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// ExtensionSpec defines the desired state of Extension
type ExtensionSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ExtensionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExtensionInitParameters `json:"initProvider,omitempty"`
}

// ExtensionStatus defines the observed state of Extension.
type ExtensionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExtensionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Extension is the Schema for the Extensions API. Manages Extension within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type Extension struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.extensionId) || (has(self.initProvider) && has(self.initProvider.extensionId))",message="spec.forProvider.extensionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publisherId) || (has(self.initProvider) && has(self.initProvider.publisherId))",message="spec.forProvider.publisherId is a required parameter"
	Spec   ExtensionSpec   `json:"spec"`
	Status ExtensionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExtensionList contains a list of Extensions
type ExtensionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Extension `json:"items"`
}

// Repository type metadata.
var (
	Extension_Kind             = "Extension"
	Extension_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Extension_Kind}.String()
	Extension_KindAPIVersion   = Extension_Kind + "." + CRDGroupVersion.String()
	Extension_GroupVersionKind = CRDGroupVersion.WithKind(Extension_Kind)
)

func init() {
	SchemeBuilder.Register(&Extension{}, &ExtensionList{})
}
