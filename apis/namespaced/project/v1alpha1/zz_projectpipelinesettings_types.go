// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ProjectPipelineSettingsInitParameters struct {

	// Limit job authorization scope to current project for non-release pipelines.
	// Limit job authorization scope to current project for non-release pipelines
	EnforceJobScope *bool `json:"enforceJobScope,omitempty" tf:"enforce_job_scope,omitempty"`

	// Limit job authorization scope to current project for release pipelines.
	EnforceJobScopeForRelease *bool `json:"enforceJobScopeForRelease,omitempty" tf:"enforce_job_scope_for_release,omitempty"`

	// Protect access to repositories in YAML pipelines.
	// Protect access to repositories in YAML pipelines
	EnforceReferencedRepoScopedToken *bool `json:"enforceReferencedRepoScopedToken,omitempty" tf:"enforce_referenced_repo_scoped_token,omitempty"`

	// Limit variables that can be set at queue time.
	// Limit variables that can be set at queue time
	EnforceSettableVar *bool `json:"enforceSettableVar,omitempty" tf:"enforce_settable_var,omitempty"`

	// The ID of the project for which the project pipeline settings will be managed.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Publish metadata from pipelines.
	// Publish metadata from pipelines
	PublishPipelineMetadata *bool `json:"publishPipelineMetadata,omitempty" tf:"publish_pipeline_metadata,omitempty"`

	// Disable anonymous access to badges.
	// Disable anonymous access to badges
	StatusBadgesArePrivate *bool `json:"statusBadgesArePrivate,omitempty" tf:"status_badges_are_private,omitempty"`
}

type ProjectPipelineSettingsObservation struct {

	// Limit job authorization scope to current project for non-release pipelines.
	// Limit job authorization scope to current project for non-release pipelines
	EnforceJobScope *bool `json:"enforceJobScope,omitempty" tf:"enforce_job_scope,omitempty"`

	// Limit job authorization scope to current project for release pipelines.
	EnforceJobScopeForRelease *bool `json:"enforceJobScopeForRelease,omitempty" tf:"enforce_job_scope_for_release,omitempty"`

	// Protect access to repositories in YAML pipelines.
	// Protect access to repositories in YAML pipelines
	EnforceReferencedRepoScopedToken *bool `json:"enforceReferencedRepoScopedToken,omitempty" tf:"enforce_referenced_repo_scoped_token,omitempty"`

	// Limit variables that can be set at queue time.
	// Limit variables that can be set at queue time
	EnforceSettableVar *bool `json:"enforceSettableVar,omitempty" tf:"enforce_settable_var,omitempty"`

	// The ID of the project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project for which the project pipeline settings will be managed.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Publish metadata from pipelines.
	// Publish metadata from pipelines
	PublishPipelineMetadata *bool `json:"publishPipelineMetadata,omitempty" tf:"publish_pipeline_metadata,omitempty"`

	// Disable anonymous access to badges.
	// Disable anonymous access to badges
	StatusBadgesArePrivate *bool `json:"statusBadgesArePrivate,omitempty" tf:"status_badges_are_private,omitempty"`
}

type ProjectPipelineSettingsParameters struct {

	// Limit job authorization scope to current project for non-release pipelines.
	// Limit job authorization scope to current project for non-release pipelines
	// +kubebuilder:validation:Optional
	EnforceJobScope *bool `json:"enforceJobScope,omitempty" tf:"enforce_job_scope,omitempty"`

	// Limit job authorization scope to current project for release pipelines.
	// +kubebuilder:validation:Optional
	EnforceJobScopeForRelease *bool `json:"enforceJobScopeForRelease,omitempty" tf:"enforce_job_scope_for_release,omitempty"`

	// Protect access to repositories in YAML pipelines.
	// Protect access to repositories in YAML pipelines
	// +kubebuilder:validation:Optional
	EnforceReferencedRepoScopedToken *bool `json:"enforceReferencedRepoScopedToken,omitempty" tf:"enforce_referenced_repo_scoped_token,omitempty"`

	// Limit variables that can be set at queue time.
	// Limit variables that can be set at queue time
	// +kubebuilder:validation:Optional
	EnforceSettableVar *bool `json:"enforceSettableVar,omitempty" tf:"enforce_settable_var,omitempty"`

	// The ID of the project for which the project pipeline settings will be managed.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Publish metadata from pipelines.
	// Publish metadata from pipelines
	// +kubebuilder:validation:Optional
	PublishPipelineMetadata *bool `json:"publishPipelineMetadata,omitempty" tf:"publish_pipeline_metadata,omitempty"`

	// Disable anonymous access to badges.
	// Disable anonymous access to badges
	// +kubebuilder:validation:Optional
	StatusBadgesArePrivate *bool `json:"statusBadgesArePrivate,omitempty" tf:"status_badges_are_private,omitempty"`
}

// ProjectPipelineSettingsSpec defines the desired state of ProjectPipelineSettings
type ProjectPipelineSettingsSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ProjectPipelineSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectPipelineSettingsInitParameters `json:"initProvider,omitempty"`
}

// ProjectPipelineSettingsStatus defines the observed state of ProjectPipelineSettings.
type ProjectPipelineSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectPipelineSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectPipelineSettings is the Schema for the ProjectPipelineSettingss API. Manages Pipeline Settings for Azure DevOps projects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type ProjectPipelineSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectPipelineSettingsSpec   `json:"spec"`
	Status            ProjectPipelineSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectPipelineSettingsList contains a list of ProjectPipelineSettingss
type ProjectPipelineSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectPipelineSettings `json:"items"`
}

// Repository type metadata.
var (
	ProjectPipelineSettings_Kind             = "ProjectPipelineSettings"
	ProjectPipelineSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectPipelineSettings_Kind}.String()
	ProjectPipelineSettings_KindAPIVersion   = ProjectPipelineSettings_Kind + "." + CRDGroupVersion.String()
	ProjectPipelineSettings_GroupVersionKind = CRDGroupVersion.WithKind(ProjectPipelineSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectPipelineSettings{}, &ProjectPipelineSettingsList{})
}
