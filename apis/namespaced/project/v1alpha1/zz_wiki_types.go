// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type WikiInitParameters struct {

	// Folder path inside repository which is shown as Wiki.
	MappedPath *string `json:"mappedPath,omitempty" tf:"mapped_path,omitempty"`

	// The name of the Wiki.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// The ID of the repository.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.NamespacedReference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.NamespacedSelector `json:"repositoryIdSelector,omitempty" tf:"-"`

	// The type of the wiki. Possible values are codeWiki, projectWiki.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Version of the wiki.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type WikiObservation struct {

	// The ID of the wiki returned after creation in Azure DevOps.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Folder path inside repository which is shown as Wiki.
	MappedPath *string `json:"mappedPath,omitempty" tf:"mapped_path,omitempty"`

	// The name of the Wiki.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The remote web url to the wiki.
	RemoteURL *string `json:"remoteUrl,omitempty" tf:"remote_url,omitempty"`

	// The ID of the repository.
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// The type of the wiki. Possible values are codeWiki, projectWiki.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The REST url for this wiki.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Version of the wiki.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type WikiParameters struct {

	// Folder path inside repository which is shown as Wiki.
	// +kubebuilder:validation:Optional
	MappedPath *string `json:"mappedPath,omitempty" tf:"mapped_path,omitempty"`

	// The name of the Wiki.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// The ID of the repository.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.NamespacedReference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.NamespacedSelector `json:"repositoryIdSelector,omitempty" tf:"-"`

	// The type of the wiki. Possible values are codeWiki, projectWiki.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Version of the wiki.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// WikiSpec defines the desired state of Wiki
type WikiSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            WikiParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WikiInitParameters `json:"initProvider,omitempty"`
}

// WikiStatus defines the observed state of Wiki.
type WikiStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WikiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Wiki is the Schema for the Wikis API. Manages Wikis within Azure DevOps project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type Wiki struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   WikiSpec   `json:"spec"`
	Status WikiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WikiList contains a list of Wikis
type WikiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Wiki `json:"items"`
}

// Repository type metadata.
var (
	Wiki_Kind             = "Wiki"
	Wiki_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Wiki_Kind}.String()
	Wiki_KindAPIVersion   = Wiki_Kind + "." + CRDGroupVersion.String()
	Wiki_GroupVersionKind = CRDGroupVersion.WithKind(Wiki_Kind)
)

func init() {
	SchemeBuilder.Register(&Wiki{}, &WikiList{})
}
