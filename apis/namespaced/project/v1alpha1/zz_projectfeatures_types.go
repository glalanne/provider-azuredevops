// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ProjectFeaturesInitParameters struct {

	// Defines the status (enabled, disabled) of the project features.  Valid features boards, repositories, pipelines, testplans, artifacts
	// +mapType=granular
	Features map[string]*string `json:"features,omitempty" tf:"features,omitempty"`

	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`
}

type ProjectFeaturesObservation struct {

	// Defines the status (enabled, disabled) of the project features.  Valid features boards, repositories, pipelines, testplans, artifacts
	// +mapType=granular
	Features map[string]*string `json:"features,omitempty" tf:"features,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ProjectFeaturesParameters struct {

	// Defines the status (enabled, disabled) of the project features.  Valid features boards, repositories, pipelines, testplans, artifacts
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Features map[string]*string `json:"features,omitempty" tf:"features,omitempty"`

	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`
}

// ProjectFeaturesSpec defines the desired state of ProjectFeatures
type ProjectFeaturesSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ProjectFeaturesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectFeaturesInitParameters `json:"initProvider,omitempty"`
}

// ProjectFeaturesStatus defines the observed state of ProjectFeatures.
type ProjectFeaturesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectFeaturesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectFeatures is the Schema for the ProjectFeaturess API. Manages features for Azure DevOps projects.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type ProjectFeatures struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.features) || (has(self.initProvider) && has(self.initProvider.features))",message="spec.forProvider.features is a required parameter"
	Spec   ProjectFeaturesSpec   `json:"spec"`
	Status ProjectFeaturesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectFeaturesList contains a list of ProjectFeaturess
type ProjectFeaturesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectFeatures `json:"items"`
}

// Repository type metadata.
var (
	ProjectFeatures_Kind             = "ProjectFeatures"
	ProjectFeatures_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectFeatures_Kind}.String()
	ProjectFeatures_KindAPIVersion   = ProjectFeatures_Kind + "." + CRDGroupVersion.String()
	ProjectFeatures_GroupVersionKind = CRDGroupVersion.WithKind(ProjectFeatures_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectFeatures{}, &ProjectFeaturesList{})
}
