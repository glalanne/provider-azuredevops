// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GroupEntitlementInitParameters struct {

	// Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition, the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.
	AccountLicenseType *string `json:"accountLicenseType,omitempty" tf:"account_license_type,omitempty"`

	// The display name is the name used in Azure DevOps UI. Cannot be set together with origin_id and origin.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The source of the licensing (e.g. Account. MSDN etc.). Possible values are: account, auto, msdn, none, profile, trial. Defaults to account.
	LicensingSource *string `json:"licensingSource,omitempty" tf:"licensing_source,omitempty"`

	// The type of source provider for the origin identifier.
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`
}

type GroupEntitlementObservation struct {

	// Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition, the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.
	AccountLicenseType *string `json:"accountLicenseType,omitempty" tf:"account_license_type,omitempty"`

	// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.
	Descriptor *string `json:"descriptor,omitempty" tf:"descriptor,omitempty"`

	// The display name is the name used in Azure DevOps UI. Cannot be set together with origin_id and origin.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The id of the entitlement.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The source of the licensing (e.g. Account. MSDN etc.). Possible values are: account, auto, msdn, none, profile, trial. Defaults to account.
	LicensingSource *string `json:"licensingSource,omitempty" tf:"licensing_source,omitempty"`

	// The type of source provider for the origin identifier.
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	// The principal name of a graph member on Azure DevOps
	PrincipalName *string `json:"principalName,omitempty" tf:"principal_name,omitempty"`
}

type GroupEntitlementParameters struct {

	// Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition, the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.
	// +kubebuilder:validation:Optional
	AccountLicenseType *string `json:"accountLicenseType,omitempty" tf:"account_license_type,omitempty"`

	// The display name is the name used in Azure DevOps UI. Cannot be set together with origin_id and origin.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The source of the licensing (e.g. Account. MSDN etc.). Possible values are: account, auto, msdn, none, profile, trial. Defaults to account.
	// +kubebuilder:validation:Optional
	LicensingSource *string `json:"licensingSource,omitempty" tf:"licensing_source,omitempty"`

	// The type of source provider for the origin identifier.
	// +kubebuilder:validation:Optional
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
	// +kubebuilder:validation:Optional
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`
}

// GroupEntitlementSpec defines the desired state of GroupEntitlement
type GroupEntitlementSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GroupEntitlementParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupEntitlementInitParameters `json:"initProvider,omitempty"`
}

// GroupEntitlementStatus defines the observed state of GroupEntitlement.
type GroupEntitlementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupEntitlementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupEntitlement is the Schema for the GroupEntitlements API. Manages a group entitlement within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type GroupEntitlement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupEntitlementSpec   `json:"spec"`
	Status            GroupEntitlementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupEntitlementList contains a list of GroupEntitlements
type GroupEntitlementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupEntitlement `json:"items"`
}

// Repository type metadata.
var (
	GroupEntitlement_Kind             = "GroupEntitlement"
	GroupEntitlement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupEntitlement_Kind}.String()
	GroupEntitlement_KindAPIVersion   = GroupEntitlement_Kind + "." + CRDGroupVersion.String()
	GroupEntitlement_GroupVersionKind = CRDGroupVersion.WithKind(GroupEntitlement_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupEntitlement{}, &GroupEntitlementList{})
}
