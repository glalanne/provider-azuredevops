// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GitPermissionsInitParameters struct {

	// The name of the branch to assign the permissions.
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// the permissions to assign. The following permissions are available
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The group principal to assign the permissions.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The ID of the project to assign the permissions.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Replace (true) or merge (false) the permissions. Default: true
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`

	// The ID of the GIT repository to assign the permissions
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.NamespacedReference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.NamespacedSelector `json:"repositoryIdSelector,omitempty" tf:"-"`
}

type GitPermissionsObservation struct {

	// The name of the branch to assign the permissions.
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the permissions to assign. The following permissions are available
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The group principal to assign the permissions.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The ID of the project to assign the permissions.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Replace (true) or merge (false) the permissions. Default: true
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`

	// The ID of the GIT repository to assign the permissions
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`
}

type GitPermissionsParameters struct {

	// The name of the branch to assign the permissions.
	// +kubebuilder:validation:Optional
	BranchName *string `json:"branchName,omitempty" tf:"branch_name,omitempty"`

	// the permissions to assign. The following permissions are available
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The group principal to assign the permissions.
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The ID of the project to assign the permissions.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.NamespacedReference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.NamespacedSelector `json:"projectIdSelector,omitempty" tf:"-"`

	// Replace (true) or merge (false) the permissions. Default: true
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`

	// The ID of the GIT repository to assign the permissions
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.NamespacedReference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.NamespacedSelector `json:"repositoryIdSelector,omitempty" tf:"-"`
}

// GitPermissionsSpec defines the desired state of GitPermissions
type GitPermissionsSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GitPermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GitPermissionsInitParameters `json:"initProvider,omitempty"`
}

// GitPermissionsStatus defines the observed state of GitPermissions.
type GitPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GitPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GitPermissions is the Schema for the GitPermissionss API. Manages permissions for Git repositories
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type GitPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	Spec   GitPermissionsSpec   `json:"spec"`
	Status GitPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitPermissionsList contains a list of GitPermissionss
type GitPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitPermissions `json:"items"`
}

// Repository type metadata.
var (
	GitPermissions_Kind             = "GitPermissions"
	GitPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GitPermissions_Kind}.String()
	GitPermissions_KindAPIVersion   = GitPermissions_Kind + "." + CRDGroupVersion.String()
	GitPermissions_GroupVersionKind = CRDGroupVersion.WithKind(GitPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&GitPermissions{}, &GitPermissionsList{})
}
