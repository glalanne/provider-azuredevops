// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GroupInitParameters struct {

	// The Description of the Project.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of a new Azure DevOps group that is not backed by an external provider. The origin_id and mail arguments cannot be used simultaneously with display_name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The mail address as a reference to an existing group from an external AD or AAD backed provider. The scope, origin_id and display_name arguments cannot be used simultaneously with mail.
	Mail *string `json:"mail,omitempty" tf:"mail,omitempty"`

	// The member of the Group.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The OriginID as a reference to a group from an external AD or AAD backed provider. The scope, mail and display_name arguments cannot be used simultaneously with origin_id.
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	// The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Reference to a Project in project to populate scope.
	// +kubebuilder:validation:Optional
	ScopeRef *v1.NamespacedReference `json:"scopeRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate scope.
	// +kubebuilder:validation:Optional
	ScopeSelector *v1.NamespacedSelector `json:"scopeSelector,omitempty" tf:"-"`
}

type GroupObservation struct {

	// The Description of the Project.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The identity (subject) descriptor of the Group.
	Descriptor *string `json:"descriptor,omitempty" tf:"descriptor,omitempty"`

	// The name of a new Azure DevOps group that is not backed by an external provider. The origin_id and mail arguments cannot be used simultaneously with display_name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// This represents the name of the container of origin for a graph member.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The ID of the Group.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The ID of the Group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mail address as a reference to an existing group from an external AD or AAD backed provider. The scope, origin_id and display_name arguments cannot be used simultaneously with mail.
	Mail *string `json:"mail,omitempty" tf:"mail,omitempty"`

	// The member of the Group.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The type of source provider for the origin identifier (ex:AD, AAD, MSA)
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The OriginID as a reference to a group from an external AD or AAD backed provider. The scope, mail and display_name arguments cannot be used simultaneously with origin_id.
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	// This is the PrincipalName of this graph member from the source provider.
	PrincipalName *string `json:"principalName,omitempty" tf:"principal_name,omitempty"`

	// The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// This field identifies the type of the graph subject (ex: Group, Scope, User).
	SubjectKind *string `json:"subjectKind,omitempty" tf:"subject_kind,omitempty"`

	// This url is the full route to the source resource of this graph subject.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type GroupParameters struct {

	// The Description of the Project.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of a new Azure DevOps group that is not backed by an external provider. The origin_id and mail arguments cannot be used simultaneously with display_name.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The mail address as a reference to an existing group from an external AD or AAD backed provider. The scope, origin_id and display_name arguments cannot be used simultaneously with mail.
	// +kubebuilder:validation:Optional
	Mail *string `json:"mail,omitempty" tf:"mail,omitempty"`

	// The member of the Group.
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The OriginID as a reference to a group from an external AD or AAD backed provider. The scope, mail and display_name arguments cannot be used simultaneously with origin_id.
	// +kubebuilder:validation:Optional
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	// The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Reference to a Project in project to populate scope.
	// +kubebuilder:validation:Optional
	ScopeRef *v1.NamespacedReference `json:"scopeRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate scope.
	// +kubebuilder:validation:Optional
	ScopeSelector *v1.NamespacedSelector `json:"scopeSelector,omitempty" tf:"-"`
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupInitParameters `json:"initProvider,omitempty"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Group is the Schema for the Groups API. Manages a group within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupSpec   `json:"spec"`
	Status            GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
