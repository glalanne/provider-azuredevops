// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GroupMembershipInitParameters struct {

	// The descriptor of the group being managed.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// A list of user or group descriptors that will become members of the group.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/security/v1alpha1.UserEntitlement
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("descriptor",true)
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// References to UserEntitlement in security to populate members.
	// +kubebuilder:validation:Optional
	MembersRefs []v1.NamespacedReference `json:"membersRefs,omitempty" tf:"-"`

	// Selector for a list of UserEntitlement in security to populate members.
	// +kubebuilder:validation:Optional
	MembersSelector *v1.NamespacedSelector `json:"membersSelector,omitempty" tf:"-"`

	// The mode how the resource manages group members.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type GroupMembershipObservation struct {

	// The descriptor of the group being managed.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// A random ID for this resource. There is no "natural" ID, so a random one is assigned.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of user or group descriptors that will become members of the group.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The mode how the resource manages group members.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type GroupMembershipParameters struct {

	// The descriptor of the group being managed.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// A list of user or group descriptors that will become members of the group.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/namespaced/security/v1alpha1.UserEntitlement
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("descriptor",true)
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// References to UserEntitlement in security to populate members.
	// +kubebuilder:validation:Optional
	MembersRefs []v1.NamespacedReference `json:"membersRefs,omitempty" tf:"-"`

	// Selector for a list of UserEntitlement in security to populate members.
	// +kubebuilder:validation:Optional
	MembersSelector *v1.NamespacedSelector `json:"membersSelector,omitempty" tf:"-"`

	// The mode how the resource manages group members.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

// GroupMembershipSpec defines the desired state of GroupMembership
type GroupMembershipSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GroupMembershipParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupMembershipInitParameters `json:"initProvider,omitempty"`
}

// GroupMembershipStatus defines the observed state of GroupMembership.
type GroupMembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupMembership is the Schema for the GroupMemberships API. Manages group membership within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuredevops}
type GroupMembership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	Spec   GroupMembershipSpec   `json:"spec"`
	Status GroupMembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMembershipList contains a list of GroupMemberships
type GroupMembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMembership `json:"items"`
}

// Repository type metadata.
var (
	GroupMembership_Kind             = "GroupMembership"
	GroupMembership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMembership_Kind}.String()
	GroupMembership_KindAPIVersion   = GroupMembership_Kind + "." + CRDGroupVersion.String()
	GroupMembership_GroupVersionKind = CRDGroupVersion.WithKind(GroupMembership_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMembership{}, &GroupMembershipList{})
}
