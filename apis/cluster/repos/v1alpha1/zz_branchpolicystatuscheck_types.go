// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type BranchPolicyStatusCheckInitParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// A settings block as defined below. Configuration for the policy. This block must be defined exactly once.
	Settings *BranchPolicyStatusCheckSettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type BranchPolicyStatusCheckObservation struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of branch policy configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project in which the policy will be created.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// A settings block as defined below. Configuration for the policy. This block must be defined exactly once.
	Settings *BranchPolicyStatusCheckSettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`
}

type BranchPolicyStatusCheckParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	// +kubebuilder:validation:Optional
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// A settings block as defined below. Configuration for the policy. This block must be defined exactly once.
	// +kubebuilder:validation:Optional
	Settings *BranchPolicyStatusCheckSettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type BranchPolicyStatusCheckSettingsInitParameters struct {

	// Policy applicability. If policy applicability=default, apply unless "Not Applicable"
	// status is posted to the pull request. If policy applicability=conditional, policy is applied only after a status
	// is posted to the pull request. Possible values default, conditional. Defaults to default.
	Applicability *string `json:"applicability,omitempty" tf:"applicability,omitempty"`

	// The authorized user can post the status.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.UserEntitlement
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	AuthorID *string `json:"authorId,omitempty" tf:"author_id,omitempty"`

	// Reference to a UserEntitlement in security to populate authorId.
	// +kubebuilder:validation:Optional
	AuthorIDRef *v1.Reference `json:"authorIdRef,omitempty" tf:"-"`

	// Selector for a UserEntitlement in security to populate authorId.
	// +kubebuilder:validation:Optional
	AuthorIDSelector *v1.Selector `json:"authorIdSelector,omitempty" tf:"-"`

	// The display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If a path filter is set, the policy will only apply when files which match the filter are changed. Not setting this field means that the policy is always applied.
	FilenamePatterns []*string `json:"filenamePatterns,omitempty" tf:"filename_patterns,omitempty"`

	// The genre of the status to check (see Microsoft Documentation)
	Genre *string `json:"genre,omitempty" tf:"genre,omitempty"`

	// Reset status whenever there are new changes.
	InvalidateOnUpdate *bool `json:"invalidateOnUpdate,omitempty" tf:"invalidate_on_update,omitempty"`

	// The status name to check.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A scope block as defined below.
	Scope []BranchPolicyStatusCheckSettingsScopeInitParameters `json:"scope,omitempty" tf:"scope,omitempty"`
}

type BranchPolicyStatusCheckSettingsObservation struct {

	// Policy applicability. If policy applicability=default, apply unless "Not Applicable"
	// status is posted to the pull request. If policy applicability=conditional, policy is applied only after a status
	// is posted to the pull request. Possible values default, conditional. Defaults to default.
	Applicability *string `json:"applicability,omitempty" tf:"applicability,omitempty"`

	// The authorized user can post the status.
	AuthorID *string `json:"authorId,omitempty" tf:"author_id,omitempty"`

	// The display name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If a path filter is set, the policy will only apply when files which match the filter are changed. Not setting this field means that the policy is always applied.
	FilenamePatterns []*string `json:"filenamePatterns,omitempty" tf:"filename_patterns,omitempty"`

	// The genre of the status to check (see Microsoft Documentation)
	Genre *string `json:"genre,omitempty" tf:"genre,omitempty"`

	// Reset status whenever there are new changes.
	InvalidateOnUpdate *bool `json:"invalidateOnUpdate,omitempty" tf:"invalidate_on_update,omitempty"`

	// The status name to check.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A scope block as defined below.
	Scope []BranchPolicyStatusCheckSettingsScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`
}

type BranchPolicyStatusCheckSettingsParameters struct {

	// Policy applicability. If policy applicability=default, apply unless "Not Applicable"
	// status is posted to the pull request. If policy applicability=conditional, policy is applied only after a status
	// is posted to the pull request. Possible values default, conditional. Defaults to default.
	// +kubebuilder:validation:Optional
	Applicability *string `json:"applicability,omitempty" tf:"applicability,omitempty"`

	// The authorized user can post the status.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.UserEntitlement
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	AuthorID *string `json:"authorId,omitempty" tf:"author_id,omitempty"`

	// Reference to a UserEntitlement in security to populate authorId.
	// +kubebuilder:validation:Optional
	AuthorIDRef *v1.Reference `json:"authorIdRef,omitempty" tf:"-"`

	// Selector for a UserEntitlement in security to populate authorId.
	// +kubebuilder:validation:Optional
	AuthorIDSelector *v1.Selector `json:"authorIdSelector,omitempty" tf:"-"`

	// The display name.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If a path filter is set, the policy will only apply when files which match the filter are changed. Not setting this field means that the policy is always applied.
	// +kubebuilder:validation:Optional
	FilenamePatterns []*string `json:"filenamePatterns,omitempty" tf:"filename_patterns,omitempty"`

	// The genre of the status to check (see Microsoft Documentation)
	// +kubebuilder:validation:Optional
	Genre *string `json:"genre,omitempty" tf:"genre,omitempty"`

	// Reset status whenever there are new changes.
	// +kubebuilder:validation:Optional
	InvalidateOnUpdate *bool `json:"invalidateOnUpdate,omitempty" tf:"invalidate_on_update,omitempty"`

	// The status name to check.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// A scope block as defined below.
	// +kubebuilder:validation:Optional
	Scope []BranchPolicyStatusCheckSettingsScopeParameters `json:"scope" tf:"scope,omitempty"`
}

type BranchPolicyStatusCheckSettingsScopeInitParameters struct {

	// The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type=DefaultBranch, this should not be defined.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.Reference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.Selector `json:"repositoryIdSelector,omitempty" tf:"-"`

	// The ref pattern to use for the match when match_type other than DefaultBranch. If match_type=Exact, this should be a qualified ref such as refs/heads/master. If match_type=Prefix, this should be a ref path such as refs/heads/releases.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("default_branch",false)
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefRef *v1.Reference `json:"repositoryRefRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefSelector *v1.Selector `json:"repositoryRefSelector,omitempty" tf:"-"`
}

type BranchPolicyStatusCheckSettingsScopeObservation struct {

	// The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type=DefaultBranch, this should not be defined.
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// The ref pattern to use for the match when match_type other than DefaultBranch. If match_type=Exact, this should be a qualified ref such as refs/heads/master. If match_type=Prefix, this should be a ref path such as refs/heads/releases.
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`
}

type BranchPolicyStatusCheckSettingsScopeParameters struct {

	// The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
	// +kubebuilder:validation:Optional
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type=DefaultBranch, this should not be defined.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.Reference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.Selector `json:"repositoryIdSelector,omitempty" tf:"-"`

	// The ref pattern to use for the match when match_type other than DefaultBranch. If match_type=Exact, this should be a qualified ref such as refs/heads/master. If match_type=Prefix, this should be a ref path such as refs/heads/releases.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("default_branch",false)
	// +kubebuilder:validation:Optional
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefRef *v1.Reference `json:"repositoryRefRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefSelector *v1.Selector `json:"repositoryRefSelector,omitempty" tf:"-"`
}

// BranchPolicyStatusCheckSpec defines the desired state of BranchPolicyStatusCheck
type BranchPolicyStatusCheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BranchPolicyStatusCheckParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BranchPolicyStatusCheckInitParameters `json:"initProvider,omitempty"`
}

// BranchPolicyStatusCheckStatus defines the observed state of BranchPolicyStatusCheck.
type BranchPolicyStatusCheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BranchPolicyStatusCheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BranchPolicyStatusCheck is the Schema for the BranchPolicyStatusChecks API. Manages status check branch policy within Azure DevOps project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type BranchPolicyStatusCheck struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.settings) || (has(self.initProvider) && has(self.initProvider.settings))",message="spec.forProvider.settings is a required parameter"
	Spec   BranchPolicyStatusCheckSpec   `json:"spec"`
	Status BranchPolicyStatusCheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BranchPolicyStatusCheckList contains a list of BranchPolicyStatusChecks
type BranchPolicyStatusCheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BranchPolicyStatusCheck `json:"items"`
}

// Repository type metadata.
var (
	BranchPolicyStatusCheck_Kind             = "BranchPolicyStatusCheck"
	BranchPolicyStatusCheck_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BranchPolicyStatusCheck_Kind}.String()
	BranchPolicyStatusCheck_KindAPIVersion   = BranchPolicyStatusCheck_Kind + "." + CRDGroupVersion.String()
	BranchPolicyStatusCheck_GroupVersionKind = CRDGroupVersion.WithKind(BranchPolicyStatusCheck_Kind)
)

func init() {
	SchemeBuilder.Register(&BranchPolicyStatusCheck{}, &BranchPolicyStatusCheckList{})
}
