// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type CheckBranchControlInitParameters struct {

	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in refs/heads/branch_name format. To allow deployments from all branches, specify * . refs/heads/features/* , refs/heads/releases/* restricts deployments to all branches under features/ or releases/ . Defaults to *.
	AllowedBranches *string `json:"allowedBranches,omitempty" tf:"allowed_branches,omitempty"`

	// The name of the branch control check displayed in the web UI.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is true. Defaults to false.
	IgnoreUnknownProtectionStatus *bool `json:"ignoreUnknownProtectionStatus,omitempty" tf:"ignore_unknown_protection_status,omitempty"`

	// The project ID.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The ID of the resource being protected by the check.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/serviceendpoint/v1alpha1.ServiceendpointGeneric
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	TargetResourceID *string `json:"targetResourceId,omitempty" tf:"target_resource_id,omitempty"`

	// Reference to a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDRef *v1.Reference `json:"targetResourceIdRef,omitempty" tf:"-"`

	// Selector for a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDSelector *v1.Selector `json:"targetResourceIdSelector,omitempty" tf:"-"`

	// The type of resource being protected by the check. Possible values are: endpoint, environment, queue, repository, securefile, variablegroup.
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`

	// The timeout in minutes for the branch control check. Defaults to 1440.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Validate the branches being deployed are protected. Defaults to false.
	VerifyBranchProtection *bool `json:"verifyBranchProtection,omitempty" tf:"verify_branch_protection,omitempty"`
}

type CheckBranchControlObservation struct {

	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in refs/heads/branch_name format. To allow deployments from all branches, specify * . refs/heads/features/* , refs/heads/releases/* restricts deployments to all branches under features/ or releases/ . Defaults to *.
	AllowedBranches *string `json:"allowedBranches,omitempty" tf:"allowed_branches,omitempty"`

	// The name of the branch control check displayed in the web UI.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the check.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is true. Defaults to false.
	IgnoreUnknownProtectionStatus *bool `json:"ignoreUnknownProtectionStatus,omitempty" tf:"ignore_unknown_protection_status,omitempty"`

	// The project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The ID of the resource being protected by the check.
	TargetResourceID *string `json:"targetResourceId,omitempty" tf:"target_resource_id,omitempty"`

	// The type of resource being protected by the check. Possible values are: endpoint, environment, queue, repository, securefile, variablegroup.
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`

	// The timeout in minutes for the branch control check. Defaults to 1440.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Validate the branches being deployed are protected. Defaults to false.
	VerifyBranchProtection *bool `json:"verifyBranchProtection,omitempty" tf:"verify_branch_protection,omitempty"`

	// The version of the check.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type CheckBranchControlParameters struct {

	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in refs/heads/branch_name format. To allow deployments from all branches, specify * . refs/heads/features/* , refs/heads/releases/* restricts deployments to all branches under features/ or releases/ . Defaults to *.
	// +kubebuilder:validation:Optional
	AllowedBranches *string `json:"allowedBranches,omitempty" tf:"allowed_branches,omitempty"`

	// The name of the branch control check displayed in the web UI.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is true. Defaults to false.
	// +kubebuilder:validation:Optional
	IgnoreUnknownProtectionStatus *bool `json:"ignoreUnknownProtectionStatus,omitempty" tf:"ignore_unknown_protection_status,omitempty"`

	// The project ID.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The ID of the resource being protected by the check.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/serviceendpoint/v1alpha1.ServiceendpointGeneric
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TargetResourceID *string `json:"targetResourceId,omitempty" tf:"target_resource_id,omitempty"`

	// Reference to a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDRef *v1.Reference `json:"targetResourceIdRef,omitempty" tf:"-"`

	// Selector for a ServiceendpointGeneric in serviceendpoint to populate targetResourceId.
	// +kubebuilder:validation:Optional
	TargetResourceIDSelector *v1.Selector `json:"targetResourceIdSelector,omitempty" tf:"-"`

	// The type of resource being protected by the check. Possible values are: endpoint, environment, queue, repository, securefile, variablegroup.
	// +kubebuilder:validation:Optional
	TargetResourceType *string `json:"targetResourceType,omitempty" tf:"target_resource_type,omitempty"`

	// The timeout in minutes for the branch control check. Defaults to 1440.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Validate the branches being deployed are protected. Defaults to false.
	// +kubebuilder:validation:Optional
	VerifyBranchProtection *bool `json:"verifyBranchProtection,omitempty" tf:"verify_branch_protection,omitempty"`
}

// CheckBranchControlSpec defines the desired state of CheckBranchControl
type CheckBranchControlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckBranchControlParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CheckBranchControlInitParameters `json:"initProvider,omitempty"`
}

// CheckBranchControlStatus defines the observed state of CheckBranchControl.
type CheckBranchControlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckBranchControlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CheckBranchControl is the Schema for the CheckBranchControls API. Manages a branch control check.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type CheckBranchControl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetResourceType) || (has(self.initProvider) && has(self.initProvider.targetResourceType))",message="spec.forProvider.targetResourceType is a required parameter"
	Spec   CheckBranchControlSpec   `json:"spec"`
	Status CheckBranchControlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckBranchControlList contains a list of CheckBranchControls
type CheckBranchControlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CheckBranchControl `json:"items"`
}

// Repository type metadata.
var (
	CheckBranchControl_Kind             = "CheckBranchControl"
	CheckBranchControl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CheckBranchControl_Kind}.String()
	CheckBranchControl_KindAPIVersion   = CheckBranchControl_Kind + "." + CRDGroupVersion.String()
	CheckBranchControl_GroupVersionKind = CRDGroupVersion.WithKind(CheckBranchControl_Kind)
)

func init() {
	SchemeBuilder.Register(&CheckBranchControl{}, &CheckBranchControlList{})
}
