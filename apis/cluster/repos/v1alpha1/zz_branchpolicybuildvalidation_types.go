// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type BranchPolicyBuildValidationInitParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// A settings block as defined below. Configuration for the policy. This block must be defined exactly once.
	Settings *BranchPolicyBuildValidationSettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type BranchPolicyBuildValidationObservation struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of branch policy configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project in which the policy will be created.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// A settings block as defined below. Configuration for the policy. This block must be defined exactly once.
	Settings *BranchPolicyBuildValidationSettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`
}

type BranchPolicyBuildValidationParameters struct {

	// A flag indicating if the policy should be blocking. Defaults to true.
	// +kubebuilder:validation:Optional
	Blocking *bool `json:"blocking,omitempty" tf:"blocking,omitempty"`

	// A flag indicating if the policy should be enabled. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the project in which the policy will be created.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// A settings block as defined below. Configuration for the policy. This block must be defined exactly once.
	// +kubebuilder:validation:Optional
	Settings *BranchPolicyBuildValidationSettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type BranchPolicyBuildValidationSettingsInitParameters struct {

	// The ID of the build to monitor for the policy.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/pipelines/v1alpha1.BuildDefinition
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	BuildDefinitionID *float64 `json:"buildDefinitionId,omitempty" tf:"build_definition_id,omitempty"`

	// Reference to a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDRef *v1.Reference `json:"buildDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDSelector *v1.Selector `json:"buildDefinitionIdSelector,omitempty" tf:"-"`

	// The display name for the policy.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: ["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.
	FilenamePatterns []*string `json:"filenamePatterns,omitempty" tf:"filename_patterns,omitempty"`

	// If set to true, the build will need to be manually queued. Defaults to false
	ManualQueueOnly *bool `json:"manualQueueOnly,omitempty" tf:"manual_queue_only,omitempty"`

	// True if the build should queue on source updates only. Defaults to true.
	QueueOnSourceUpdateOnly *bool `json:"queueOnSourceUpdateOnly,omitempty" tf:"queue_on_source_update_only,omitempty"`

	// A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scope []SettingsScopeInitParameters `json:"scope,omitempty" tf:"scope,omitempty"`

	// The number of minutes for which the build is valid. If 0, the build will not expire. Defaults to 720 (12 hours).
	ValidDuration *float64 `json:"validDuration,omitempty" tf:"valid_duration,omitempty"`
}

type BranchPolicyBuildValidationSettingsObservation struct {

	// The ID of the build to monitor for the policy.
	BuildDefinitionID *float64 `json:"buildDefinitionId,omitempty" tf:"build_definition_id,omitempty"`

	// The display name for the policy.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: ["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.
	FilenamePatterns []*string `json:"filenamePatterns,omitempty" tf:"filename_patterns,omitempty"`

	// If set to true, the build will need to be manually queued. Defaults to false
	ManualQueueOnly *bool `json:"manualQueueOnly,omitempty" tf:"manual_queue_only,omitempty"`

	// True if the build should queue on source updates only. Defaults to true.
	QueueOnSourceUpdateOnly *bool `json:"queueOnSourceUpdateOnly,omitempty" tf:"queue_on_source_update_only,omitempty"`

	// A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scope []SettingsScopeObservation `json:"scope,omitempty" tf:"scope,omitempty"`

	// The number of minutes for which the build is valid. If 0, the build will not expire. Defaults to 720 (12 hours).
	ValidDuration *float64 `json:"validDuration,omitempty" tf:"valid_duration,omitempty"`
}

type BranchPolicyBuildValidationSettingsParameters struct {

	// The ID of the build to monitor for the policy.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/pipelines/v1alpha1.BuildDefinition
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BuildDefinitionID *float64 `json:"buildDefinitionId,omitempty" tf:"build_definition_id,omitempty"`

	// Reference to a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDRef *v1.Reference `json:"buildDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDSelector *v1.Selector `json:"buildDefinitionIdSelector,omitempty" tf:"-"`

	// The display name for the policy.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: ["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.
	// +kubebuilder:validation:Optional
	FilenamePatterns []*string `json:"filenamePatterns,omitempty" tf:"filename_patterns,omitempty"`

	// If set to true, the build will need to be manually queued. Defaults to false
	// +kubebuilder:validation:Optional
	ManualQueueOnly *bool `json:"manualQueueOnly,omitempty" tf:"manual_queue_only,omitempty"`

	// True if the build should queue on source updates only. Defaults to true.
	// +kubebuilder:validation:Optional
	QueueOnSourceUpdateOnly *bool `json:"queueOnSourceUpdateOnly,omitempty" tf:"queue_on_source_update_only,omitempty"`

	// A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	// +kubebuilder:validation:Optional
	Scope []SettingsScopeParameters `json:"scope" tf:"scope,omitempty"`

	// The number of minutes for which the build is valid. If 0, the build will not expire. Defaults to 720 (12 hours).
	// +kubebuilder:validation:Optional
	ValidDuration *float64 `json:"validDuration,omitempty" tf:"valid_duration,omitempty"`
}

type SettingsScopeInitParameters struct {

	// The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.Reference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.Selector `json:"repositoryIdSelector,omitempty" tf:"-"`

	// The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("default_branch",false)
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefRef *v1.Reference `json:"repositoryRefRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefSelector *v1.Selector `json:"repositoryRefSelector,omitempty" tf:"-"`
}

type SettingsScopeObservation struct {

	// The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`
}

type SettingsScopeParameters struct {

	// The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
	// +kubebuilder:validation:Optional
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.Reference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.Selector `json:"repositoryIdSelector,omitempty" tf:"-"`

	// The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/repos/v1alpha1.GitRepository
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("default_branch",false)
	// +kubebuilder:validation:Optional
	RepositoryRef *string `json:"repositoryRef,omitempty" tf:"repository_ref,omitempty"`

	// Reference to a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefRef *v1.Reference `json:"repositoryRefRef,omitempty" tf:"-"`

	// Selector for a GitRepository in repos to populate repositoryRef.
	// +kubebuilder:validation:Optional
	RepositoryRefSelector *v1.Selector `json:"repositoryRefSelector,omitempty" tf:"-"`
}

// BranchPolicyBuildValidationSpec defines the desired state of BranchPolicyBuildValidation
type BranchPolicyBuildValidationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BranchPolicyBuildValidationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BranchPolicyBuildValidationInitParameters `json:"initProvider,omitempty"`
}

// BranchPolicyBuildValidationStatus defines the observed state of BranchPolicyBuildValidation.
type BranchPolicyBuildValidationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BranchPolicyBuildValidationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BranchPolicyBuildValidation is the Schema for the BranchPolicyBuildValidations API. Manages a build validation branch policy within Azure DevOps project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type BranchPolicyBuildValidation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.settings) || (has(self.initProvider) && has(self.initProvider.settings))",message="spec.forProvider.settings is a required parameter"
	Spec   BranchPolicyBuildValidationSpec   `json:"spec"`
	Status BranchPolicyBuildValidationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BranchPolicyBuildValidationList contains a list of BranchPolicyBuildValidations
type BranchPolicyBuildValidationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BranchPolicyBuildValidation `json:"items"`
}

// Repository type metadata.
var (
	BranchPolicyBuildValidation_Kind             = "BranchPolicyBuildValidation"
	BranchPolicyBuildValidation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BranchPolicyBuildValidation_Kind}.String()
	BranchPolicyBuildValidation_KindAPIVersion   = BranchPolicyBuildValidation_Kind + "." + CRDGroupVersion.String()
	BranchPolicyBuildValidation_GroupVersionKind = CRDGroupVersion.WithKind(BranchPolicyBuildValidation_Kind)
)

func init() {
	SchemeBuilder.Register(&BranchPolicyBuildValidation{}, &BranchPolicyBuildValidationList{})
}
