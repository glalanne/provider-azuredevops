// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type RunStateChangedEventInitParameters struct {

	// The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
	// The pipeline ID to be monitored. If not specified, all pipelines in the project will trigger the event
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Which run result should generate an event. Only valid if published_event is RunStateChanged. If not specified, all results will trigger the event.
	// Which run result should generate an event. Only valid if published_event is `RunStateChanged`. If not specified, all results will trigger the event
	RunResultFilter *string `json:"runResultFilter,omitempty" tf:"run_result_filter,omitempty"`

	// Which run state should generate an event. Only valid if published_event is RunStateChanged. If not specified, all states will trigger the event.
	// Which run state should generate an event. Only valid if published_event is `RunStateChanged`. If not specified, all states will trigger the event
	RunStateFilter *string `json:"runStateFilter,omitempty" tf:"run_state_filter,omitempty"`
}

type RunStateChangedEventObservation struct {

	// The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
	// The pipeline ID to be monitored. If not specified, all pipelines in the project will trigger the event
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Which run result should generate an event. Only valid if published_event is RunStateChanged. If not specified, all results will trigger the event.
	// Which run result should generate an event. Only valid if published_event is `RunStateChanged`. If not specified, all results will trigger the event
	RunResultFilter *string `json:"runResultFilter,omitempty" tf:"run_result_filter,omitempty"`

	// Which run state should generate an event. Only valid if published_event is RunStateChanged. If not specified, all states will trigger the event.
	// Which run state should generate an event. Only valid if published_event is `RunStateChanged`. If not specified, all states will trigger the event
	RunStateFilter *string `json:"runStateFilter,omitempty" tf:"run_state_filter,omitempty"`
}

type RunStateChangedEventParameters struct {

	// The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
	// The pipeline ID to be monitored. If not specified, all pipelines in the project will trigger the event
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Which run result should generate an event. Only valid if published_event is RunStateChanged. If not specified, all results will trigger the event.
	// Which run result should generate an event. Only valid if published_event is `RunStateChanged`. If not specified, all results will trigger the event
	// +kubebuilder:validation:Optional
	RunResultFilter *string `json:"runResultFilter,omitempty" tf:"run_result_filter,omitempty"`

	// Which run state should generate an event. Only valid if published_event is RunStateChanged. If not specified, all states will trigger the event.
	// Which run state should generate an event. Only valid if published_event is `RunStateChanged`. If not specified, all states will trigger the event
	// +kubebuilder:validation:Optional
	RunStateFilter *string `json:"runStateFilter,omitempty" tf:"run_state_filter,omitempty"`
}

type ServicehookStorageQueuePipelinesInitParameters struct {

	// A valid account key from the queue's storage account.
	// A valid account key from the queue's storage account
	AccountKeySecretRef v1.SecretKeySelector `json:"accountKeySecretRef" tf:"-"`

	// The queue's storage account name.
	// The queue's storage account name
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.
	// The ID of the project
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The name of the queue that will store the events.
	// The name of the queue that will store the events
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// A run_state_changed_event block as defined below. Conflicts with stage_state_changed_event
	RunStateChangedEvent *RunStateChangedEventInitParameters `json:"runStateChangedEvent,omitempty" tf:"run_state_changed_event,omitempty"`

	// A stage_state_changed_event block as defined below. Conflicts with run_state_changed_event
	StageStateChangedEvent *StageStateChangedEventInitParameters `json:"stageStateChangedEvent,omitempty" tf:"stage_state_changed_event,omitempty"`

	// event time-to-live - the duration a message can remain in the queue before it's automatically removed. Defaults to 604800.
	// event time-to-live - the duration a message can remain in the queue before it's automatically removed
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// event visibility timout - how long a message is invisible to other consumers after it's been dequeued. Defaults to 0.
	// event visibility timout - how long a message is invisible to other consumers after it's been dequeued
	VisiTimeout *float64 `json:"visiTimeout,omitempty" tf:"visi_timeout,omitempty"`
}

type ServicehookStorageQueuePipelinesObservation struct {

	// The queue's storage account name.
	// The queue's storage account name
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The ID of the Service Hook Storage Queue Pipelines.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.
	// The ID of the project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The name of the queue that will store the events.
	// The name of the queue that will store the events
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// A run_state_changed_event block as defined below. Conflicts with stage_state_changed_event
	RunStateChangedEvent *RunStateChangedEventObservation `json:"runStateChangedEvent,omitempty" tf:"run_state_changed_event,omitempty"`

	// A stage_state_changed_event block as defined below. Conflicts with run_state_changed_event
	StageStateChangedEvent *StageStateChangedEventObservation `json:"stageStateChangedEvent,omitempty" tf:"stage_state_changed_event,omitempty"`

	// event time-to-live - the duration a message can remain in the queue before it's automatically removed. Defaults to 604800.
	// event time-to-live - the duration a message can remain in the queue before it's automatically removed
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// event visibility timout - how long a message is invisible to other consumers after it's been dequeued. Defaults to 0.
	// event visibility timout - how long a message is invisible to other consumers after it's been dequeued
	VisiTimeout *float64 `json:"visiTimeout,omitempty" tf:"visi_timeout,omitempty"`
}

type ServicehookStorageQueuePipelinesParameters struct {

	// A valid account key from the queue's storage account.
	// A valid account key from the queue's storage account
	// +kubebuilder:validation:Optional
	AccountKeySecretRef v1.SecretKeySelector `json:"accountKeySecretRef" tf:"-"`

	// The queue's storage account name.
	// The queue's storage account name
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.
	// The ID of the project
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The name of the queue that will store the events.
	// The name of the queue that will store the events
	// +kubebuilder:validation:Optional
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// A run_state_changed_event block as defined below. Conflicts with stage_state_changed_event
	// +kubebuilder:validation:Optional
	RunStateChangedEvent *RunStateChangedEventParameters `json:"runStateChangedEvent,omitempty" tf:"run_state_changed_event,omitempty"`

	// A stage_state_changed_event block as defined below. Conflicts with run_state_changed_event
	// +kubebuilder:validation:Optional
	StageStateChangedEvent *StageStateChangedEventParameters `json:"stageStateChangedEvent,omitempty" tf:"stage_state_changed_event,omitempty"`

	// event time-to-live - the duration a message can remain in the queue before it's automatically removed. Defaults to 604800.
	// event time-to-live - the duration a message can remain in the queue before it's automatically removed
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// event visibility timout - how long a message is invisible to other consumers after it's been dequeued. Defaults to 0.
	// event visibility timout - how long a message is invisible to other consumers after it's been dequeued
	// +kubebuilder:validation:Optional
	VisiTimeout *float64 `json:"visiTimeout,omitempty" tf:"visi_timeout,omitempty"`
}

type StageStateChangedEventInitParameters struct {

	// The pipeline ID that will generate an event.
	// The pipeline ID to be monitored. If not specified, all pipelines in the project will trigger the event
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Which stage should generate an event. Only valid if published_event is StageStateChanged. If not specified, all stages will trigger the event.
	// Which stage should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all stages will trigger the event
	StageName *string `json:"stageName,omitempty" tf:"stage_name,omitempty"`

	// Which stage result should generate an event. Only valid if published_event is StageStateChanged. If not specified, all results will trigger the event.
	// Which stage result should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all results will trigger the event
	StageResultFilter *string `json:"stageResultFilter,omitempty" tf:"stage_result_filter,omitempty"`

	// Which stage state should generate an event. Only valid if published_event is StageStateChanged. If not specified, all states will trigger the event.
	// Which stage state should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all states will trigger the event
	StageStateFilter *string `json:"stageStateFilter,omitempty" tf:"stage_state_filter,omitempty"`
}

type StageStateChangedEventObservation struct {

	// The pipeline ID that will generate an event.
	// The pipeline ID to be monitored. If not specified, all pipelines in the project will trigger the event
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Which stage should generate an event. Only valid if published_event is StageStateChanged. If not specified, all stages will trigger the event.
	// Which stage should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all stages will trigger the event
	StageName *string `json:"stageName,omitempty" tf:"stage_name,omitempty"`

	// Which stage result should generate an event. Only valid if published_event is StageStateChanged. If not specified, all results will trigger the event.
	// Which stage result should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all results will trigger the event
	StageResultFilter *string `json:"stageResultFilter,omitempty" tf:"stage_result_filter,omitempty"`

	// Which stage state should generate an event. Only valid if published_event is StageStateChanged. If not specified, all states will trigger the event.
	// Which stage state should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all states will trigger the event
	StageStateFilter *string `json:"stageStateFilter,omitempty" tf:"stage_state_filter,omitempty"`
}

type StageStateChangedEventParameters struct {

	// The pipeline ID that will generate an event.
	// The pipeline ID to be monitored. If not specified, all pipelines in the project will trigger the event
	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Which stage should generate an event. Only valid if published_event is StageStateChanged. If not specified, all stages will trigger the event.
	// Which stage should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all stages will trigger the event
	// +kubebuilder:validation:Optional
	StageName *string `json:"stageName,omitempty" tf:"stage_name,omitempty"`

	// Which stage result should generate an event. Only valid if published_event is StageStateChanged. If not specified, all results will trigger the event.
	// Which stage result should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all results will trigger the event
	// +kubebuilder:validation:Optional
	StageResultFilter *string `json:"stageResultFilter,omitempty" tf:"stage_result_filter,omitempty"`

	// Which stage state should generate an event. Only valid if published_event is StageStateChanged. If not specified, all states will trigger the event.
	// Which stage state should generate an event. Only valid if published_event is `StageStateChanged`. If not specified, all states will trigger the event
	// +kubebuilder:validation:Optional
	StageStateFilter *string `json:"stageStateFilter,omitempty" tf:"stage_state_filter,omitempty"`
}

// ServicehookStorageQueuePipelinesSpec defines the desired state of ServicehookStorageQueuePipelines
type ServicehookStorageQueuePipelinesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicehookStorageQueuePipelinesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServicehookStorageQueuePipelinesInitParameters `json:"initProvider,omitempty"`
}

// ServicehookStorageQueuePipelinesStatus defines the observed state of ServicehookStorageQueuePipelines.
type ServicehookStorageQueuePipelinesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicehookStorageQueuePipelinesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServicehookStorageQueuePipelines is the Schema for the ServicehookStorageQueuePipeliness API. Manages a Storage Queue Pipelines Service Hook.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServicehookStorageQueuePipelines struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountKeySecretRef)",message="spec.forProvider.accountKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountName) || (has(self.initProvider) && has(self.initProvider.accountName))",message="spec.forProvider.accountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queueName) || (has(self.initProvider) && has(self.initProvider.queueName))",message="spec.forProvider.queueName is a required parameter"
	Spec   ServicehookStorageQueuePipelinesSpec   `json:"spec"`
	Status ServicehookStorageQueuePipelinesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicehookStorageQueuePipelinesList contains a list of ServicehookStorageQueuePipeliness
type ServicehookStorageQueuePipelinesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicehookStorageQueuePipelines `json:"items"`
}

// Repository type metadata.
var (
	ServicehookStorageQueuePipelines_Kind             = "ServicehookStorageQueuePipelines"
	ServicehookStorageQueuePipelines_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServicehookStorageQueuePipelines_Kind}.String()
	ServicehookStorageQueuePipelines_KindAPIVersion   = ServicehookStorageQueuePipelines_Kind + "." + CRDGroupVersion.String()
	ServicehookStorageQueuePipelines_GroupVersionKind = CRDGroupVersion.WithKind(ServicehookStorageQueuePipelines_Kind)
)

func init() {
	SchemeBuilder.Register(&ServicehookStorageQueuePipelines{}, &ServicehookStorageQueuePipelinesList{})
}
