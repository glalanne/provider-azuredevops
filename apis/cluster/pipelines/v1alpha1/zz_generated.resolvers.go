// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-azuredevops/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *BuildDefinition) ResolveReferences( // ResolveReferences of this BuildDefinition.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("repos.azuredevops.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Repository.BranchName),
				Extract:      resource.ExtractParamPath("default_branch", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Repository.BranchNameRef,
				Selector:     mg.Spec.ForProvider.Repository.BranchNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Repository.BranchName")
		}
		mg.Spec.ForProvider.Repository.BranchName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Repository.BranchNameRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("repos.azuredevops.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Repository.RepoID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Repository.RepoIDRef,
				Selector:     mg.Spec.ForProvider.Repository.RepoIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Repository.RepoID")
		}
		mg.Spec.ForProvider.Repository.RepoID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Repository.RepoIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.crossplane.io", "v1alpha1", "ServiceendpointGithubEnterprise", "ServiceendpointGithubEnterpriseList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Repository.ServiceConnectionID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Repository.ServiceConnectionIDRef,
				Selector:     mg.Spec.ForProvider.Repository.ServiceConnectionIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Repository.ServiceConnectionID")
		}
		mg.Spec.ForProvider.Repository.ServiceConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Repository.ServiceConnectionIDRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.crossplane.io", "v1alpha1", "ServiceendpointGenericGit", "ServiceendpointGenericGitList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Repository.URL),
				Extract:      resource.ExtractParamPath("repository_url", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Repository.URLRef,
				Selector:     mg.Spec.ForProvider.Repository.URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Repository.URL")
		}
		mg.Spec.ForProvider.Repository.URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Repository.URLRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("pipelines.azuredevops.crossplane.io", "v1alpha1", "VariableGroup", "VariableGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromFloatPtrValues(mg.Spec.ForProvider.VariableGroups),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.VariableGroupsRefs,
			Selector:      mg.Spec.ForProvider.VariableGroupsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VariableGroups")
	}
	mg.Spec.ForProvider.VariableGroups = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.VariableGroupsRefs = mrsp.ResolvedReferences
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("repos.azuredevops.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Repository.BranchName),
				Extract:      resource.ExtractParamPath("default_branch", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Repository.BranchNameRef,
				Selector:     mg.Spec.InitProvider.Repository.BranchNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Repository.BranchName")
		}
		mg.Spec.InitProvider.Repository.BranchName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Repository.BranchNameRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("repos.azuredevops.crossplane.io", "v1alpha1", "GitRepository", "GitRepositoryList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Repository.RepoID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Repository.RepoIDRef,
				Selector:     mg.Spec.InitProvider.Repository.RepoIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Repository.RepoID")
		}
		mg.Spec.InitProvider.Repository.RepoID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Repository.RepoIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.crossplane.io", "v1alpha1", "ServiceendpointGithubEnterprise", "ServiceendpointGithubEnterpriseList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Repository.ServiceConnectionID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Repository.ServiceConnectionIDRef,
				Selector:     mg.Spec.InitProvider.Repository.ServiceConnectionIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Repository.ServiceConnectionID")
		}
		mg.Spec.InitProvider.Repository.ServiceConnectionID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Repository.ServiceConnectionIDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Repository != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.crossplane.io", "v1alpha1", "ServiceendpointGenericGit", "ServiceendpointGenericGitList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Repository.URL),
				Extract:      resource.ExtractParamPath("repository_url", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Repository.URLRef,
				Selector:     mg.Spec.InitProvider.Repository.URLSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Repository.URL")
		}
		mg.Spec.InitProvider.Repository.URL = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Repository.URLRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("pipelines.azuredevops.crossplane.io", "v1alpha1", "VariableGroup", "VariableGroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromFloatPtrValues(mg.Spec.InitProvider.VariableGroups),
			Extract:       resource.ExtractResourceID(),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.VariableGroupsRefs,
			Selector:      mg.Spec.InitProvider.VariableGroupsSelector,
			To:            reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VariableGroups")
	}
	mg.Spec.InitProvider.VariableGroups = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.VariableGroupsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this BuildFolder.
func (mg *BuildFolder) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Environment.
func (mg *Environment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServicehookStorageQueuePipelines.
func (mg *ServicehookStorageQueuePipelines) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VariableGroup.
func (mg *VariableGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.KeyVault != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.crossplane.io", "v1alpha1", "ServiceendpointAzurerm", "ServiceendpointAzurermList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVault.ServiceEndpointID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.KeyVault.ServiceEndpointIDRef,
				Selector:     mg.Spec.ForProvider.KeyVault.ServiceEndpointIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.KeyVault.ServiceEndpointID")
		}
		mg.Spec.ForProvider.KeyVault.ServiceEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.KeyVault.ServiceEndpointIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.KeyVault != nil {
		{
			m, l, err = apisresolver.GetManagedResource("serviceendpoint.azuredevops.crossplane.io", "v1alpha1", "ServiceendpointAzurerm", "ServiceendpointAzurermList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.KeyVault.ServiceEndpointID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.KeyVault.ServiceEndpointIDRef,
				Selector:     mg.Spec.InitProvider.KeyVault.ServiceEndpointIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.KeyVault.ServiceEndpointID")
		}
		mg.Spec.InitProvider.KeyVault.ServiceEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.KeyVault.ServiceEndpointIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("project.azuredevops.crossplane.io", "v1alpha1", "Project", "ProjectList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}
