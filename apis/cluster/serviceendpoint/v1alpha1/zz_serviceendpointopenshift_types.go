// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AuthBasicInitParameters struct {

	// The password of the user.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The name of the user.
	UsernameSecretRef v1.SecretKeySelector `json:"usernameSecretRef" tf:"-"`
}

type AuthBasicObservation struct {
}

type AuthBasicParameters struct {

	// The password of the user.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The name of the user.
	// +kubebuilder:validation:Optional
	UsernameSecretRef v1.SecretKeySelector `json:"usernameSecretRef" tf:"-"`
}

type AuthNoneInitParameters struct {

	// The kubectl config
	KubeConfig *string `json:"kubeConfig,omitempty" tf:"kube_config,omitempty"`
}

type AuthNoneObservation struct {

	// The kubectl config
	KubeConfig *string `json:"kubeConfig,omitempty" tf:"kube_config,omitempty"`
}

type AuthNoneParameters struct {

	// The kubectl config
	// +kubebuilder:validation:Optional
	KubeConfig *string `json:"kubeConfig,omitempty" tf:"kube_config,omitempty"`
}

type AuthTokenInitParameters struct {

	// The API token.
	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type AuthTokenObservation struct {

	// The API token.
	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type AuthTokenParameters struct {

	// The API token.
	// +kubebuilder:validation:Optional
	Token *string `json:"token" tf:"token,omitempty"`
}

type ServiceendpointOpenshiftInitParameters struct {

	// Set this option to allow clients to accept a self-signed certificate. Available when using auth_basic or auth_token authorization.
	AcceptUntrustedCerts *bool `json:"acceptUntrustedCerts,omitempty" tf:"accept_untrusted_certs,omitempty"`

	// An auth_basic block as documented below.
	AuthBasic *AuthBasicInitParameters `json:"authBasic,omitempty" tf:"auth_basic,omitempty"`

	// An auth_none block as documented below.
	AuthNone *AuthNoneInitParameters `json:"authNone,omitempty" tf:"auth_none,omitempty"`

	// An auth_token block as documented below.
	AuthToken *AuthTokenInitParameters `json:"authToken,omitempty" tf:"auth_token,omitempty"`

	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using auth_basic or auth_token authorization.
	CertificateAuthorityFile *string `json:"certificateAuthorityFile,omitempty" tf:"certificate_authority_file,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The URL for the OpenShift cluster to connect to.
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointOpenshiftObservation struct {

	// Set this option to allow clients to accept a self-signed certificate. Available when using auth_basic or auth_token authorization.
	AcceptUntrustedCerts *bool `json:"acceptUntrustedCerts,omitempty" tf:"accept_untrusted_certs,omitempty"`

	// An auth_basic block as documented below.
	AuthBasic *AuthBasicParameters `json:"authBasic,omitempty" tf:"auth_basic,omitempty"`

	// An auth_none block as documented below.
	AuthNone *AuthNoneObservation `json:"authNone,omitempty" tf:"auth_none,omitempty"`

	// An auth_token block as documented below.
	AuthToken *AuthTokenObservation `json:"authToken,omitempty" tf:"auth_token,omitempty"`

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using auth_basic or auth_token authorization.
	CertificateAuthorityFile *string `json:"certificateAuthorityFile,omitempty" tf:"certificate_authority_file,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The URL for the OpenShift cluster to connect to.
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointOpenshiftParameters struct {

	// Set this option to allow clients to accept a self-signed certificate. Available when using auth_basic or auth_token authorization.
	// +kubebuilder:validation:Optional
	AcceptUntrustedCerts *bool `json:"acceptUntrustedCerts,omitempty" tf:"accept_untrusted_certs,omitempty"`

	// An auth_basic block as documented below.
	// +kubebuilder:validation:Optional
	AuthBasic *AuthBasicParameters `json:"authBasic,omitempty" tf:"auth_basic,omitempty"`

	// An auth_none block as documented below.
	// +kubebuilder:validation:Optional
	AuthNone *AuthNoneParameters `json:"authNone,omitempty" tf:"auth_none,omitempty"`

	// An auth_token block as documented below.
	// +kubebuilder:validation:Optional
	AuthToken *AuthTokenParameters `json:"authToken,omitempty" tf:"auth_token,omitempty"`

	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using auth_basic or auth_token authorization.
	// +kubebuilder:validation:Optional
	CertificateAuthorityFile *string `json:"certificateAuthorityFile,omitempty" tf:"certificate_authority_file,omitempty"`

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The URL for the OpenShift cluster to connect to.
	// +kubebuilder:validation:Optional
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The Service Endpoint name.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

// ServiceendpointOpenshiftSpec defines the desired state of ServiceendpointOpenshift
type ServiceendpointOpenshiftSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceendpointOpenshiftParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointOpenshiftInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointOpenshiftStatus defines the observed state of ServiceendpointOpenshift.
type ServiceendpointOpenshiftStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointOpenshiftObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointOpenshift is the Schema for the ServiceendpointOpenshifts API. Manages an Openshift service endpoint within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceendpointOpenshift struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	Spec   ServiceendpointOpenshiftSpec   `json:"spec"`
	Status ServiceendpointOpenshiftStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointOpenshiftList contains a list of ServiceendpointOpenshifts
type ServiceendpointOpenshiftList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointOpenshift `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointOpenshift_Kind             = "ServiceendpointOpenshift"
	ServiceendpointOpenshift_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointOpenshift_Kind}.String()
	ServiceendpointOpenshift_KindAPIVersion   = ServiceendpointOpenshift_Kind + "." + CRDGroupVersion.String()
	ServiceendpointOpenshift_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointOpenshift_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointOpenshift{}, &ServiceendpointOpenshiftList{})
}
