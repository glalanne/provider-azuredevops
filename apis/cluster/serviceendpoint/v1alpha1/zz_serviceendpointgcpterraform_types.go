// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ServiceendpointGCPTerraformInitParameters struct {

	// The client email field in the JSON key file for creating the JSON Web Token.
	// The client email field in the JSON key file for creating the JSON Web Token.
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// GCP project associated with the Service Connection.
	// Scope to be provided
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The Private Key for connecting to the endpoint.
	// Private Key for connecting to the endpoint.
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Scope to be provided.
	// Scope to be provided
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The token uri field in the JSON key file for creating the JSON Web Token.
	// The token uri field in the JSON key file for creating the JSON Web Token.
	TokenURI *string `json:"tokenUri,omitempty" tf:"token_uri,omitempty"`
}

type ServiceendpointGCPTerraformObservation struct {

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The client email field in the JSON key file for creating the JSON Web Token.
	// The client email field in the JSON key file for creating the JSON Web Token.
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// GCP project associated with the Service Connection.
	// Scope to be provided
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Scope to be provided.
	// Scope to be provided
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The token uri field in the JSON key file for creating the JSON Web Token.
	// The token uri field in the JSON key file for creating the JSON Web Token.
	TokenURI *string `json:"tokenUri,omitempty" tf:"token_uri,omitempty"`
}

type ServiceendpointGCPTerraformParameters struct {

	// The client email field in the JSON key file for creating the JSON Web Token.
	// The client email field in the JSON key file for creating the JSON Web Token.
	// +kubebuilder:validation:Optional
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// GCP project associated with the Service Connection.
	// Scope to be provided
	// +kubebuilder:validation:Optional
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// The Private Key for connecting to the endpoint.
	// Private Key for connecting to the endpoint.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Scope to be provided.
	// Scope to be provided
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The Service Endpoint name.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The token uri field in the JSON key file for creating the JSON Web Token.
	// The token uri field in the JSON key file for creating the JSON Web Token.
	// +kubebuilder:validation:Optional
	TokenURI *string `json:"tokenUri,omitempty" tf:"token_uri,omitempty"`
}

// ServiceendpointGCPTerraformSpec defines the desired state of ServiceendpointGCPTerraform
type ServiceendpointGCPTerraformSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceendpointGCPTerraformParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointGCPTerraformInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointGCPTerraformStatus defines the observed state of ServiceendpointGCPTerraform.
type ServiceendpointGCPTerraformStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointGCPTerraformObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointGCPTerraform is the Schema for the ServiceendpointGCPTerraforms API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceendpointGCPTerraform struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gcpProjectId) || (has(self.initProvider) && has(self.initProvider.gcpProjectId))",message="spec.forProvider.gcpProjectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateKeySecretRef)",message="spec.forProvider.privateKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenUri) || (has(self.initProvider) && has(self.initProvider.tokenUri))",message="spec.forProvider.tokenUri is a required parameter"
	Spec   ServiceendpointGCPTerraformSpec   `json:"spec"`
	Status ServiceendpointGCPTerraformStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointGCPTerraformList contains a list of ServiceendpointGCPTerraforms
type ServiceendpointGCPTerraformList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointGCPTerraform `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointGCPTerraform_Kind             = "ServiceendpointGCPTerraform"
	ServiceendpointGCPTerraform_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointGCPTerraform_Kind}.String()
	ServiceendpointGCPTerraform_KindAPIVersion   = ServiceendpointGCPTerraform_Kind + "." + CRDGroupVersion.String()
	ServiceendpointGCPTerraform_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointGCPTerraform_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointGCPTerraform{}, &ServiceendpointGCPTerraformList{})
}
