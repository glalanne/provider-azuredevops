// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type CredentialsInitParameters struct {

	// The ID of the Service Principal Application.
	// The service principal id which should be used.
	Serviceprincipalid *string `json:"serviceprincipalid,omitempty" tf:"serviceprincipalid,omitempty"`
}

type CredentialsObservation struct {

	// The ID of the Service Principal Application.
	// The service principal id which should be used.
	Serviceprincipalid *string `json:"serviceprincipalid,omitempty" tf:"serviceprincipalid,omitempty"`
}

type CredentialsParameters struct {

	// The ID of the Service Principal Application.
	// The service principal id which should be used.
	// +kubebuilder:validation:Optional
	Serviceprincipalid *string `json:"serviceprincipalid" tf:"serviceprincipalid,omitempty"`
}

type ServiceendpointAzurecrInitParameters struct {

	// The Azure container registry name.
	// The AzureContainerRegistry registry which should be used.
	AzurecrName *string `json:"azurecrName,omitempty" tf:"azurecr_name,omitempty"`

	// The tenant id of the service principal.
	// The service principal tenant id which should be used.
	AzurecrSpnTenantid *string `json:"azurecrSpnTenantid,omitempty" tf:"azurecr_spn_tenantid,omitempty"`

	// The subscription id of the Azure targets.
	// The Azure subscription Id which should be used.
	AzurecrSubscriptionID *string `json:"azurecrSubscriptionId,omitempty" tf:"azurecr_subscription_id,omitempty"`

	// The subscription name of the Azure targets.
	// The Azure subscription name which should be used.
	AzurecrSubscriptionName *string `json:"azurecrSubscriptionName,omitempty" tf:"azurecr_subscription_name,omitempty"`

	// A credentials block as defined below.
	Credentials *CredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The resource group to which the container registry belongs.
	// Scope Resource Group
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// Specifies the type of azurerm endpoint, either WorkloadIdentityFederation, ManagedServiceIdentity or ServicePrincipal. Defaults to ServicePrincipal for backwards compatibility. ManagedServiceIdentity has not yet been implemented for this resource.
	// The AzureCR Service Endpoint Authentication Scheme, this can be 'WorkloadIdentityFederation', 'ManagedServiceIdentity' or 'ServicePrincipal'.
	ServiceEndpointAuthenticationScheme *string `json:"serviceEndpointAuthenticationScheme,omitempty" tf:"service_endpoint_authentication_scheme,omitempty"`

	// The name you will use to refer to this service connection in task inputs.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointAzurecrObservation struct {

	// The ID of the service endpoint.
	AppObjectID *string `json:"appObjectId,omitempty" tf:"app_object_id,omitempty"`

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The ID of the service endpoint.
	AzSpnRoleAssignmentID *string `json:"azSpnRoleAssignmentId,omitempty" tf:"az_spn_role_assignment_id,omitempty"`

	AzSpnRolePermissions *string `json:"azSpnRolePermissions,omitempty" tf:"az_spn_role_permissions,omitempty"`

	// The Azure container registry name.
	// The AzureContainerRegistry registry which should be used.
	AzurecrName *string `json:"azurecrName,omitempty" tf:"azurecr_name,omitempty"`

	// The tenant id of the service principal.
	// The service principal tenant id which should be used.
	AzurecrSpnTenantid *string `json:"azurecrSpnTenantid,omitempty" tf:"azurecr_spn_tenantid,omitempty"`

	// The subscription id of the Azure targets.
	// The Azure subscription Id which should be used.
	AzurecrSubscriptionID *string `json:"azurecrSubscriptionId,omitempty" tf:"azurecr_subscription_id,omitempty"`

	// The subscription name of the Azure targets.
	// The Azure subscription name which should be used.
	AzurecrSubscriptionName *string `json:"azurecrSubscriptionName,omitempty" tf:"azurecr_subscription_name,omitempty"`

	// A credentials block as defined below.
	Credentials *CredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The resource group to which the container registry belongs.
	// Scope Resource Group
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// Specifies the type of azurerm endpoint, either WorkloadIdentityFederation, ManagedServiceIdentity or ServicePrincipal. Defaults to ServicePrincipal for backwards compatibility. ManagedServiceIdentity has not yet been implemented for this resource.
	// The AzureCR Service Endpoint Authentication Scheme, this can be 'WorkloadIdentityFederation', 'ManagedServiceIdentity' or 'ServicePrincipal'.
	ServiceEndpointAuthenticationScheme *string `json:"serviceEndpointAuthenticationScheme,omitempty" tf:"service_endpoint_authentication_scheme,omitempty"`

	// The name you will use to refer to this service connection in task inputs.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The Application(Client) ID of the Service Principal.
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// The ID of the service endpoint.
	SpnObjectID *string `json:"spnObjectId,omitempty" tf:"spn_object_id,omitempty"`

	// The issuer if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation. This looks like https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000, where the GUID is the Organization ID of your Azure DevOps Organisation.
	// The issuer of the workload identity federation service principal.
	WorkloadIdentityFederationIssuer *string `json:"workloadIdentityFederationIssuer,omitempty" tf:"workload_identity_federation_issuer,omitempty"`

	// The subject if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation. This looks like sc://<organisation>/<project>/<service-connection-name>.
	// The subject of the workload identity federation service principal.
	WorkloadIdentityFederationSubject *string `json:"workloadIdentityFederationSubject,omitempty" tf:"workload_identity_federation_subject,omitempty"`
}

type ServiceendpointAzurecrParameters struct {

	// The Azure container registry name.
	// The AzureContainerRegistry registry which should be used.
	// +kubebuilder:validation:Optional
	AzurecrName *string `json:"azurecrName,omitempty" tf:"azurecr_name,omitempty"`

	// The tenant id of the service principal.
	// The service principal tenant id which should be used.
	// +kubebuilder:validation:Optional
	AzurecrSpnTenantid *string `json:"azurecrSpnTenantid,omitempty" tf:"azurecr_spn_tenantid,omitempty"`

	// The subscription id of the Azure targets.
	// The Azure subscription Id which should be used.
	// +kubebuilder:validation:Optional
	AzurecrSubscriptionID *string `json:"azurecrSubscriptionId,omitempty" tf:"azurecr_subscription_id,omitempty"`

	// The subscription name of the Azure targets.
	// The Azure subscription name which should be used.
	// +kubebuilder:validation:Optional
	AzurecrSubscriptionName *string `json:"azurecrSubscriptionName,omitempty" tf:"azurecr_subscription_name,omitempty"`

	// A credentials block as defined below.
	// +kubebuilder:validation:Optional
	Credentials *CredentialsParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The resource group to which the container registry belongs.
	// Scope Resource Group
	// +kubebuilder:validation:Optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// Specifies the type of azurerm endpoint, either WorkloadIdentityFederation, ManagedServiceIdentity or ServicePrincipal. Defaults to ServicePrincipal for backwards compatibility. ManagedServiceIdentity has not yet been implemented for this resource.
	// The AzureCR Service Endpoint Authentication Scheme, this can be 'WorkloadIdentityFederation', 'ManagedServiceIdentity' or 'ServicePrincipal'.
	// +kubebuilder:validation:Optional
	ServiceEndpointAuthenticationScheme *string `json:"serviceEndpointAuthenticationScheme,omitempty" tf:"service_endpoint_authentication_scheme,omitempty"`

	// The name you will use to refer to this service connection in task inputs.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

// ServiceendpointAzurecrSpec defines the desired state of ServiceendpointAzurecr
type ServiceendpointAzurecrSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceendpointAzurecrParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointAzurecrInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointAzurecrStatus defines the observed state of ServiceendpointAzurecr.
type ServiceendpointAzurecrStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointAzurecrObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointAzurecr is the Schema for the ServiceendpointAzurecrs API. Manages a Azure Container Registry service endpoint within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceendpointAzurecr struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.azurecrName) || (has(self.initProvider) && has(self.initProvider.azurecrName))",message="spec.forProvider.azurecrName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.azurecrSpnTenantid) || (has(self.initProvider) && has(self.initProvider.azurecrSpnTenantid))",message="spec.forProvider.azurecrSpnTenantid is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.azurecrSubscriptionId) || (has(self.initProvider) && has(self.initProvider.azurecrSubscriptionId))",message="spec.forProvider.azurecrSubscriptionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.azurecrSubscriptionName) || (has(self.initProvider) && has(self.initProvider.azurecrSubscriptionName))",message="spec.forProvider.azurecrSubscriptionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	Spec   ServiceendpointAzurecrSpec   `json:"spec"`
	Status ServiceendpointAzurecrStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointAzurecrList contains a list of ServiceendpointAzurecrs
type ServiceendpointAzurecrList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointAzurecr `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointAzurecr_Kind             = "ServiceendpointAzurecr"
	ServiceendpointAzurecr_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointAzurecr_Kind}.String()
	ServiceendpointAzurecr_KindAPIVersion   = ServiceendpointAzurecr_Kind + "." + CRDGroupVersion.String()
	ServiceendpointAzurecr_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointAzurecr_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointAzurecr{}, &ServiceendpointAzurecrList{})
}
