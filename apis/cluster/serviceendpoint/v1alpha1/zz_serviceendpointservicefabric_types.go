// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AzureActiveDirectoryInitParameters struct {

	// - Password for the Azure Active Directory account.
	// Password for the Azure Active Directory account.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	ServerCertificateCommonName *string `json:"serverCertificateCommonName,omitempty" tf:"server_certificate_common_name,omitempty"`

	// Verification mode for the cluster. Possible values are: Thumbprint, CommonName.
	ServerCertificateLookup *string `json:"serverCertificateLookup,omitempty" tf:"server_certificate_lookup,omitempty"`

	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	ServerCertificateThumbprint *string `json:"serverCertificateThumbprint,omitempty" tf:"server_certificate_thumbprint,omitempty"`

	// - Specify an Azure Active Directory account.
	// Specify an Azure Active Directory account.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AzureActiveDirectoryObservation struct {

	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	ServerCertificateCommonName *string `json:"serverCertificateCommonName,omitempty" tf:"server_certificate_common_name,omitempty"`

	// Verification mode for the cluster. Possible values are: Thumbprint, CommonName.
	ServerCertificateLookup *string `json:"serverCertificateLookup,omitempty" tf:"server_certificate_lookup,omitempty"`

	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	ServerCertificateThumbprint *string `json:"serverCertificateThumbprint,omitempty" tf:"server_certificate_thumbprint,omitempty"`

	// - Specify an Azure Active Directory account.
	// Specify an Azure Active Directory account.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AzureActiveDirectoryParameters struct {

	// - Password for the Azure Active Directory account.
	// Password for the Azure Active Directory account.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// +kubebuilder:validation:Optional
	ServerCertificateCommonName *string `json:"serverCertificateCommonName,omitempty" tf:"server_certificate_common_name,omitempty"`

	// Verification mode for the cluster. Possible values are: Thumbprint, CommonName.
	// +kubebuilder:validation:Optional
	ServerCertificateLookup *string `json:"serverCertificateLookup" tf:"server_certificate_lookup,omitempty"`

	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// +kubebuilder:validation:Optional
	ServerCertificateThumbprint *string `json:"serverCertificateThumbprint,omitempty" tf:"server_certificate_thumbprint,omitempty"`

	// - Specify an Azure Active Directory account.
	// Specify an Azure Active Directory account.
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type CertificateInitParameters struct {

	// Password for the certificate.
	// Password for the certificate.
	ClientCertificatePasswordSecretRef *v1.SecretKeySelector `json:"clientCertificatePasswordSecretRef,omitempty" tf:"-"`

	// Base64 encoding of the cluster's client certificate file.
	// Base64 encoding of the cluster's client certificate file.
	ClientCertificateSecretRef v1.SecretKeySelector `json:"clientCertificateSecretRef" tf:"-"`

	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	ServerCertificateCommonName *string `json:"serverCertificateCommonName,omitempty" tf:"server_certificate_common_name,omitempty"`

	// Verification mode for the cluster. Possible values are: Thumbprint, CommonName.
	ServerCertificateLookup *string `json:"serverCertificateLookup,omitempty" tf:"server_certificate_lookup,omitempty"`

	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	ServerCertificateThumbprint *string `json:"serverCertificateThumbprint,omitempty" tf:"server_certificate_thumbprint,omitempty"`
}

type CertificateObservation struct {

	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	ServerCertificateCommonName *string `json:"serverCertificateCommonName,omitempty" tf:"server_certificate_common_name,omitempty"`

	// Verification mode for the cluster. Possible values are: Thumbprint, CommonName.
	ServerCertificateLookup *string `json:"serverCertificateLookup,omitempty" tf:"server_certificate_lookup,omitempty"`

	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	ServerCertificateThumbprint *string `json:"serverCertificateThumbprint,omitempty" tf:"server_certificate_thumbprint,omitempty"`
}

type CertificateParameters struct {

	// Password for the certificate.
	// Password for the certificate.
	// +kubebuilder:validation:Optional
	ClientCertificatePasswordSecretRef *v1.SecretKeySelector `json:"clientCertificatePasswordSecretRef,omitempty" tf:"-"`

	// Base64 encoding of the cluster's client certificate file.
	// Base64 encoding of the cluster's client certificate file.
	// +kubebuilder:validation:Optional
	ClientCertificateSecretRef v1.SecretKeySelector `json:"clientCertificateSecretRef" tf:"-"`

	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')
	// +kubebuilder:validation:Optional
	ServerCertificateCommonName *string `json:"serverCertificateCommonName,omitempty" tf:"server_certificate_common_name,omitempty"`

	// Verification mode for the cluster. Possible values are: Thumbprint, CommonName.
	// +kubebuilder:validation:Optional
	ServerCertificateLookup *string `json:"serverCertificateLookup" tf:"server_certificate_lookup,omitempty"`

	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')
	// +kubebuilder:validation:Optional
	ServerCertificateThumbprint *string `json:"serverCertificateThumbprint,omitempty" tf:"server_certificate_thumbprint,omitempty"`
}

type NoneInitParameters struct {

	// Fully qualified domain SPN for gMSA account. This is applicable only if unsecured option is disabled.
	// Fully qualified domain SPN for gMSA account. This is applicable only if `unsecured` option is disabled.
	ClusterSpn *string `json:"clusterSpn,omitempty" tf:"cluster_spn,omitempty"`

	// Skip using windows security for authentication.
	// Skip using windows security for authentication.
	Unsecured *bool `json:"unsecured,omitempty" tf:"unsecured,omitempty"`
}

type NoneObservation struct {

	// Fully qualified domain SPN for gMSA account. This is applicable only if unsecured option is disabled.
	// Fully qualified domain SPN for gMSA account. This is applicable only if `unsecured` option is disabled.
	ClusterSpn *string `json:"clusterSpn,omitempty" tf:"cluster_spn,omitempty"`

	// Skip using windows security for authentication.
	// Skip using windows security for authentication.
	Unsecured *bool `json:"unsecured,omitempty" tf:"unsecured,omitempty"`
}

type NoneParameters struct {

	// Fully qualified domain SPN for gMSA account. This is applicable only if unsecured option is disabled.
	// Fully qualified domain SPN for gMSA account. This is applicable only if `unsecured` option is disabled.
	// +kubebuilder:validation:Optional
	ClusterSpn *string `json:"clusterSpn,omitempty" tf:"cluster_spn,omitempty"`

	// Skip using windows security for authentication.
	// Skip using windows security for authentication.
	// +kubebuilder:validation:Optional
	Unsecured *bool `json:"unsecured,omitempty" tf:"unsecured,omitempty"`
}

type ServiceendpointServicefabricInitParameters struct {

	// An azure_active_directory block as documented below.
	AzureActiveDirectory *AzureActiveDirectoryInitParameters `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory,omitempty"`

	// A certificate block as documented below.
	Certificate *CertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Client connection endpoint for the cluster. Prefix the value with tcp://;. This value overrides the publish profile.
	// Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.
	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A none block as documented below.
	None *NoneInitParameters `json:"none,omitempty" tf:"none,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointServicefabricObservation struct {

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// An azure_active_directory block as documented below.
	AzureActiveDirectory *AzureActiveDirectoryObservation `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory,omitempty"`

	// A certificate block as documented below.
	Certificate *CertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Client connection endpoint for the cluster. Prefix the value with tcp://;. This value overrides the publish profile.
	// Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.
	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A none block as documented below.
	None *NoneObservation `json:"none,omitempty" tf:"none,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The Service Endpoint name.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointServicefabricParameters struct {

	// An azure_active_directory block as documented below.
	// +kubebuilder:validation:Optional
	AzureActiveDirectory *AzureActiveDirectoryParameters `json:"azureActiveDirectory,omitempty" tf:"azure_active_directory,omitempty"`

	// A certificate block as documented below.
	// +kubebuilder:validation:Optional
	Certificate *CertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Client connection endpoint for the cluster. Prefix the value with tcp://;. This value overrides the publish profile.
	// Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.
	// +kubebuilder:validation:Optional
	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint,omitempty"`

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A none block as documented below.
	// +kubebuilder:validation:Optional
	None *NoneParameters `json:"none,omitempty" tf:"none,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The Service Endpoint name.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

// ServiceendpointServicefabricSpec defines the desired state of ServiceendpointServicefabric
type ServiceendpointServicefabricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceendpointServicefabricParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointServicefabricInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointServicefabricStatus defines the observed state of ServiceendpointServicefabric.
type ServiceendpointServicefabricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointServicefabricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointServicefabric is the Schema for the ServiceendpointServicefabrics API. Manages a Service Fabric service endpoint Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceendpointServicefabric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterEndpoint) || (has(self.initProvider) && has(self.initProvider.clusterEndpoint))",message="spec.forProvider.clusterEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	Spec   ServiceendpointServicefabricSpec   `json:"spec"`
	Status ServiceendpointServicefabricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointServicefabricList contains a list of ServiceendpointServicefabrics
type ServiceendpointServicefabricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointServicefabric `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointServicefabric_Kind             = "ServiceendpointServicefabric"
	ServiceendpointServicefabric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointServicefabric_Kind}.String()
	ServiceendpointServicefabric_KindAPIVersion   = ServiceendpointServicefabric_Kind + "." + CRDGroupVersion.String()
	ServiceendpointServicefabric_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointServicefabric_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointServicefabric{}, &ServiceendpointServicefabricList{})
}
