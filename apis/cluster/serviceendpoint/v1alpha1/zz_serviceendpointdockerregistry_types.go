// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ServiceendpointDockerregistryInitParameters struct {

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The email for Docker account user.
	// The DockerRegistry email address which should be used.
	DockerEmail *string `json:"dockerEmail,omitempty" tf:"docker_email,omitempty"`

	// The password for the account user identified above.
	// The DockerRegistry password which should be used.
	DockerPasswordSecretRef *v1.SecretKeySelector `json:"dockerPasswordSecretRef,omitempty" tf:"-"`

	// The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
	// The DockerRegistry registry which should be used.
	DockerRegistry *string `json:"dockerRegistry,omitempty" tf:"docker_registry,omitempty"`

	// The identifier of the Docker account user.
	// The DockerRegistry username which should be used.
	DockerUsername *string `json:"dockerUsername,omitempty" tf:"docker_username,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Can be "DockerHub" or "Others" (Default "DockerHub")
	RegistryType *string `json:"registryType,omitempty" tf:"registry_type,omitempty"`

	// The name you will use to refer to this service connection in task inputs.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointDockerregistryObservation struct {

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The email for Docker account user.
	// The DockerRegistry email address which should be used.
	DockerEmail *string `json:"dockerEmail,omitempty" tf:"docker_email,omitempty"`

	// The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
	// The DockerRegistry registry which should be used.
	DockerRegistry *string `json:"dockerRegistry,omitempty" tf:"docker_registry,omitempty"`

	// The identifier of the Docker account user.
	// The DockerRegistry username which should be used.
	DockerUsername *string `json:"dockerUsername,omitempty" tf:"docker_username,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Can be "DockerHub" or "Others" (Default "DockerHub")
	RegistryType *string `json:"registryType,omitempty" tf:"registry_type,omitempty"`

	// The name you will use to refer to this service connection in task inputs.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

type ServiceendpointDockerregistryParameters struct {

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The email for Docker account user.
	// The DockerRegistry email address which should be used.
	// +kubebuilder:validation:Optional
	DockerEmail *string `json:"dockerEmail,omitempty" tf:"docker_email,omitempty"`

	// The password for the account user identified above.
	// The DockerRegistry password which should be used.
	// +kubebuilder:validation:Optional
	DockerPasswordSecretRef *v1.SecretKeySelector `json:"dockerPasswordSecretRef,omitempty" tf:"-"`

	// The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
	// The DockerRegistry registry which should be used.
	// +kubebuilder:validation:Optional
	DockerRegistry *string `json:"dockerRegistry,omitempty" tf:"docker_registry,omitempty"`

	// The identifier of the Docker account user.
	// The DockerRegistry username which should be used.
	// +kubebuilder:validation:Optional
	DockerUsername *string `json:"dockerUsername,omitempty" tf:"docker_username,omitempty"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Can be "DockerHub" or "Others" (Default "DockerHub")
	// +kubebuilder:validation:Optional
	RegistryType *string `json:"registryType,omitempty" tf:"registry_type,omitempty"`

	// The name you will use to refer to this service connection in task inputs.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`
}

// ServiceendpointDockerregistrySpec defines the desired state of ServiceendpointDockerregistry
type ServiceendpointDockerregistrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceendpointDockerregistryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointDockerregistryInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointDockerregistryStatus defines the observed state of ServiceendpointDockerregistry.
type ServiceendpointDockerregistryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointDockerregistryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointDockerregistry is the Schema for the ServiceendpointDockerregistrys API. Manages a Docker Registry service endpoint within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceendpointDockerregistry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	Spec   ServiceendpointDockerregistrySpec   `json:"spec"`
	Status ServiceendpointDockerregistryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointDockerregistryList contains a list of ServiceendpointDockerregistrys
type ServiceendpointDockerregistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointDockerregistry `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointDockerregistry_Kind             = "ServiceendpointDockerregistry"
	ServiceendpointDockerregistry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointDockerregistry_Kind}.String()
	ServiceendpointDockerregistry_KindAPIVersion   = ServiceendpointDockerregistry_Kind + "." + CRDGroupVersion.String()
	ServiceendpointDockerregistry_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointDockerregistry_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointDockerregistry{}, &ServiceendpointDockerregistryList{})
}
