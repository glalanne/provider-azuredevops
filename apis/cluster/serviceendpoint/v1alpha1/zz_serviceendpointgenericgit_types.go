// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ServiceendpointGenericGitInitParameters struct {

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A value indicating whether or not to attempt accessing this git server from Azure Pipelines.
	// A value indicating whether or not to attempt accessing this git server from Azure Pipelines.
	EnablePipelinesAccess *bool `json:"enablePipelinesAccess,omitempty" tf:"enable_pipelines_access,omitempty"`

	// The PAT or password used to authenticate to the git repository.
	// The password or token key to use for the GenericGit git service connection.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The URL of the repository associated with the service endpoint.
	// The server URL of the GenericGit git service connection.
	RepositoryURL *string `json:"repositoryUrl,omitempty" tf:"repository_url,omitempty"`

	// The name of the service endpoint.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The username used to authenticate to the git repository.
	// The username to use for the GenericGit service git connection.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceendpointGenericGitObservation struct {

	// +mapType=granular
	Authorization map[string]*string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// The Service Endpoint description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A value indicating whether or not to attempt accessing this git server from Azure Pipelines.
	// A value indicating whether or not to attempt accessing this git server from Azure Pipelines.
	EnablePipelinesAccess *bool `json:"enablePipelinesAccess,omitempty" tf:"enable_pipelines_access,omitempty"`

	// The ID of the service endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The URL of the repository associated with the service endpoint.
	// The server URL of the GenericGit git service connection.
	RepositoryURL *string `json:"repositoryUrl,omitempty" tf:"repository_url,omitempty"`

	// The name of the service endpoint.
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The username used to authenticate to the git repository.
	// The username to use for the GenericGit service git connection.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceendpointGenericGitParameters struct {

	// The Service Endpoint description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A value indicating whether or not to attempt accessing this git server from Azure Pipelines.
	// A value indicating whether or not to attempt accessing this git server from Azure Pipelines.
	// +kubebuilder:validation:Optional
	EnablePipelinesAccess *bool `json:"enablePipelinesAccess,omitempty" tf:"enable_pipelines_access,omitempty"`

	// The PAT or password used to authenticate to the git repository.
	// The password or token key to use for the GenericGit git service connection.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The ID of the project.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The URL of the repository associated with the service endpoint.
	// The server URL of the GenericGit git service connection.
	// +kubebuilder:validation:Optional
	RepositoryURL *string `json:"repositoryUrl,omitempty" tf:"repository_url,omitempty"`

	// The name of the service endpoint.
	// +kubebuilder:validation:Optional
	ServiceEndpointName *string `json:"serviceEndpointName,omitempty" tf:"service_endpoint_name,omitempty"`

	// The username used to authenticate to the git repository.
	// The username to use for the GenericGit service git connection.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// ServiceendpointGenericGitSpec defines the desired state of ServiceendpointGenericGit
type ServiceendpointGenericGitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceendpointGenericGitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceendpointGenericGitInitParameters `json:"initProvider,omitempty"`
}

// ServiceendpointGenericGitStatus defines the observed state of ServiceendpointGenericGit.
type ServiceendpointGenericGitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceendpointGenericGitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceendpointGenericGit is the Schema for the ServiceendpointGenericGits API. Manages an Other Git service endpoint within Azure DevOps, which can be used to authenticate to any external git service using basic authentication via a username and password.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServiceendpointGenericGit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repositoryUrl) || (has(self.initProvider) && has(self.initProvider.repositoryUrl))",message="spec.forProvider.repositoryUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceEndpointName) || (has(self.initProvider) && has(self.initProvider.serviceEndpointName))",message="spec.forProvider.serviceEndpointName is a required parameter"
	Spec   ServiceendpointGenericGitSpec   `json:"spec"`
	Status ServiceendpointGenericGitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceendpointGenericGitList contains a list of ServiceendpointGenericGits
type ServiceendpointGenericGitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceendpointGenericGit `json:"items"`
}

// Repository type metadata.
var (
	ServiceendpointGenericGit_Kind             = "ServiceendpointGenericGit"
	ServiceendpointGenericGit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceendpointGenericGit_Kind}.String()
	ServiceendpointGenericGit_KindAPIVersion   = ServiceendpointGenericGit_Kind + "." + CRDGroupVersion.String()
	ServiceendpointGenericGit_GroupVersionKind = CRDGroupVersion.WithKind(ServiceendpointGenericGit_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceendpointGenericGit{}, &ServiceendpointGenericGitList{})
}
