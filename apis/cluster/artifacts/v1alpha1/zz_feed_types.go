// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type FeaturesInitParameters struct {

	// Determines if Feed should be Permanently removed, Defaults to false
	PermanentDelete *bool `json:"permanentDelete,omitempty" tf:"permanent_delete,omitempty"`

	// Determines if Feed should be Restored during creation (if possible), Defaults to false
	Restore *bool `json:"restore,omitempty" tf:"restore,omitempty"`
}

type FeaturesObservation struct {

	// Determines if Feed should be Permanently removed, Defaults to false
	PermanentDelete *bool `json:"permanentDelete,omitempty" tf:"permanent_delete,omitempty"`

	// Determines if Feed should be Restored during creation (if possible), Defaults to false
	Restore *bool `json:"restore,omitempty" tf:"restore,omitempty"`
}

type FeaturesParameters struct {

	// Determines if Feed should be Permanently removed, Defaults to false
	// +kubebuilder:validation:Optional
	PermanentDelete *bool `json:"permanentDelete,omitempty" tf:"permanent_delete,omitempty"`

	// Determines if Feed should be Restored during creation (if possible), Defaults to false
	// +kubebuilder:validation:Optional
	Restore *bool `json:"restore,omitempty" tf:"restore,omitempty"`
}

type FeedInitParameters struct {

	// A features blocks as documented below.
	Features []FeaturesInitParameters `json:"features,omitempty" tf:"features,omitempty"`

	// The name of the Feed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

type FeedObservation struct {

	// A features blocks as documented below.
	Features []FeaturesObservation `json:"features,omitempty" tf:"features,omitempty"`

	// The ID of the Feed.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the Feed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type FeedParameters struct {

	// A features blocks as documented below.
	// +kubebuilder:validation:Optional
	Features []FeaturesParameters `json:"features,omitempty" tf:"features,omitempty"`

	// The name of the Feed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// FeedSpec defines the desired state of Feed
type FeedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeedParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FeedInitParameters `json:"initProvider,omitempty"`
}

// FeedStatus defines the observed state of Feed.
type FeedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Feed is the Schema for the Feeds API. Manages Feed within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type Feed struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   FeedSpec   `json:"spec"`
	Status FeedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeedList contains a list of Feeds
type FeedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Feed `json:"items"`
}

// Repository type metadata.
var (
	Feed_Kind             = "Feed"
	Feed_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Feed_Kind}.String()
	Feed_KindAPIVersion   = Feed_Kind + "." + CRDGroupVersion.String()
	Feed_GroupVersionKind = CRDGroupVersion.WithKind(Feed_Kind)
)

func init() {
	SchemeBuilder.Register(&Feed{}, &FeedList{})
}
