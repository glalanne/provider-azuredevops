// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AgentPoolInitParameters struct {

	// Specifies whether a queue should be automatically provisioned for each project collection. Defaults to false.
	AutoProvision *bool `json:"autoProvision,omitempty" tf:"auto_provision,omitempty"`

	// Specifies whether or not agents within the pool should be automatically updated. Defaults to true.
	AutoUpdate *bool `json:"autoUpdate,omitempty" tf:"auto_update,omitempty"`

	// The name of the agent pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether the agent pool type is Automation or Deployment. Defaults to automation.
	PoolType *string `json:"poolType,omitempty" tf:"pool_type,omitempty"`
}

type AgentPoolObservation struct {

	// Specifies whether a queue should be automatically provisioned for each project collection. Defaults to false.
	AutoProvision *bool `json:"autoProvision,omitempty" tf:"auto_provision,omitempty"`

	// Specifies whether or not agents within the pool should be automatically updated. Defaults to true.
	AutoUpdate *bool `json:"autoUpdate,omitempty" tf:"auto_update,omitempty"`

	// The ID of the agent pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the agent pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether the agent pool type is Automation or Deployment. Defaults to automation.
	PoolType *string `json:"poolType,omitempty" tf:"pool_type,omitempty"`
}

type AgentPoolParameters struct {

	// Specifies whether a queue should be automatically provisioned for each project collection. Defaults to false.
	// +kubebuilder:validation:Optional
	AutoProvision *bool `json:"autoProvision,omitempty" tf:"auto_provision,omitempty"`

	// Specifies whether or not agents within the pool should be automatically updated. Defaults to true.
	// +kubebuilder:validation:Optional
	AutoUpdate *bool `json:"autoUpdate,omitempty" tf:"auto_update,omitempty"`

	// The name of the agent pool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specifies whether the agent pool type is Automation or Deployment. Defaults to automation.
	// +kubebuilder:validation:Optional
	PoolType *string `json:"poolType,omitempty" tf:"pool_type,omitempty"`
}

// AgentPoolSpec defines the desired state of AgentPool
type AgentPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AgentPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AgentPoolInitParameters `json:"initProvider,omitempty"`
}

// AgentPoolStatus defines the observed state of AgentPool.
type AgentPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AgentPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AgentPool is the Schema for the AgentPools API. Manages an agent pool within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type AgentPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AgentPoolSpec   `json:"spec"`
	Status AgentPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AgentPoolList contains a list of AgentPools
type AgentPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AgentPool `json:"items"`
}

// Repository type metadata.
var (
	AgentPool_Kind             = "AgentPool"
	AgentPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AgentPool_Kind}.String()
	AgentPool_KindAPIVersion   = AgentPool_Kind + "." + CRDGroupVersion.String()
	AgentPool_GroupVersionKind = CRDGroupVersion.WithKind(AgentPool_Kind)
)

func init() {
	SchemeBuilder.Register(&AgentPool{}, &AgentPoolList{})
}
