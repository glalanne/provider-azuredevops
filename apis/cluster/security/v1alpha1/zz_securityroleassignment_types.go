// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type SecurityroleAssignmentInitParameters struct {

	// The ID of the identity to authorize.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("origin_id",false)
	IdentityID *string `json:"identityId,omitempty" tf:"identity_id,omitempty"`

	// Reference to a Group in security to populate identityId.
	// +kubebuilder:validation:Optional
	IdentityIDRef *v1.Reference `json:"identityIdRef,omitempty" tf:"-"`

	// Selector for a Group in security to populate identityId.
	// +kubebuilder:validation:Optional
	IdentityIDSelector *v1.Selector `json:"identityIdSelector,omitempty" tf:"-"`

	// The ID of the resource on which the role is to be assigned. Changing this forces a new resource to be created.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Name of the role to assign.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The scope in which this assignment should exist.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type SecurityroleAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the identity to authorize.
	IdentityID *string `json:"identityId,omitempty" tf:"identity_id,omitempty"`

	// The ID of the resource on which the role is to be assigned. Changing this forces a new resource to be created.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Name of the role to assign.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The scope in which this assignment should exist.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type SecurityroleAssignmentParameters struct {

	// The ID of the identity to authorize.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("origin_id",false)
	// +kubebuilder:validation:Optional
	IdentityID *string `json:"identityId,omitempty" tf:"identity_id,omitempty"`

	// Reference to a Group in security to populate identityId.
	// +kubebuilder:validation:Optional
	IdentityIDRef *v1.Reference `json:"identityIdRef,omitempty" tf:"-"`

	// Selector for a Group in security to populate identityId.
	// +kubebuilder:validation:Optional
	IdentityIDSelector *v1.Selector `json:"identityIdSelector,omitempty" tf:"-"`

	// The ID of the resource on which the role is to be assigned. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Name of the role to assign.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The scope in which this assignment should exist.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// SecurityroleAssignmentSpec defines the desired state of SecurityroleAssignment
type SecurityroleAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityroleAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityroleAssignmentInitParameters `json:"initProvider,omitempty"`
}

// SecurityroleAssignmentStatus defines the observed state of SecurityroleAssignment.
type SecurityroleAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityroleAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecurityroleAssignment is the Schema for the SecurityroleAssignments API. Manages assignment of security roles to various resources within Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type SecurityroleAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleName) || (has(self.initProvider) && has(self.initProvider.roleName))",message="spec.forProvider.roleName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   SecurityroleAssignmentSpec   `json:"spec"`
	Status SecurityroleAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityroleAssignmentList contains a list of SecurityroleAssignments
type SecurityroleAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityroleAssignment `json:"items"`
}

// Repository type metadata.
var (
	SecurityroleAssignment_Kind             = "SecurityroleAssignment"
	SecurityroleAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityroleAssignment_Kind}.String()
	SecurityroleAssignment_KindAPIVersion   = SecurityroleAssignment_Kind + "." + CRDGroupVersion.String()
	SecurityroleAssignment_GroupVersionKind = CRDGroupVersion.WithKind(SecurityroleAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityroleAssignment{}, &SecurityroleAssignmentList{})
}
