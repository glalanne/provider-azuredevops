// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type TeamAdministratorsInitParameters struct {

	// List of subject descriptors to define administrators of the team.
	// +listType=set
	Administrators []*string `json:"administrators,omitempty" tf:"administrators,omitempty"`

	// The mode how the resource manages team administrators. Possible values: add, overwrite. Defaults to add.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The Project ID.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("project_id",false)
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Team in security to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Team in security to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The ID of the Team.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in security to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team in security to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

type TeamAdministratorsObservation struct {

	// List of subject descriptors to define administrators of the team.
	// +listType=set
	Administrators []*string `json:"administrators,omitempty" tf:"administrators,omitempty"`

	// A random ID for this resource. There is no "natural" ID, so a random one is assigned.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The mode how the resource manages team administrators. Possible values: add, overwrite. Defaults to add.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The Project ID.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The ID of the Team.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type TeamAdministratorsParameters struct {

	// List of subject descriptors to define administrators of the team.
	// +kubebuilder:validation:Optional
	// +listType=set
	Administrators []*string `json:"administrators,omitempty" tf:"administrators,omitempty"`

	// The mode how the resource manages team administrators. Possible values: add, overwrite. Defaults to add.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The Project ID.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("project_id",false)
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Team in security to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Team in security to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// The ID of the Team.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/security/v1alpha1.Team
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in security to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team in security to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

// TeamAdministratorsSpec defines the desired state of TeamAdministrators
type TeamAdministratorsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamAdministratorsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamAdministratorsInitParameters `json:"initProvider,omitempty"`
}

// TeamAdministratorsStatus defines the observed state of TeamAdministrators.
type TeamAdministratorsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamAdministratorsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TeamAdministrators is the Schema for the TeamAdministratorss API. Manages administrators of a team within a project in a Azure DevOps organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type TeamAdministrators struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.administrators) || (has(self.initProvider) && has(self.initProvider.administrators))",message="spec.forProvider.administrators is a required parameter"
	Spec   TeamAdministratorsSpec   `json:"spec"`
	Status TeamAdministratorsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamAdministratorsList contains a list of TeamAdministratorss
type TeamAdministratorsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamAdministrators `json:"items"`
}

// Repository type metadata.
var (
	TeamAdministrators_Kind             = "TeamAdministrators"
	TeamAdministrators_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamAdministrators_Kind}.String()
	TeamAdministrators_KindAPIVersion   = TeamAdministrators_Kind + "." + CRDGroupVersion.String()
	TeamAdministrators_GroupVersionKind = CRDGroupVersion.WithKind(TeamAdministrators_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamAdministrators{}, &TeamAdministratorsList{})
}
