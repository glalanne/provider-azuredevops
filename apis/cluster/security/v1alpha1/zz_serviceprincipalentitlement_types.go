// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ServicePrincipalEntitlementInitParameters struct {

	// Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.
	AccountLicenseType *string `json:"accountLicenseType,omitempty" tf:"account_license_type,omitempty"`

	// The source of the licensing (e.g. Account. MSDN etc.) Possible values are: account (Default), auto, msdn, none, profile, trial
	LicensingSource *string `json:"licensingSource,omitempty" tf:"licensing_source,omitempty"`

	// The type of source provider for the origin identifier.
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`
}

type ServicePrincipalEntitlementObservation struct {

	// Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.
	AccountLicenseType *string `json:"accountLicenseType,omitempty" tf:"account_license_type,omitempty"`

	// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.
	Descriptor *string `json:"descriptor,omitempty" tf:"descriptor,omitempty"`

	// The display name of service principal.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the Service Principal Entitlement.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The source of the licensing (e.g. Account. MSDN etc.) Possible values are: account (Default), auto, msdn, none, profile, trial
	LicensingSource *string `json:"licensingSource,omitempty" tf:"licensing_source,omitempty"`

	// The type of source provider for the origin identifier.
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`
}

type ServicePrincipalEntitlementParameters struct {

	// Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.
	// +kubebuilder:validation:Optional
	AccountLicenseType *string `json:"accountLicenseType,omitempty" tf:"account_license_type,omitempty"`

	// The source of the licensing (e.g. Account. MSDN etc.) Possible values are: account (Default), auto, msdn, none, profile, trial
	// +kubebuilder:validation:Optional
	LicensingSource *string `json:"licensingSource,omitempty" tf:"licensing_source,omitempty"`

	// The type of source provider for the origin identifier.
	// +kubebuilder:validation:Optional
	Origin *string `json:"origin,omitempty" tf:"origin,omitempty"`

	// The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.
	// +kubebuilder:validation:Optional
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`
}

// ServicePrincipalEntitlementSpec defines the desired state of ServicePrincipalEntitlement
type ServicePrincipalEntitlementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicePrincipalEntitlementParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServicePrincipalEntitlementInitParameters `json:"initProvider,omitempty"`
}

// ServicePrincipalEntitlementStatus defines the observed state of ServicePrincipalEntitlement.
type ServicePrincipalEntitlementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicePrincipalEntitlementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServicePrincipalEntitlement is the Schema for the ServicePrincipalEntitlements API. Manages a Service Principal Entitlement.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type ServicePrincipalEntitlement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.originId) || (has(self.initProvider) && has(self.initProvider.originId))",message="spec.forProvider.originId is a required parameter"
	Spec   ServicePrincipalEntitlementSpec   `json:"spec"`
	Status ServicePrincipalEntitlementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePrincipalEntitlementList contains a list of ServicePrincipalEntitlements
type ServicePrincipalEntitlementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicePrincipalEntitlement `json:"items"`
}

// Repository type metadata.
var (
	ServicePrincipalEntitlement_Kind             = "ServicePrincipalEntitlement"
	ServicePrincipalEntitlement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServicePrincipalEntitlement_Kind}.String()
	ServicePrincipalEntitlement_KindAPIVersion   = ServicePrincipalEntitlement_Kind + "." + CRDGroupVersion.String()
	ServicePrincipalEntitlement_GroupVersionKind = CRDGroupVersion.WithKind(ServicePrincipalEntitlement_Kind)
)

func init() {
	SchemeBuilder.Register(&ServicePrincipalEntitlement{}, &ServicePrincipalEntitlementList{})
}
