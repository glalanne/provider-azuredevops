// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type BuildDefinitionPermissionsInitParameters struct {

	// The id of the build definition to assign the permissions.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/pipelines/v1alpha1.BuildDefinition
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	BuildDefinitionID *string `json:"buildDefinitionId,omitempty" tf:"build_definition_id,omitempty"`

	// Reference to a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDRef *v1.Reference `json:"buildDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDSelector *v1.Selector `json:"buildDefinitionIdSelector,omitempty" tf:"-"`

	// the permissions to assign. The following permissions are available.
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The group principal to assign the permissions.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The ID of the project to assign the permissions.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Replace (true) or merge (false) the permissions. Default: true.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type BuildDefinitionPermissionsObservation struct {

	// The id of the build definition to assign the permissions.
	BuildDefinitionID *string `json:"buildDefinitionId,omitempty" tf:"build_definition_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the permissions to assign. The following permissions are available.
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The group principal to assign the permissions.
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The ID of the project to assign the permissions.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Replace (true) or merge (false) the permissions. Default: true.
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

type BuildDefinitionPermissionsParameters struct {

	// The id of the build definition to assign the permissions.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/pipelines/v1alpha1.BuildDefinition
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	BuildDefinitionID *string `json:"buildDefinitionId,omitempty" tf:"build_definition_id,omitempty"`

	// Reference to a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDRef *v1.Reference `json:"buildDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a BuildDefinition in pipelines to populate buildDefinitionId.
	// +kubebuilder:validation:Optional
	BuildDefinitionIDSelector *v1.Selector `json:"buildDefinitionIdSelector,omitempty" tf:"-"`

	// the permissions to assign. The following permissions are available.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Permissions map[string]*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The group principal to assign the permissions.
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// The ID of the project to assign the permissions.
	// +crossplane:generate:reference:type=github.com/glalanne/provider-azuredevops/apis/cluster/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Replace (true) or merge (false) the permissions. Default: true.
	// +kubebuilder:validation:Optional
	Replace *bool `json:"replace,omitempty" tf:"replace,omitempty"`
}

// BuildDefinitionPermissionsSpec defines the desired state of BuildDefinitionPermissions
type BuildDefinitionPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BuildDefinitionPermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BuildDefinitionPermissionsInitParameters `json:"initProvider,omitempty"`
}

// BuildDefinitionPermissionsStatus defines the observed state of BuildDefinitionPermissions.
type BuildDefinitionPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BuildDefinitionPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BuildDefinitionPermissions is the Schema for the BuildDefinitionPermissionss API. Manages permissions for a AzureDevOps Build Definition
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type BuildDefinitionPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	Spec   BuildDefinitionPermissionsSpec   `json:"spec"`
	Status BuildDefinitionPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BuildDefinitionPermissionsList contains a list of BuildDefinitionPermissionss
type BuildDefinitionPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BuildDefinitionPermissions `json:"items"`
}

// Repository type metadata.
var (
	BuildDefinitionPermissions_Kind             = "BuildDefinitionPermissions"
	BuildDefinitionPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BuildDefinitionPermissions_Kind}.String()
	BuildDefinitionPermissions_KindAPIVersion   = BuildDefinitionPermissions_Kind + "." + CRDGroupVersion.String()
	BuildDefinitionPermissions_GroupVersionKind = CRDGroupVersion.WithKind(BuildDefinitionPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&BuildDefinitionPermissions{}, &BuildDefinitionPermissionsList{})
}
