name: microsoft/azuredevops
resources:
    azuredevops_agent_pool:
        subCategory: ""
        description: Manages an agent pool within Azure DevOps organization.
        name: azuredevops_agent_pool
        title: azuredevops_agent_pool
        examples:
            - name: example
              manifest: |-
                {
                  "auto_provision": false,
                  "auto_update": false,
                  "name": "Example-pool"
                }
        argumentDocs:
            auto_provision: '- (Optional) Specifies whether a queue should be automatically provisioned for each project collection. Defaults to false.'
            auto_update: '- (Optional) Specifies whether or not agents within the pool should be automatically updated. Defaults to true.'
            id: '- The ID of the agent pool.'
            name: '- (Required) The name of the agent pool.'
            pool_type: '- (Optional) Specifies whether the agent pool type is Automation or Deployment. Defaults to automation.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Agent Pool.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Agent Pool.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Agent Pool.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Agent Pool.'
        importStatements: []
    azuredevops_agent_queue:
        subCategory: ""
        description: Manages an agent queue within Azure DevOps project.
        name: azuredevops_agent_queue
        title: azuredevops_agent_queue
        examples:
            - name: example
              manifest: |-
                {
                  "agent_pool_id": "${data.azuredevops_agent_pool.example.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                agent_pool_id: data.azuredevops_agent_pool.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_resource_authorization.example: |-
                    {
                      "authorized": true,
                      "project_id": "${azuredevops_project.example.id}",
                      "resource_id": "${azuredevops_agent_queue.example.id}",
                      "type": "queue"
                    }
            - name: example
              manifest: |-
                {
                  "name": "example-queue",
                  "project_id": "${data.azuredevops_project.example.id}"
                }
              references:
                project_id: data.azuredevops_project.example.id
        argumentDocs:
            agent_pool_id: '- (Optional) The ID of the organization agent pool. Conflicts with name.'
            id: '- The ID of the agent queue reference.'
            name: '- (Optional) The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with agent_pool_id.'
            project_id: '- (Required) The ID of the project in which to create the resource.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Agent Queue.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Agent Queue.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Agent Queue.'
        importStatements: []
    azuredevops_area_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Area (Component)
        name: azuredevops_area_permissions
        title: azuredevops_area_permissions
        examples:
            - name: example-root-permissions
              manifest: |-
                {
                  "path": "/",
                  "permissions": {
                    "CREATE_CHILDREN": "Deny",
                    "DELETE": "Deny",
                    "GENERIC_READ": "Allow",
                    "WORK_ITEM_READ": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-project-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Optional) The name of the branch to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Area Permissions.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Area Permissions.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Area Permissions.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Area Permissions.'
        importStatements: []
    azuredevops_branch_policy_auto_reviewers:
        subCategory: ""
        description: Manages required reviewer policy branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_auto_reviewers
        title: azuredevops_branch_policy_auto_reviewers
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "auto_reviewer_ids": [
                        "${azuredevops_user_entitlement.example.id}"
                      ],
                      "message": "Auto reviewer",
                      "path_filters": [
                        "*/src/*.ts"
                      ],
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        }
                      ],
                      "submitter_can_vote": false
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.auto_reviewer_ids: azuredevops_user_entitlement.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_user_entitlement.example: |-
                    {
                      "account_license_type": "basic",
                      "principal_name": "mail@email.com"
                    }
        argumentDocs:
            0.scope: (Required) A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            0.scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            0.scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            0.scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            blocking: '- (Optional) A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms "optional" and "required" reviewers. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) A settings block as defined below. Configuration for the policy. This block must be defined exactly once.'
            settings.auto_reviewer_ids: '- (Required) Required reviewers ids. Supports multiples user Ids.'
            settings.message: '- (Optional) Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.'
            settings.minimum_number_of_reviewers: '- (Optional) Minimum number of required reviewers. Defaults to 1.'
            settings.path_filters: '- (Optional) Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.'
            settings.submitter_can_vote: '- (Optional) Controls whether or not the submitter''s vote counts. Defaults to false.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Auto Reviewers Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Auto Reviewers Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Auto Reviewers Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Auto Reviewers Branch Policy.'
        importStatements: []
    azuredevops_branch_policy_build_validation:
        subCategory: ""
        description: Manages a build validation branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_build_validation
        title: azuredevops_branch_policy_build_validation
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "build_definition_id": "${azuredevops_build_definition.example.id}",
                      "display_name": "Example build validation policy",
                      "filename_patterns": [
                        "/WebApp/*",
                        "!/WebApp/Tests/*",
                        "*.cs"
                      ],
                      "queue_on_source_update_only": true,
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ],
                      "valid_duration": 720
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.build_definition_id: azuredevops_build_definition.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_build_definition.example: |-
                    {
                      "name": "Example Build Definition",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository": [
                        {
                          "repo_id": "${azuredevops_git_repository.example.id}",
                          "repo_type": "TfsGit",
                          "yml_path": "azure-pipelines.yml"
                        }
                      ]
                    }
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings: '- (Required) A settings block as defined below. Configuration for the policy. This block must be defined exactly once.'
            settings.build_definition_id: '- (Required) The ID of the build to monitor for the policy.'
            settings.display_name: '- (Required) The display name for the policy.'
            settings.filename_patterns: '- (Optional) If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: ["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.'
            settings.manual_queue_only: '- (Optional) If set to true, the build will need to be manually queued. Defaults to false'
            settings.queue_on_source_update_only: '- (Optional) True if the build should queue on source updates only. Defaults to true.'
            settings.scope: (Required) A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            settings.valid_duration: '- (Optional) The number of minutes for which the build is valid. If 0, the build will not expire. Defaults to 720 (12 hours).'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Build Validation Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Build Validation Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Build Validation Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Build Validation Branch Policy.'
        importStatements: []
    azuredevops_branch_policy_comment_resolution:
        subCategory: ""
        description: Configure a comment resolution policy for your branch within Azure DevOps project.
        name: azuredevops_branch_policy_comment_resolution
        title: azuredevops_branch_policy_comment_resolution
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) A settings block as defined below. Configuration for the policy. This block must be defined exactly once.'
            settings.scope: (Required) A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            settings.scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Comment Resolution Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Comment Resolution Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Comment Resolution Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Comment Resolution Branch Policy.'
        importStatements: []
    azuredevops_branch_policy_merge_types:
        subCategory: ""
        description: Enforces the merge types allowed on a branch.
        name: azuredevops_branch_policy_merge_types
        title: azuredevops_branch_policy_merge_types
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "allow_basic_no_fast_forward": true,
                      "allow_rebase_and_fast_forward": true,
                      "allow_rebase_with_merge": true,
                      "allow_squash": true,
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": null,
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings: '- (Required) A settings block as defined below. Configuration for the policy. This block must be defined exactly once.'
            settings.allow_basic_no_fast_forward: '- (Optional) Allow basic merge with no fast forward. Defaults to false.'
            settings.allow_rebase_and_fast_forward: '- (Optional) Allow rebase with fast forward. Defaults to false.'
            settings.allow_rebase_with_merge: '- (Optional) Allow rebase with merge commit. Defaults to false.'
            settings.allow_squash: '- (Optional) Allow squash merge. Defaults to false'
            settings.scope: (Required) A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Merge Types Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Merge Types Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Merge Types Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Merge Types Branch Policy.'
        importStatements: []
    azuredevops_branch_policy_min_reviewers:
        subCategory: ""
        description: Manages a minimum reviewer branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_min_reviewers
        title: azuredevops_branch_policy_min_reviewers
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "allow_completion_with_rejects_or_waits": false,
                      "last_pusher_cannot_approve": true,
                      "on_last_iteration_require_vote": false,
                      "on_push_reset_approved_votes": true,
                      "reviewer_count": 7,
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": null,
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ],
                      "submitter_can_vote": false
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            settings: '- (Required) A settings block as defined below.. This block must be defined exactly once.'
            settings.allow_completion_with_rejects_or_waits: (Optional) Allow completion even if some reviewers vote to wait or reject. Defaults to false.
            settings.last_pusher_cannot_approve: (Optional) Prohibit the most recent pusher from approving their own changes. Defaults to false.
            settings.on_last_iteration_require_vote: (Optional) On last iteration require vote. Defaults to false.
            settings.on_push_reset_all_votes: (Optional) When new changes are pushed reset all code reviewer votes. Defaults to false.
            settings.on_push_reset_approved_votes: (Optional) When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to false.
            settings.reviewer_count: '- (Required) The number of reviewers needed to approve.'
            settings.scope: (Required) A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            settings.submitter_can_vote: '- (Optional) Allow requesters to approve their own changes. Defaults to false.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Minimum Reviewers Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Minimum Reviewers Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Minimum Reviewers Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Minimum Reviewers Branch Policy.'
        importStatements: []
    azuredevops_branch_policy_status_check:
        subCategory: ""
        description: Manages status check branch policy within Azure DevOps project.
        name: azuredevops_branch_policy_status_check
        title: azuredevops_branch_policy_status_check
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "applicability": "conditional",
                      "author_id": "${azuredevops_user_entitlement.example.id}",
                      "display_name": "PreCheck",
                      "invalidate_on_update": true,
                      "name": "Release",
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.author_id: azuredevops_user_entitlement.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "features": {
                        "artifacts": "disabled",
                        "testplans": "disabled"
                      },
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_user_entitlement.example: |-
                    {
                      "account_license_type": "basic",
                      "principal_name": "mail@email.com"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            scope: |-
                (Required) Controls which repositories and branches the policy will be enabled for. This block must be defined
                at least once.
            scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type=DefaultBranch, this should not be defined.'
            scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type=Exact, this should be a qualified ref such as refs/heads/master. If match_type=Prefix, this should be a ref path such as refs/heads/releases.'
            settings: '- (Required) A settings block as defined below. Configuration for the policy. This block must be defined exactly once.'
            settings.["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]: |-
                .
                 2. Paths prefixed with "!" are excluded. Example: ["/WebApp/*", "!/WebApp/Tests/*"]. Order is significant.
            settings.applicability: |-
                - (Optional) Policy applicability. If policy applicability=default, apply unless "Not Applicable"
                status is posted to the pull request. If policy applicability=conditional, policy is applied only after a status
                is posted to the pull request. Possible values default, conditional. Defaults to default.
            settings.author_id: '- (Optional) The authorized user can post the status.'
            settings.display_name: '- (Optional) The display name.'
            settings.filename_patterns: '- (Optional) If a path filter is set, the policy will only apply when files which match the filter are changed. Not setting this field means that the policy is always applied.'
            settings.genre: '- (Optional) The genre of the status to check (see Microsoft Documentation)'
            settings.invalidate_on_update: '- (Optional) Reset status whenever there are new changes.'
            settings.name: '- (Required) The status name to check.'
            settings.scope: '- (Required) A scope block as defined below.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Status Check Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Status Check Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Status Check Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Status Check Branch Policy.'
        importStatements: []
    azuredevops_branch_policy_work_item_linking:
        subCategory: ""
        description: Require associations between branches and a work item within Azure DevOps.
        name: azuredevops_branch_policy_work_item_linking
        title: azuredevops_branch_policy_work_item_linking
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "settings": [
                    {
                      "scope": [
                        {
                          "match_type": "Exact",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "${azuredevops_git_repository.example.default_branch}"
                        },
                        {
                          "match_type": "Prefix",
                          "repository_id": "${azuredevops_git_repository.example.id}",
                          "repository_ref": "refs/heads/releases"
                        },
                        {
                          "match_type": "DefaultBranch"
                        }
                      ]
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                settings.scope.repository_id: azuredevops_git_repository.example.id
                settings.scope.repository_ref: azuredevops_git_repository.example.default_branch
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of branch policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            settings: '- (Required) A settings block as defined below. Configuration for the policy. This block must be defined exactly once.'
            settings.scope: (Required) A scope block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
            settings.scope.match_type: (Optional) The match type to use when applying the policy. Supported values are Exact (default), Prefix or DefaultBranch.
            settings.scope.repository_id: '- (Optional) The repository ID. Needed only if the scope of the policy will be limited to a single repository. If match_type is DefaultBranch, this should not be defined.'
            settings.scope.repository_ref: '- (Optional) The ref pattern to use for the match when match_type other than DefaultBranch. If match_type is Exact, this should be a qualified ref such as refs/heads/master. If match_type is Prefix, this should be a ref path such as refs/heads/releases.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Work Item Linking Branch Policy.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Work Item Linking Branch Policy.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Work Item Linking Branch Policy.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Work Item Linking Branch Policy.'
        importStatements: []
    azuredevops_build_definition:
        subCategory: ""
        description: Manages a Build Definition within Azure DevOps organization.
        name: azuredevops_build_definition
        title: azuredevops_build_definition
        examples:
            - name: example
              manifest: |-
                {
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository": [
                    {
                      "branch_name": "${azuredevops_git_repository.example.default_branch}",
                      "repo_id": "${azuredevops_git_repository.example.id}",
                      "repo_type": "TfsGit",
                      "yml_path": "azure-pipelines.yml"
                    }
                  ],
                  "schedules": [
                    {
                      "branch_filter": [
                        {
                          "exclude": [
                            "test",
                            "regression"
                          ],
                          "include": [
                            "master"
                          ]
                        }
                      ],
                      "days_to_build": [
                        "Wed",
                        "Sun"
                      ],
                      "schedule_only_with_changes": true,
                      "start_hours": 10,
                      "start_minutes": 59,
                      "time_zone": "(UTC) Coordinated Universal Time"
                    }
                  ],
                  "variable": [
                    {
                      "name": "PipelineVariable",
                      "value": "Go Microsoft!"
                    },
                    {
                      "is_secret": true,
                      "name": "PipelineSecret",
                      "secret_value": "ZGV2cw"
                    }
                  ],
                  "variable_groups": [
                    "${azuredevops_variable_group.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.branch_name: azuredevops_git_repository.example.default_branch
                repository.repo_id: azuredevops_git_repository.example.id
                variable_groups: azuredevops_variable_group.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Managed by Terraform",
                      "name": "Example Pipeline Variables",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "FOO",
                          "value": "BAR"
                        }
                      ]
                    }
            - name: example
              manifest: |-
                {
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository": [
                    {
                      "branch_name": "master",
                      "github_enterprise_url": "https://github.company.com",
                      "repo_id": "\u003cGitHub Org\u003e/\u003cRepo Name\u003e",
                      "repo_type": "GitHubEnterprise",
                      "service_connection_id": "${azuredevops_serviceendpoint_github_enterprise.example.id}",
                      "yml_path": "azure-pipelines.yml"
                    }
                  ],
                  "schedules": [
                    {
                      "branch_filter": [
                        {
                          "exclude": [
                            "test",
                            "regression"
                          ],
                          "include": [
                            "main"
                          ]
                        }
                      ],
                      "days_to_build": [
                        "Wed",
                        "Sun"
                      ],
                      "schedule_only_with_changes": true,
                      "start_hours": 10,
                      "start_minutes": 59,
                      "time_zone": "(UTC) Coordinated Universal Time"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.service_connection_id: azuredevops_serviceendpoint_github_enterprise.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_github_enterprise.example: |-
                    {
                      "auth_personal": [
                        {
                          "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        }
                      ],
                      "description": "Managed by Terraform",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "Example GitHub Enterprise",
                      "url": "https://github.contoso.com"
                    }
            - name: example
              manifest: |-
                {
                  "build_completion_trigger": [
                    {
                      "branch_filter": [
                        {
                          "exclude": [
                            "test"
                          ],
                          "include": [
                            "main"
                          ]
                        }
                      ],
                      "build_definition_id": 10
                    }
                  ],
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository": [
                    {
                      "branch_name": "main",
                      "github_enterprise_url": "https://github.company.com",
                      "repo_id": "\u003cGitHub Org\u003e/\u003cRepo Name\u003e",
                      "repo_type": "GitHubEnterprise",
                      "service_connection_id": "${azuredevops_serviceendpoint_github_enterprise.example.id}",
                      "yml_path": "azure-pipelines.yml"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.service_connection_id: azuredevops_serviceendpoint_github_enterprise.example.id
            - name: example
              manifest: |-
                {
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "pull_request_trigger": [
                    {
                      "forks": [
                        {
                          "enabled": false,
                          "share_secrets": false
                        }
                      ],
                      "override": [
                        {
                          "branch_filter": [
                            {
                              "include": [
                                "main"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "repository": [
                    {
                      "branch_name": "main",
                      "repo_id": "\u003cGitHub Org\u003e/\u003cRepo Name\u003e",
                      "repo_type": "GitHub",
                      "service_connection_id": "${data.azuredevops_serviceendpoint_github.example.id}",
                      "yml_path": "azure-pipelines.yml"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.service_connection_id: data.azuredevops_serviceendpoint_github.example.id
            - name: example
              manifest: |-
                {
                  "ci_trigger": [
                    {
                      "use_yaml": false
                    }
                  ],
                  "jobs": [
                    {
                      "condition": "succeededOrFailed()",
                      "name": "Agent Job1",
                      "ref_name": "agent_job1",
                      "target": [
                        {
                          "execution_options": [
                            {
                              "type": "None"
                            }
                          ],
                          "type": "AgentJob"
                        }
                      ]
                    },
                    {
                      "condition": "succeededOrFailed()",
                      "dependencies": [
                        {
                          "scope": "agent_job1"
                        }
                      ],
                      "name": "Agent Job2",
                      "ref_name": "agent_job2",
                      "target": [
                        {
                          "demands": [
                            "git"
                          ],
                          "execution_options": [
                            {
                              "continue_on_error": true,
                              "max_concurrency": 2,
                              "multipliers": "multipliers",
                              "type": "Multi-Configuration"
                            }
                          ],
                          "type": "AgentJob"
                        }
                      ]
                    },
                    {
                      "condition": "succeeded()",
                      "name": "Agentless Job1",
                      "ref_name": "agentless_job1",
                      "target": [
                        {
                          "execution_options": [
                            {
                              "type": "None"
                            }
                          ],
                          "type": "AgentlessJob"
                        }
                      ]
                    },
                    {
                      "condition": "succeeded()",
                      "dependencies": [
                        {
                          "scope": "agent_job2"
                        },
                        {
                          "scope": "agentless_job1"
                        }
                      ],
                      "job_authorization_scope": "project",
                      "name": "Agentless Job2",
                      "ref_name": "agentless_job2",
                      "target": [
                        {
                          "execution_options": [
                            {
                              "continue_on_error": true,
                              "multipliers": "multipliers",
                              "type": "Multi-Configuration"
                            }
                          ],
                          "type": "AgentlessJob"
                        }
                      ]
                    }
                  ],
                  "name": "Example Build Definition",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository": [
                    {
                      "branch_name": "refs/heads/main",
                      "repo_id": "${azuredevops_serviceendpoint_generic_git.example.repository_url}",
                      "repo_type": "Git",
                      "service_connection_id": "${azuredevops_serviceendpoint_generic_git.example.id}",
                      "url": "${azuredevops_serviceendpoint_generic_git.example.repository_url}"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository.repo_id: azuredevops_serviceendpoint_generic_git.example.repository_url
                repository.service_connection_id: azuredevops_serviceendpoint_generic_git.example.id
                repository.url: azuredevops_serviceendpoint_generic_git.example.repository_url
              dependencies:
                azuredevops_serviceendpoint_generic_git.example: |-
                    {
                      "password": "token",
                      "project_id": "${data.azuredevops_project.example.id}",
                      "repository_url": "https://gitlab.com/example/example.git",
                      "service_endpoint_name": "Example Generic Git"
                    }
        argumentDocs:
            agent_pool_name: '- (Optional) The agent pool that should execute the build. Defaults to Azure Pipelines.'
            agent_specification: '- (Optional) The Agent Specification to run the pipelines. Required when repo_type is Git. Example: windows-2019, windows-latest, macos-13 etc.'
            branch_filter.exclude: '- (Optional) List of branch patterns to exclude.'
            branch_filter.include: '- (Optional) List of branch patterns to include.'
            build_completion_trigger: '- (Optional) A build_completion_trigger block as documented below.'
            build_completion_trigger.branch_filter: '- (Required) The branches to include and exclude from the trigger. A branch_filter block as documented below.'
            build_completion_trigger.build_definition_id: '- (Required) The ID of the build pipeline will be triggered.'
            ci_trigger: '- (Optional) A ci_trigger block as documented below.'
            ci_trigger.batch: '- (Optional) If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to true.'
            ci_trigger.branch_filter: '- (Required) The branches to include and exclude from the trigger. A branch_filter block as documented below.'
            ci_trigger.max_concurrent_builds_per_branch: '- (Optional) The number of max builds per branch. Defaults to 1.'
            ci_trigger.override: '- (Optional) Override the azure-pipeline file and use a this configuration for all builds.'
            ci_trigger.path_filter: '- (Optional) Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.'
            ci_trigger.polling_interval: '- (Optional) How often the external repository is polled. Defaults to 0.'
            ci_trigger.polling_job_id: '- (Computed) This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.'
            ci_trigger.use_yaml: '- (Optional) Use the azure-pipeline file for the build configuration. Defaults to false.'
            dependencies.scope: (Required) The job reference name that depends on. Reference to jobs.ref_name
            execution_options.continue_on_error: '- (Optional) Whether to continue the job when an error occurs. Possible values are: true, false.'
            execution_options.max_concurrency: '- (Optional) Limit the number of agents to be used. If job type is AgentlessJob, the concurrency is not configurable and is fixed to 50.'
            execution_options.multipliers: '- (Optional) A list of comma separated configuration variables to use. These are defined on the Variables tab. For example, OperatingSystem, Browser will run the tasks for both variables. Available when execution_options.type is Multi-Configuration.'
            execution_options.type: '- (Required) The execution type of the Job. Possible values are: None, Multi-Configuration, Multi-Agent.'
            features: '- (Optional) A features blocks as documented below.'
            features.skip_first_run: (Optional) Trigger the pipeline to run after the creation. Defaults to true.
            forks.enabled: '- (Required) Build pull requests from forks of this repository.'
            forks.share_secrets: '- (Required) Make secrets available to builds of forks.'
            id: '- The ID of the build definition'
            job_authorization_scope: '- (Optional) The job authorization scope for builds queued against this definition. Possible values are: project, projectCollection. Defaults to projectCollection.'
            jobs: '- (Optional) A jobs blocks as documented below.'
            jobs.allow_scripts_auth_access_option: '- (Optional) Enables scripts and other processes launched by tasks to access the OAuth token through the System.AccessToken variable. Possible values: true, false. Defaults to false. Available when Job type is AgentJob'
            jobs.condition: '- (Required) Specifies when this job should run. Can Custom conditions to specify more complex conditions. Possible values: succeeded(), succeededOrFailed(), always(), failed() etc. More details: Pipeline conditions'
            jobs.dependencies: '- (Optional) A dependencies blocks as documented below. Define the job dependencies.'
            jobs.job_authorization_scope: '- (Optional) The job authorization scope for builds queued against this definition. Possible values are: project, projectCollection. Defaults to projectCollection.'
            jobs.job_cancel_timeout_in_minutes: '- (Optional) The job cancel timeout (in minutes) for builds cancelled by user for this definition. Possible values are between 0 and 60. Defaults to 0.'
            jobs.job_timeout_in_minutes: '- (Optional) The job execution timeout (in minutes) for builds queued against this definition. Possible values are between 0 and 1000000000. Defaults to 0.'
            jobs.name: '- (Required) The name of the job.'
            jobs.ref_name: '- (Required) The reference name of the job, can be used to define the job dependencies.'
            jobs.target: '- (Required) A target blocks as documented below.'
            name: '- (Required) The name of the build definition.'
            path: '- (Optional) The folder path of the build definition.'
            path_filter.exclude: '- (Optional) List of path patterns to exclude.'
            path_filter.include: '- (Optional) List of path patterns to include.'
            project_id: '- (Required) The project ID or project name.'
            pull_request_trigger: '- (Optional) A pull_request_trigger block as documented below.'
            pull_request_trigger.auto_cancel: '- (Optional) . Defaults to true.'
            pull_request_trigger.branch_filter: '- (Required) The branches to include and exclude from the trigger. A branch_filter block as documented below.'
            pull_request_trigger.forks: '- (Required) Set permissions for Forked repositories.'
            pull_request_trigger.initial_branch: '- (Optional) When use_yaml is true set this to the name of the branch that the azure-pipelines.yml exists on. Defaults to Managed by Terraform.'
            pull_request_trigger.override: '- (Optional) Override the azure-pipeline file and use this configuration for all builds.'
            pull_request_trigger.path_filter: '- (Optional) Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.'
            pull_request_trigger.use_yaml: '- (Optional) Use the azure-pipeline file for the build configuration. Defaults to false.'
            queue_status: '- (Optional) The queue status of the build definition. Possible values are: enabled or paused or disabled. Defaults to enabled.'
            repository: '- (Required) A repository block as documented below.'
            repository.branch_name: '- (Optional) The branch name for which builds are triggered. Defaults to master.'
            repository.github_enterprise_url: '- (Optional) The Github Enterprise URL. Used if repo_type is GithubEnterprise. Conflict with url'
            repository.repo_id: '- (Required) The id of the repository. For TfsGit repos, this is simply the ID of the repository. For Github repos, this will take the form of <GitHub Org>/<Repo Name>. For Bitbucket repos, this will take the form of <Workspace ID>/<Repo Name>.'
            repository.repo_type: '- (Required) The repository type. Possible values are: GitHub or TfsGit or Bitbucket or GitHub Enterprise or Git. Defaults to GitHub. If repo_type is GitHubEnterprise, must use existing project and GitHub Enterprise service connection.'
            repository.report_build_status: '- (Optional) Report build status. Default is true.'
            repository.service_connection_id: '- (Optional) The service connection ID. Used if the repo_type is GitHub or GitHubEnterprise.'
            repository.url: '- (Optional) The URL of the Git repository. Used if repo_type is Git. Conflict with github_enterprise_url'
            repository.yml_path: '- (Optional) The path of the Yaml file describing the build definition.'
            revision: '- The revision of the build definition'
            schedules.branch_filter: '- A branch_filter block as defined below.'
            schedules.days_to_build: ': (Required) When to build. Possible values are: Mon, Tue, Wed, Thu, Fri, Sat, Sun.'
            schedules.schedule_job_id: '- The ID of the schedule job'
            schedules.schedule_only_with_changes: ': (Optional) Schedule builds if the source or pipeline has changed. Defaults to true.'
            schedules.start_hours: ': (Optional) Build start hour. Possible values are: 0 ~ 23. Defaults to 0.'
            schedules.start_minutes: ': (Optional) Build start minute. Possible values are: 0 ~ 59. Defaults to 0.'
            schedules.time_zone: |-
                : (Optional) Build time zone. Defaults to (UTC) Coordinated Universal Time. Possible values are:
                (UTC-12:00) International Date Line West,
                (UTC-11:00) Coordinated Universal Time-11,
                (UTC-10:00) Aleutian Islands,
                (UTC-10:00) Hawaii,
                (UTC-09:30) Marquesas Islands,
                (UTC-09:00) Alaska,
                (UTC-09:00) Coordinated Universal Time-09,
                (UTC-08:00) Baja California,
                (UTC-08:00) Coordinated Universal Time-08,
                (UTC-08:00) Pacific Time (US &Canada),
                (UTC-07:00) Arizona,
                (UTC-07:00) Chihuahua, La Paz, Mazatlan,
                (UTC-07:00) Mountain Time (US &Canada),
                (UTC-07:00) Yukon,
                (UTC-06:00) Central America,
                (UTC-06:00) Central Time (US &Canada),
                (UTC-06:00) Easter Island,
                (UTC-06:00) Guadalajara, Mexico City, Monterrey,
                (UTC-06:00) Saskatchewan,
                (UTC-05:00) Bogota, Lima, Quito, Rio Branco,
                (UTC-05:00) Chetumal,
                (UTC-05:00) Eastern Time (US &Canada),
                (UTC-05:00) Haiti,
                (UTC-05:00) Havana,
                (UTC-05:00) Indiana (East),
                (UTC-05:00) Turks and Caicos,
                (UTC-04:00) Asuncion,
                (UTC-04:00) Atlantic Time (Canada),
                (UTC-04:00) Caracas,
                (UTC-04:00) Cuiaba,
                (UTC-04:00) Georgetown, La Paz, Manaus, San Juan,
                (UTC-04:00) Santiago,
                (UTC-03:30) Newfoundland,
                (UTC-03:00) Araguaina,
                (UTC-03:00) Brasilia,
                (UTC-03:00) Cayenne, Fortaleza,
                (UTC-03:00) City of Buenos Aires,
                (UTC-03:00) Greenland,
                (UTC-03:00) Montevideo,
                (UTC-03:00) Punta Arenas,
                (UTC-03:00) Saint Pierre and Miquelon,
                (UTC-03:00) Salvador,
                (UTC-02:00) Coordinated Universal Time-02,
                (UTC-02:00) Mid-Atlantic - Old,
                (UTC-01:00) Azores,
                (UTC-01:00) Cabo Verde Is.,
                (UTC) Coordinated Universal Time,
                (UTC+00:00) Dublin, Edinburgh, Lisbon, London,
                (UTC+00:00) Monrovia, Reykjavik,
                (UTC+00:00) Sao Tome,
                (UTC+01:00) Casablanca,
                (UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna,
                (UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague,
                (UTC+01:00) Brussels, Copenhagen, Madrid, Paris,
                (UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb,
                (UTC+01:00) West Central Africa,
                (UTC+02:00) Amman,
                (UTC+02:00) Athens, Bucharest,
                (UTC+02:00) Beirut,
                (UTC+02:00) Cairo,
                (UTC+02:00) Chisinau,
                (UTC+02:00) Damascus,
                (UTC+02:00) Gaza, Hebron,
                (UTC+02:00) Harare, Pretoria,
                (UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius,
                (UTC+02:00) Jerusalem,
                (UTC+02:00) Juba,
                (UTC+02:00) Kaliningrad,
                (UTC+02:00) Khartoum,
                (UTC+02:00) Tripoli,
                (UTC+02:00) Windhoek,
                (UTC+03:00) Baghdad,
                (UTC+03:00) Istanbul,
                (UTC+03:00) Kuwait, Riyadh,
                (UTC+03:00) Minsk,
                (UTC+03:00) Moscow, St. Petersburg,
                (UTC+03:00) Nairobi,
                (UTC+03:00) Volgograd,
                (UTC+03:30) Tehran,
                (UTC+04:00) Abu Dhabi, Muscat,
                (UTC+04:00) Astrakhan, Ulyanovsk,
                (UTC+04:00) Baku,
                (UTC+04:00) Izhevsk, Samara,
                (UTC+04:00) Port Louis,
                (UTC+04:00) Saratov,
                (UTC+04:00) Tbilisi,
                (UTC+04:00) Yerevan,
                (UTC+04:30) Kabul,
                (UTC+05:00) Ashgabat, Tashkent,
                (UTC+05:00) Ekaterinburg,
                (UTC+05:00) Islamabad, Karachi,
                (UTC+05:00) Qyzylorda,
                (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi,
                (UTC+05:30) Sri Jayawardenepura,
                (UTC+05:45) Kathmandu,
                (UTC+06:00) Astana,
                (UTC+06:00) Dhaka,
                (UTC+06:00) Omsk,
                (UTC+06:30) Yangon (Rangoon),
                (UTC+07:00) Bangkok, Hanoi, Jakarta,
                (UTC+07:00) Barnaul, Gorno-Altaysk,
                (UTC+07:00) Hovd,
                (UTC+07:00) Krasnoyarsk,
                (UTC+07:00) Novosibirsk,
                (UTC+07:00) Tomsk,
                (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi,
                (UTC+08:00) Irkutsk,
                (UTC+08:00) Kuala Lumpur, Singapore,
                (UTC+08:00) Perth,
                (UTC+08:00) Taipei,
                (UTC+08:00) Ulaanbaatar,
                (UTC+08:45) Eucla,
                (UTC+09:00) Chita,
                (UTC+09:00) Osaka, Sapporo, Tokyo,
                (UTC+09:00) Pyongyang,
                (UTC+09:00) Seoul,
                (UTC+09:00) Yakutsk,
                (UTC+09:30) Adelaide,
                (UTC+09:30) Darwin,
                (UTC+10:00) Brisbane,
                (UTC+10:00) Canberra, Melbourne, Sydney,
                (UTC+10:00) Guam, Port Moresby,
                (UTC+10:00) Hobart,
                (UTC+10:00) Vladivostok,
                (UTC+10:30) Lord Howe Island,
                (UTC+11:00) Bougainville Island,
                (UTC+11:00) Chokurdakh,
                (UTC+11:00) Magadan,
                (UTC+11:00) Norfolk Island,
                (UTC+11:00) Sakhalin,
                (UTC+11:00) Solomon Is., New Caledonia,
                (UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky,
                (UTC+12:00) Auckland, Wellington,
                (UTC+12:00) Coordinated Universal Time+12,
                (UTC+12:00) Fiji,
                (UTC+12:00) Petropavlovsk-Kamchatsky - Old,
                (UTC+12:45) Chatham Islands,
                (UTC+13:00) Coordinated Universal Time+13,
                (UTC+13:00) Nuku'alofa,
                (UTC+13:00) Samoa,
                (UTC+14:00) Kiritimati Island.
            target.demands: '- (Optional) A list of demands that represents the agent capabilities required by this build. Example: git'
            target.execution_options: '- (Required) A execution_options blocks as documented below.'
            target.type: '(Required) The job type. Possible values: AgentJob, AgentlessJob'
            timeouts.create: '- (Defaults to 30 minutes) Used when creating the Build Definition.'
            timeouts.delete: '- (Defaults to 30 minutes) Used when deleting the Build Definition.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Build Definition.'
            timeouts.update: '- (Defaults to 30 minutes) Used when updating the Build Definition.'
            variable: '- (Optional) A list of variable blocks, as documented below.'
            variable.allow_override: '- (Optional) True if the variable can be overridden. Defaults to true.'
            variable.is_secret: '- (Optional) True if the variable is a secret. Defaults to false.'
            variable.name: '- (Required) The name of the variable.'
            variable.secret_value: '- (Optional) The secret value of the variable. Used when is_secret set to true.'
            variable.value: '- (Optional) The value of the variable.'
            variable_groups: '- (Optional) A list of variable group IDs (integers) to link to the build definition.'
        importStatements: []
    azuredevops_build_definition_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Build Definition
        name: azuredevops_build_definition_permissions
        title: azuredevops_build_definition_permissions
        examples:
            - name: example
              manifest: |-
                {
                  "build_definition_id": "${azuredevops_build_definition.example.id}",
                  "permissions": {
                    "DeleteBuilds": "Deny",
                    "EditBuildQuality": "Deny",
                    "StopBuilds": "Allow",
                    "ViewBuilds": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                build_definition_id: azuredevops_build_definition.example.id
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_build_definition.example: |-
                    {
                      "ci_trigger": [
                        {
                          "use_yaml": true
                        }
                      ],
                      "name": "Example Build Definition",
                      "path": "\\ExampleFolder",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository": [
                        {
                          "branch_name": "${azuredevops_git_repository.example.default_branch}",
                          "repo_id": "${azuredevops_git_repository.example.id}",
                          "repo_type": "TfsGit",
                          "yml_path": "azure-pipelines.yml"
                        }
                      ]
                    }
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            build_definition_id: '- (Required) The id of the build definition to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Build Definition Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Build Definition Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Build Definition Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Build Definition Permission.'
        importStatements: []
    azuredevops_build_folder:
        subCategory: ""
        description: Manages a Build Folder.
        name: azuredevops_build_folder
        title: azuredevops_build_folder
        examples:
            - name: example
              manifest: |-
                {
                  "description": "ExampleFolder description",
                  "path": "\\ExampleFolder",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) Folder Description.'
            path: '- (Required) The folder path.'
            project_id: '- (Required) The ID of the project in which the folder will be created.'
            timeouts.create: '- (Defaults to 30 minutes) Used when creating the Build Folder.'
            timeouts.delete: '- (Defaults to 30 minutes) Used when deleting the Build Folder.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Build Folder.'
            timeouts.update: '- (Defaults to 30 minutes) Used when updating the Build Folder.'
        importStatements:
            - terraform import azuredevops_build_folder.example "Example Project/\\ExampleFolder"
            - terraform import azuredevops_build_folder.example 00000000-0000-0000-0000-000000000000/\\ExampleFolder
    azuredevops_build_folder_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Build Folder
        name: azuredevops_build_folder_permissions
        title: azuredevops_build_folder_permissions
        examples:
            - name: example
              manifest: |-
                {
                  "path": "\\ExampleFolder",
                  "permissions": {
                    "AdministerBuildPermissions": "NotSet",
                    "DeleteBuildDefinition": "Deny",
                    "DeleteBuilds": "Deny",
                    "DestroyBuilds": "Deny",
                    "EditBuildDefinition": "Deny",
                    "EditBuildQuality": "Allow",
                    "ManageBuildQualities": "Deny",
                    "ManageBuildQueue": "Deny",
                    "QueueBuilds": "Allow",
                    "RetainIndefinitely": "Allow",
                    "StopBuilds": "Allow",
                    "UpdateBuildInformation": "Deny",
                    "ViewBuildDefinition": "Allow",
                    "ViewBuilds": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_build_folder.example: |-
                    {
                      "description": "ExampleFolder description",
                      "path": "\\ExampleFolder",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "path": "\\",
                  "permissions": {
                    "RetainIndefinitely": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Required) The folder path to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Build Folder Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Build Folder Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Build Folder Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Build Folder Permission.'
        importStatements: []
    azuredevops_check_approval:
        subCategory: ""
        description: Manages an Approval Check.
        name: azuredevops_check_approval
        title: azuredevops_check_approval
        examples:
            - name: example
              manifest: |-
                {
                  "approvers": [
                    "${one(data.azuredevops_users.example.users).id}"
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "requester_can_approve": false,
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint",
                  "timeout": 43200
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "approvers": [
                    "${azuredevops_group.example.origin_id}"
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "requester_can_approve": true,
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment"
                }
              references:
                approvers: azuredevops_group.example.origin_id
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_group.example: |-
                    {
                      "display_name": "some-azdo-group"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            approvers: '- (Required) Specifies a list of approver IDs.'
            id: '- The ID of the check.'
            instructions: '- (Optional) The instructions for the approvers.'
            minimum_required_approvers: '- (Optional) The minimum number of approvers. This property is applicable when there is more than 1 approver.'
            project_id: '- (Required) The project ID. Changing this forces a new Approval Check to be created.'
            requester_can_approve: '- (Optional) Can the requestor approve? Defaults to false.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new Approval Check to be created.'
            timeout: '- (Optional) The timeout in minutes for the approval.  Defaults to 43200.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Approval Check.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Approval Check.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Approval Check.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Approval Check.'
            version: '- The version of the check.'
        importStatements: []
    azuredevops_check_branch_control:
        subCategory: ""
        description: Manages a branch control check.
        name: azuredevops_check_branch_control
        title: azuredevops_check_branch_control
        examples:
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint",
                  "timeout": 1440
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_agent_queue.example.id}",
                  "target_resource_type": "queue"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_agent_queue.example.id
              dependencies:
                azuredevops_agent_pool.example: |-
                    {
                      "name": "example-pool"
                    }
                azuredevops_agent_queue.example: |-
                    {
                      "agent_pool_id": "${azuredevops_agent_pool.example.id}",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}",
                  "target_resource_type": "repository"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "allowed_branches": "refs/heads/main, refs/heads/features/*",
                  "display_name": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_variable_group.example.id}",
                  "target_resource_type": "variablegroup"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_variable_group.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Example Variable Group Description",
                      "name": "Example Variable Group",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "key1",
                          "value": "val1"
                        },
                        {
                          "is_secret": true,
                          "name": "key2",
                          "secret_value": "val2"
                        }
                      ]
                    }
        argumentDocs:
            allowed_branches: '- (Optional) The branches allowed to use the resource. Specify a comma separated list of allowed branches in refs/heads/branch_name format. To allow deployments from all branches, specify * . refs/heads/features/* , refs/heads/releases/* restricts deployments to all branches under features/ or releases/ . Defaults to *.'
            display_name: '- (Required) The name of the branch control check displayed in the web UI.'
            id: '- The ID of the check.'
            ignore_unknown_protection_status: '- (Optional) Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is true. Defaults to false.'
            project_id: '- (Required) The project ID.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Possible values are: endpoint, environment, queue, repository, securefile, variablegroup.'
            timeout: '- (Optional) The timeout in minutes for the branch control check. Defaults to 1440.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Branch Control Check.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Branch Control Check.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Branch Control Check.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Branch Control Check.'
            verify_branch_protection: '- (Optional) Validate the branches being deployed are protected. Defaults to false.'
            version: '- The version of the check.'
        importStatements: []
    azuredevops_check_business_hours:
        subCategory: ""
        description: Manages a business hours check.
        name: azuredevops_check_business_hours
        title: azuredevops_check_business_hours
        examples:
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint",
                  "time_zone": "UTC",
                  "timeout": 1440,
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_agent_queue.example.id}",
                  "target_resource_type": "queue",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_agent_queue.example.id
              dependencies:
                azuredevops_agent_pool.example: |-
                    {
                      "name": "example-pool"
                    }
                azuredevops_agent_queue.example: |-
                    {
                      "agent_pool_id": "${azuredevops_agent_pool.example.id}",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}",
                  "target_resource_type": "repository",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "display_name": "Managed by Terraform",
                  "end_time": "15:30",
                  "monday": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "start_time": "07:00",
                  "target_resource_id": "${azuredevops_variable_group.example.id}",
                  "target_resource_type": "variablegroup",
                  "time_zone": "UTC",
                  "tuesday": true
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_variable_group.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Example Variable Group Description",
                      "name": "Example Variable Group",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "key1",
                          "value": "val1"
                        },
                        {
                          "is_secret": true,
                          "name": "key2",
                          "secret_value": "val2"
                        }
                      ]
                    }
        argumentDocs:
            display_name: '- (Required) The name of the business hours check displayed in the web UI.'
            end_time: '- (Required) The end of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.'
            friday: '- (Optional) This check will pass on Fridays. Defaults to false.'
            id: '- The ID of the check.'
            monday: '- (Optional) This check will pass on Mondays. Defaults to false.'
            project_id: '- (Required) The project ID.'
            saturday: '- (Optional) This check will pass on Saturdays. Defaults to false.'
            start_time: '- (Required) The beginning of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.'
            sunday: '- (Optional) This check will pass on Sundays. Defaults to false.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Possible values are: endpoint, environment, queue, repository, securefile, variablegroup.'
            thursday: '- (Optional) This check will pass on Thursdays. Defaults to false.'
            time_zone: '- (Required) The time zone this check will be evaluated in. See below for supported values.'
            timeout: '- (Optional) The timeout in minutes for the business hours check. Defaults to 1440.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Business Hours Check.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Business Hours Check.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Business Hours Check.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Business Hours Check.'
            tuesday: '- (Optional) This check will pass on Tuesday. Defaults to false.'
            version: '- The version of the check.'
            wednesday: '- (Optional) This check will pass on Wednesdays. Defaults to false.'
        importStatements: []
    azuredevops_check_exclusive_lock:
        subCategory: ""
        description: Manages an Exclusive Lock Check.
        name: azuredevops_check_exclusive_lock
        title: azuredevops_check_exclusive_lock
        examples:
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint",
                  "timeout": 43200
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment",
                  "timeout": 43200
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "target_resource_id": "${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}",
                  "target_resource_type": "repository",
                  "timeout": 43200
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            id: '- The ID of the check.'
            project_id: '- (Required) The project ID. Changing this forces a new Exclusive Lock Check to be created.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Possible values are: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new Exclusive Lock to be created.'
            timeout: '- (Optional) The timeout in minutes for the exclusive lock. Defaults to 43200.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Exclusive Lock Check.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Exclusive Lock Check.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Exclusive Lock Check.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Exclusive Lock Check.'
            version: '- The version of the check.'
        importStatements: []
    azuredevops_check_required_template:
        subCategory: ""
        description: Manages a Required Template Check.
        name: azuredevops_check_required_template
        title: azuredevops_check_required_template
        examples:
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "required_template": [
                    {
                      "repository_name": "project/repository",
                      "repository_ref": "refs/heads/main",
                      "repository_type": "azuregit",
                      "template_path": "template/path.yml"
                    }
                  ],
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "required_template": [
                    {
                      "repository_name": "project/repository",
                      "repository_ref": "refs/heads/main",
                      "template_path": "template/path.yml"
                    },
                    {
                      "repository_name": "project/repository",
                      "repository_ref": "refs/heads/main",
                      "template_path": "template/alternate-path.yml"
                    }
                  ],
                  "target_resource_id": "${azuredevops_environment.example.id}",
                  "target_resource_type": "environment"
                }
              references:
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_environment.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            id: '- The ID of the check.'
            project_id: '- (Required) The project ID. Changing this forces a new Required Template Check to be created.'
            required_template: '- (Required) One or more required_template blocks documented below.'
            required_template.repository_name: '- (Required) The name of the repository storing the template.'
            required_template.repository_ref: '- (Required) The branch in which the template will be referenced.'
            required_template.repository_type: '- (Optional) The type of the repository storing the template. Possible values are: azuregit, github, githubenterprise, bitbucket. Defaults to azuregit.'
            required_template.template_path: '- (Required) The path to the template yaml.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.'
            target_resource_type: '- (Required) The type of resource being protected by the check. Valid values: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new Required Template Check to be created.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Required Template Check.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Required Template Check.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Required Template Check.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Required Template Check.'
            version: '- The version of the check.'
        importStatements: []
    azuredevops_check_rest_api:
        subCategory: ""
        description: Manages a Rest API check.
        name: azuredevops_check_rest_api
        title: azuredevops_check_rest_api
        examples:
            - name: example
              manifest: |-
                {
                  "body": "{\"params\":\"value\"}",
                  "completion_event": "ApiResponse",
                  "connected_service_name": "${azuredevops_serviceendpoint_generic.example_azure.service_endpoint_name}",
                  "connected_service_name_selector": "connectedServiceName",
                  "display_name": "Example REST API Check",
                  "headers": "{\"contentType\":\"application/json\"}",
                  "method": "POST",
                  "project_id": "${azuredevops_project.example.id}",
                  "retry_interval": 4000,
                  "success_criteria": "eq(root['status'], '200')",
                  "target_resource_id": "${azuredevops_serviceendpoint_generic.example.id}",
                  "target_resource_type": "endpoint",
                  "timeout": "40000",
                  "url_suffix": "user/1",
                  "variable_group_name": "${azuredevops_variable_group.example.name}"
                }
              references:
                connected_service_name: azuredevops_serviceendpoint_generic.example_azure.service_endpoint_name
                project_id: azuredevops_project.example.id
                target_resource_id: azuredevops_serviceendpoint_generic.example.id
                variable_group_name: azuredevops_variable_group.example.name
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_serviceendpoint_generic.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://some-server.example.com",
                      "service_endpoint_name": "Example Generic",
                      "username": "username"
                    }
                azuredevops_serviceendpoint_generic.example_azure: |-
                    {
                      "password": "dummy",
                      "project_id": "${azuredevops_project.example.id}",
                      "server_url": "https://dev.azure.com/",
                      "service_endpoint_name": "Example Generic Azure",
                      "username": "username"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "name": "Example Variable Group",
                      "project_id": "${azuredevops_project.example.id}",
                      "variable": [
                        {
                          "name": "FOO",
                          "value": "BAR"
                        }
                      ]
                    }
        argumentDocs:
            body: '- (Optional) The Rest API request body.'
            completion_event: '- (Optional) The completion event of the Rest API call. Possible values: Callback, ApiResponse. Defaults to Callback.'
            connected_service_name: '- (Required) The name of the Service Connection.'
            connected_service_name_selector: '- (Required) The type of the Service Connection used to invoke the REST API. Possible values: connectedServiceName(Generic type service connection) and connectedServiceNameARM(Azure Resource Manager type service connection).'
            display_name: '- (Required) The Name of the Rest API check.'
            headers: '- (Optional) The headers of the request in JSON format.'
            id: '- The ID of the check.'
            method: '- (Required) The HTTP method of the request. Possible values: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PATCH'
            project_id: '- (Required) The ID of the project. Changing this forces a new resource to be created.'
            retry_interval: '- (Optional) The time between evaluations (minutes).'
            success_criteria: '- (Optional) The Criteria which defines when to pass the task. No criteria means response content does not influence the result.'
            target_resource_id: '- (Required) The ID of the resource being protected by the check. Changing this forces a new resource to be created'
            target_resource_type: '- (Required) The type of resource being protected by the check. Possible values: endpoint, environment, queue, repository, securefile, variablegroup. Changing this forces a new resource to be created.'
            timeout: |-
                is 4000 then retry_interval should be 0 or no less then 400.
                2. retry_interval is not required when completion_event=Callback.
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Rest API Check.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Rest API Check.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Rest API Check.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Rest API Check.'
            url_suffix: '- (Optional) The URL suffix and parameters.'
            variable_group_name: '- (Optional) The name of the Variable Group.'
            version: '- The version of the Rest API check.'
        importStatements: []
    azuredevops_dashboard:
        subCategory: ""
        description: Manages Dashboard within Azure DevOps project.
        name: azuredevops_dashboard
        title: azuredevops_dashboard
        examples:
            - name: example
              manifest: |-
                {
                  "name": "Example dashboard",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project"
                    }
            - name: example
              manifest: |-
                {
                  "name": "Example dashboard",
                  "project_id": "${azuredevops_project.example.id}",
                  "team_id": "${azuredevops_team.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
                team_id: azuredevops_team.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project"
                    }
                azuredevops_team.example: |-
                    {
                      "name": "Example team",
                      "project_id": "${azuredevops_project.example.id}"
                    }
        argumentDocs:
            description: '- (Optional) The description of the dashboard.'
            id: '- The ID of the Dashboard.'
            name: '- (Required) The name of the Dashboard.'
            owner_id: '- The owner of the Dashboard, could be the project or a team.'
            project_id: '- (Required) The ID of the Project. Changing this forces a new resource to be created.'
            refresh_interval: '- (Optional) The interval for client to automatically refresh the dashboard. Expressed in minutes. Possible values are: 0, 5.Defaults to 0.'
            team_id: '- (Optional) The ID of the Team.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Dashboard.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Dashboard.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Dashboard.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Dashboard.'
        importStatements:
            - terraform import azuredevops_dashboard.dashboard 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
            - terraform import azuredevops_dashboard.dashboard 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
    azuredevops_elastic_pool:
        subCategory: ""
        description: Manages Elastic pool within Azure DevOps organization.
        name: azuredevops_elastic_pool
        title: azuredevops_elastic_pool
        examples:
            - name: example
              manifest: |-
                {
                  "azure_resource_id": "/subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e",
                  "desired_idle": 2,
                  "max_capacity": 3,
                  "name": "Example Elastic Pool",
                  "service_endpoint_id": "${azuredevops_serviceendpoint_azurerm.example.id}",
                  "service_endpoint_scope": "${azuredevops_project.example.id}"
                }
              references:
                service_endpoint_id: azuredevops_serviceendpoint_azurerm.example.id
                service_endpoint_scope: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_azurerm.example: |-
                    {
                      "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                      "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                      "azurerm_subscription_name": "Subscription Name",
                      "credentials": [
                        {
                          "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                          "serviceprincipalkey": "00000000-0000-0000-0000-000000000000"
                        }
                      ],
                      "description": "Managed by Terraform",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_authentication_scheme": "ServicePrincipal",
                      "service_endpoint_name": "Example Azure Connection"
                    }
        argumentDocs:
            agent_interactive_ui: '- (Optional) Set whether agents should be configured to run with interactive UI. Defaults to false.'
            auto_provision: '- (Optional) Specifies whether a queue should be automatically provisioned for each project collection. Defaults to false.'
            auto_update: '- (Optional) Specifies whether or not agents within the pool should be automatically updated. Defaults to true.'
            azure_resource_id: '- (Required) The ID of the Azure resource.'
            desired_idle: '- (Required) Number of agents to keep on standby.'
            id: '- The ID of the Elastic pool.'
            max_capacity: '- (Required) Maximum number of virtual machines in the scale set.'
            name: '- (Required) The name of the Elastic pool.'
            project_id: '- (Optional) The ID of the project where a new Elastic Pool will be created.'
            recycle_after_each_use: '- (Optional) Tear down virtual machines after every use. Defaults to false.'
            service_endpoint_id: '- (Required) The ID of Service Endpoint used to connect to Azure.'
            service_endpoint_scope: '- (Required) The Project ID of Service Endpoint belongs to.'
            time_to_live_minutes: '- (Optional) Delay in minutes before deleting excess idle agents. Defaults to 30.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Elastic Pool.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Elastic Pool.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Elastic Pool.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Elastic Pool.'
        importStatements: []
    azuredevops_environment:
        subCategory: ""
        description: Manages an Environment.
        name: azuredevops_environment
        title: azuredevops_environment
        examples:
            - name: example
              manifest: |-
                {
                  "name": "Example Environment",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) A description for the Environment.'
            id: '- The ID of the Environment.'
            name: '- (Required) The name which should be used for this Environment.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Environment to be created.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Environment.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Environment.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Environment.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Environment.'
        importStatements: []
    azuredevops_environment_resource_kubernetes:
        subCategory: ""
        description: Manages a Kubernetes Resource for an Environment.
        name: azuredevops_environment_resource_kubernetes
        title: azuredevops_environment_resource_kubernetes
        examples:
            - name: example
              manifest: |-
                {
                  "cluster_name": "example-aks",
                  "environment_id": "${azuredevops_environment.example.id}",
                  "name": "Example",
                  "namespace": "default",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_id": "${azuredevops_serviceendpoint_kubernetes.example.id}",
                  "tags": [
                    "tag1",
                    "tag2"
                  ]
                }
              references:
                environment_id: azuredevops_environment.example.id
                project_id: azuredevops_project.example.id
                service_endpoint_id: azuredevops_serviceendpoint_kubernetes.example.id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_kubernetes.example: |-
                    {
                      "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                      "authorization_type": "AzureSubscription",
                      "azure_subscription": [
                        {
                          "cluster_name": "example-aks",
                          "namespace": "default",
                          "resourcegroup_id": "example-rg",
                          "subscription_id": "00000000-0000-0000-0000-000000000000",
                          "subscription_name": "Example",
                          "tenant_id": "00000000-0000-0000-0000-000000000000"
                        }
                      ],
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "Example Kubernetes"
                    }
        argumentDocs:
            cluster_name: '- (Optional) A cluster name for the Kubernetes Resource.'
            environment_id: '- (Required) The ID of the environment under which to create the Kubernetes Resource.'
            id: '- The ID of the Kubernetes Resource.'
            name: '- (Required) The name for the Kubernetes Resource.'
            namespace: '- (Required) The namespace for the Kubernetes Resource.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_id: '- (Required) The ID of the service endpoint to associate with the Kubernetes Resource.'
            tags: '- (Optional) A set of tags for the Kubernetes Resource.'
            timeouts.create: '- (Defaults to 30 minutes) Used when creating the Environment Kubernetes Resource.'
            timeouts.delete: '- (Defaults to 30 minutes) Used when deleting the Environment Kubernetes Resource.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Environment Kubernetes Resource.'
        importStatements: []
    azuredevops_extension:
        subCategory: ""
        description: Manages Extension within Azure DevOps organization.
        name: azuredevops_extension
        title: extension
        examples:
            - name: example
              manifest: |-
                {
                  "extension_id": "extension ID",
                  "publisher_id": "publisher ID"
                }
        argumentDocs:
            disabled: '- (Optional) Whether to disable the extension.'
            extension_id: '- (Required) The publisher ID of the extension.'
            extension_name: '- The name of the extension.'
            id: '- The ID of the Extension.'
            publisher_id: '- (Required) The extension ID of the extension.'
            publisher_name: '- The name of the publisher.'
            scope: '- List of all oauth scopes required by this extension.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the extension.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the extension.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the extension.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the extension.'
            version: '- (Optional) The version of the extension.'
        importStatements: []
    azuredevops_feed:
        subCategory: ""
        description: Manages Feed within Azure DevOps organization.
        name: azuredevops_feed
        title: azuredevops_feed
        examples:
            - name: example
              manifest: |-
                {
                  "name": "examplefeed"
                }
            - name: example
              manifest: |-
                {
                  "name": "examplefeed",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "features": [
                    {
                      "permanent_delete": false
                    }
                  ],
                  "name": "examplefeed"
                }
        argumentDocs:
            features: '- (Optional) A features blocks as documented below.'
            features.permanent_delete: '- (Optional) Determines if Feed should be Permanently removed, Defaults to false'
            features.restore: '- (Optional) Determines if Feed should be Restored during creation (if possible), Defaults to false'
            id: '- The ID of the Feed.'
            name: '- (Required) The name of the Feed.'
            project_id: '- (Optional) The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Feed.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Feed.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Feed.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Feed.'
        importStatements: []
    azuredevops_feed_permission:
        subCategory: ""
        description: Manages creation of the Feed Permission within Azure DevOps organization.
        name: azuredevops_feed_permission
        title: azuredevops_feed_permission
        examples:
            - name: permission
              manifest: |-
                {
                  "feed_id": "${azuredevops_feed.example.id}",
                  "identity_descriptor": "${azuredevops_group.example.descriptor}",
                  "role": "reader"
                }
              references:
                feed_id: azuredevops_feed.example.id
                identity_descriptor: azuredevops_group.example.descriptor
              dependencies:
                azuredevops_feed.example: |-
                    {
                      "name": "examplefeed"
                    }
                azuredevops_group.example: |-
                    {
                      "description": "Example description",
                      "display_name": "Example group",
                      "scope": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            display_name: '- (Optional) The display name of the assignment'
            feed_id: '- (Required) The ID of the Feed.'
            identity_descriptor: '- (Required) The Descriptor of identity you want to assign a role.'
            identity_id: '- The ID of the identity.'
            project_id: '- (Optional) The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.'
            role: '- (Required) The role to be assigned. Possible values are: reader, contributor, collaborator, administrator'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Feed Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Feed Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Feed Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Feed Permission.'
        importStatements: []
    azuredevops_feed_retention_policy:
        subCategory: ""
        description: Manages the Feed Retention Policy within Azure DevOps organization.
        name: azuredevops_feed_retention_policy
        title: azuredevops_feed_retention_policy
        examples:
            - name: example
              manifest: |-
                {
                  "count_limit": 20,
                  "days_to_keep_recently_downloaded_packages": 30,
                  "feed_id": "${azuredevops_feed.example.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                feed_id: azuredevops_feed.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_feed.example: |-
                    {
                      "name": "ExampleFeed",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "count_limit": 20,
                  "days_to_keep_recently_downloaded_packages": 30,
                  "feed_id": "${azuredevops_feed.example.id}"
                }
              references:
                feed_id: azuredevops_feed.example.id
              dependencies:
                azuredevops_feed.example: |-
                    {
                      "name": "examplefeed"
                    }
        argumentDocs:
            count_limit: '- (Required) The maximum number of versions per package.'
            days_to_keep_recently_downloaded_packages: '- (Required) The days to keep recently downloaded packages.'
            feed_id: '- (Required) The ID of the Feed. Changing this forces a new resource to be created.'
            id: '- The ID of the Feed'
            project_id: '- (Optional) The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Feed Retention Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Feed Retention Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Feed Retention Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Feed Retention Policy.'
        importStatements: []
    azuredevops_git_permissions:
        subCategory: ""
        description: Manages permissions for Git repositories
        name: azuredevops_git_permissions
        title: azuredevops_git_permissions
        examples:
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateRepository": "Deny",
                    "DeleteRepository": "Deny",
                    "RenameRepository": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateBranch": "NotSet",
                    "CreateTag": "Deny",
                    "ManagePermissions": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-group.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-group.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "branch_name": "refs/heads/master",
                  "permissions": {
                    "ForcePush": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-group.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-group.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Empty Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateRepository": "Deny",
                    "DeleteRepository": "Deny",
                    "RenameRepository": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-project-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "default_branch": "refs/heads/master",
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "TestRepo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-repo-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateBranch": "NotSet",
                    "CreateTag": "Deny",
                    "ManagePermissions": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-project-administrators.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-administrators.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "default_branch": "refs/heads/master",
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "TestRepo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-branch-permissions
              manifest: |-
                {
                  "branch_name": "master",
                  "permissions": {
                    "ForcePush": "Deny",
                    "RemoveOthersLocks": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-project-contributors.id}",
                  "project_id": "${azuredevops_git_repository.example.project_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-project-contributors.id
                project_id: azuredevops_git_repository.example.project_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "default_branch": "refs/heads/master",
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "TestRepo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            branch_name: '- (Optional) The name of the branch to assign the permissions.'
            descriptor: |-
                of the user/group not the ID. Some resources in this provider use the descriptor
                as resource ID. It is recommended to check before use.
            permissions: '- (Required) the permissions to assign. The following permissions are available'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            repository_id: '- (Optional) The ID of the GIT repository to assign the permissions'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Git Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Git Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Git Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Git Permission.'
        importStatements: []
    azuredevops_git_repository:
        subCategory: ""
        description: Manages a git repository within Azure DevOps organization.
        name: azuredevops_git_repository
        title: azuredevops_git_repository
        examples:
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${initialization}"
                      ]
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                lifecycle.ignore_changes: initialization
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Empty Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${initialization}"
                      ]
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                lifecycle.ignore_changes: initialization
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-fork
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Fork"
                    }
                  ],
                  "name": "Example Fork Repository",
                  "parent_repository_id": "${azuredevops_git_repository.example.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                parent_repository_id: azuredevops_git_repository.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-import
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Import",
                      "source_type": "Git",
                      "source_url": "https://github.com/microsoft/terraform-provider-azuredevops.git"
                    }
                  ],
                  "name": "Example Import Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "default_branch": "refs/heads/main",
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_generic_git.example-serviceendpoint: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "\u003cpassword\u003e/\u003cPAT\u003e",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository_url": "https://dev.azure.com/org/project/_git/repository",
                      "service_endpoint_name": "Example Generic Git",
                      "username": "username"
                    }
            - name: example-import
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Import",
                      "service_connection_id": "${azuredevops_serviceendpoint_generic_git.example-serviceendpoint.id}",
                      "source_type": "Git",
                      "source_url": "https://dev.azure.com/example-org/private-repository.git"
                    }
                  ],
                  "name": "Example Import Existing Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                initialization.service_connection_id: azuredevops_serviceendpoint_generic_git.example-serviceendpoint.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_generic_git.example-serviceendpoint: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "\u003cpassword\u003e/\u003cPAT\u003e",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository_url": "https://dev.azure.com/org/project/_git/repository",
                      "service_endpoint_name": "Example Generic Git",
                      "username": "username"
                    }
            - name: example-import2
              manifest: |-
                {
                  "initialization": [
                    {
                      "init_type": "Import",
                      "password": "password",
                      "source_type": "Git",
                      "source_url": "https://dev.azure.com/example-org/private-repository.git",
                      "username": "username"
                    }
                  ],
                  "name": "Example Import Existing Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_generic_git.example-serviceendpoint: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "\u003cpassword\u003e/\u003cPAT\u003e",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository_url": "https://dev.azure.com/org/project/_git/repository",
                      "service_endpoint_name": "Example Generic Git",
                      "username": "username"
                    }
            - name: example
              manifest: |-
                {
                  "disabled": true,
                  "initialization": [
                    {
                      "init_type": "Clean"
                    }
                  ],
                  "name": "Example Empty Git Repository",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            default_branch: '- The ref of the default branch. Will be used as the branch name for initialized repositories.'
            disabled: '- (Optional) The ability to disable or enable the repository. Defaults to false.'
            id: '- The ID of the Git repository.'
            initialization: '- (Required) A initialization block as documented below.'
            initialization.init_type: '- (Required) The type of repository to create. Valid values: Uninitialized, Clean or Import.'
            initialization.password: '(Optional) The password used to authenticate to a private repository for import initialization. Conflicts with service_connection_id. Note: This is a write-only attribute, which allows ephemeral resources to be used.'
            initialization.service_connection_id: (Optional) The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with username and password.
            initialization.source_type: '- (Optional) Type of the source repository. Used if the init_type is Import. Valid values: Git.'
            initialization.source_url: '- (Optional) The URL of the source repository. Used if the init_type is Import.'
            initialization.username: (Optional) The username used to authenticate to a private repository for import initialization. Conflicts with service_connection_id.
            is_fork: '- True if the repository was created as a fork.'
            name: '- (Required) The name of the git repository.'
            parent_repository_id: '- (Optional) The ID of a Git project from which a fork is to be created.'
            project_id: '- (Required) The project ID or project name.'
            remote_url: '- Git HTTPS URL of the repository'
            size: '- Size in bytes.'
            ssh_url: '- Git SSH URL of the repository.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Git Repository.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Git Repository.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Git Repository.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Git Repository.'
            url: '- REST API URL of the repository.'
            web_url: '- Web link to the repository.'
        importStatements: []
    azuredevops_git_repository_branch:
        subCategory: ""
        description: Manages a Git Repository Branch.
        name: azuredevops_git_repository_branch
        title: azuredevops_git_repository_branch
        examples:
            - name: example
              manifest: |-
                {
                  "name": "example-branch-name",
                  "ref_branch": "${azuredevops_git_repository.example.default_branch}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                ref_branch: azuredevops_git_repository.example.default_branch
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example_from_commit_id
              manifest: |-
                {
                  "name": "example-from-commit-id",
                  "ref_commit_id": "${azuredevops_git_repository_branch.example.last_commit_id}",
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                ref_commit_id: azuredevops_git_repository_branch.example.last_commit_id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            id: '- The ID of the Git Repository Branch, in the format <repository_id>:<name>.'
            last_commit_id: '- The commit object ID of last commit on the branch.'
            name: '- (Required) The name of the branch in short format not prefixed with refs/heads/.'
            ref_branch: '- (Optional) The reference to the source branch to create the branch from, in <name> or refs/heads/<name> format. Conflict with ref_tag, ref_commit_id.'
            ref_commit_id: '- (Optional) The commit object ID to create the branch from. Conflict with ref_branch, ref_tag.'
            ref_tag: '- (Optional) The reference to the tag to create the branch from, in <name> or refs/tags/<name> format. Conflict with ref_branch, ref_commit_id.'
            repository_id: '- (Required) The ID of the repository the branch is created against.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Git Branch.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Git Branch.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Git Branch.'
        importStatements: []
    azuredevops_git_repository_file:
        subCategory: ""
        description: Manage files within an Azure DevOps Git repository.
        name: azuredevops_git_repository_file
        title: azuredevops_git_repository_file
        examples:
            - name: example
              manifest: |-
                {
                  "branch": "refs/heads/master",
                  "commit_message": "First commit",
                  "content": "**/*.tfstate",
                  "file": ".gitignore",
                  "overwrite_on_create": false,
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "author_email": "auhtor@test.com",
                  "author_name": "authorname",
                  "branch": "refs/heads/master",
                  "commit_message": "First commit",
                  "content": "**/*.tfstate",
                  "depends_on": [
                    "${azuredevops_repository_policy_author_email_pattern.example}"
                  ],
                  "file": ".gitignore",
                  "overwrite_on_create": false,
                  "repository_id": "${azuredevops_git_repository.example.id}"
                }
              references:
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Git Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_repository_policy_author_email_pattern.example: |-
                    {
                      "author_email_patterns": [
                        "auhtor@test.com"
                      ],
                      "blocking": true,
                      "enabled": true,
                      "project_id": "${azuredevops_project.example.id}",
                      "repository_ids": [
                        "${azuredevops_git_repository.example.id}"
                      ]
                    }
        argumentDocs:
            author_email: '- (Optional) The email of the author.'
            author_name: '- (Optional) The name of the author.'
            branch: '- (Optional) Git branch (defaults to refs/heads/master). The branch must already exist, it will not be created if it does not already exist.'
            commit_message: '- (Optional) Commit message when adding or updating the managed file.'
            committer_email: '- (Optional) The email of the committer.'
            committer_name: '- (Optional) The name of the committer.'
            content: '- (Required) The file content.'
            file: '- (Required) The path of the file to manage.'
            id: '- The ID of the git repository file in format of repository ID/file'
            overwrite_on_create: '- (Optional) Enable overwriting existing files (defaults to false).'
            project_id: '- The ID of the Project.'
            repository_id: '- (Required) The ID of the Git repository.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Git Repository File.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Git Repository File.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Git Repository File.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Git Repository File.'
        importStatements: []
    azuredevops_group:
        subCategory: ""
        description: Manages a group within Azure DevOps organization.
        name: azuredevops_group
        title: azuredevops_group
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Example description",
                  "display_name": "Example group",
                  "members": [
                    "${data.azuredevops_group.example-readers.descriptor}",
                    "${data.azuredevops_group.example-contributors.descriptor}"
                  ],
                  "scope": "${azuredevops_project.example.id}"
                }
              references:
                members: data.azuredevops_group.example-readers.descriptor
                scope: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
        argumentDocs:
            azuredevops_group: resource via the members block and by using the azuredevops_group_membership resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.
            description: '- (Optional) The Description of the Project.'
            descriptor: '- The identity (subject) descriptor of the Group.'
            display_name: '- (Optional) The name of a new Azure DevOps group that is not backed by an external provider. The origin_id and mail arguments cannot be used simultaneously with display_name.'
            domain: '- This represents the name of the container of origin for a graph member.'
            group_id: '- The ID of the Group.'
            id: '- The ID of the Group.'
            mail: '- (Optional) The mail address as a reference to an existing group from an external AD or AAD backed provider. The scope, origin_id and display_name arguments cannot be used simultaneously with mail.'
            members: '- (Optional) The member of the Group.'
            origin: '- The type of source provider for the origin identifier (ex:AD, AAD, MSA)'
            origin_id: '- (Optional) The OriginID as a reference to a group from an external AD or AAD backed provider. The scope, mail and display_name arguments cannot be used simultaneously with origin_id.'
            principal_name: '- This is the PrincipalName of this graph member from the source provider.'
            scope: '- (Optional) The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x'
            subject_kind: '- This field identifies the type of the graph subject (ex: Group, Scope, User).'
            timeouts.create: '- (Defaults to 30 minutes) Used when creating the Group.'
            timeouts.delete: '- (Defaults to 30 minutes) Used when deleting the Group.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Group.'
            timeouts.update: '- (Defaults to 30 minutes) Used when updating the Group.'
            url: '- This url is the full route to the source resource of this graph subject.'
        importStatements: []
    azuredevops_group_entitlement:
        subCategory: ""
        description: Manages a group entitlement within Azure DevOps organization.
        name: azuredevops_group_entitlement
        title: azuredevops_group_entitlement
        examples:
            - name: example
              manifest: |-
                {
                  "display_name": "Group Name"
                }
            - name: example
              manifest: |-
                {
                  "origin": "aad",
                  "origin_id": "00000000-0000-0000-0000-000000000000"
                }
        argumentDocs:
            account_license_type: '- (Optional) Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition, the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.'
            descriptor: '- The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.'
            display_name: '- (Optional) The display name is the name used in Azure DevOps UI. Cannot be set together with origin_id and origin.'
            id: '- The id of the entitlement.'
            licensing_source: '- (Optional) The source of the licensing (e.g. Account. MSDN etc.). Possible values are: account, auto, msdn, none, profile, trial. Defaults to account.'
            origin: '- (Optional) The type of source provider for the origin identifier.'
            origin_id: '- (Optional) The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.'
            principal_name: '- The principal name of a graph member on Azure DevOps'
            timeouts.create: '- (Defaults to 30 minutes) Used when creating the Group Entitlement.'
            timeouts.delete: '- (Defaults to 30 minutes) Used when deleting the Group Entitlement.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Group Entitlement.'
            timeouts.update: '- (Defaults to 30 minutes) Used when updating the Group Entitlement.'
        importStatements: []
    azuredevops_group_membership:
        subCategory: ""
        description: Manages group membership within Azure DevOps organization.
        name: azuredevops_group_membership
        title: azuredevops_group_membership
        examples:
            - name: example
              manifest: |-
                {
                  "group": "${data.azuredevops_group.example.descriptor}",
                  "members": [
                    "${azuredevops_user_entitlement.example.descriptor}"
                  ]
                }
              references:
                group: data.azuredevops_group.example.descriptor
                members: azuredevops_user_entitlement.example.descriptor
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project"
                    }
                azuredevops_user_entitlement.example: |-
                    {
                      "principal_name": "foo@contoso.com"
                    }
        argumentDocs:
            azuredevops_group_membership resource: |-
                via the members block and by using the azuredevops_group resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.
                2. The members uses descriptor as the identifier not Resource ID or others.
            group: '- (Required) The descriptor of the group being managed.'
            id: '- A random ID for this resource. There is no "natural" ID, so a random one is assigned.'
            members: '- (Required) A list of user or group descriptors that will become members of the group.'
            mode: '- (Optional) The mode how the resource manages group members.'
            mode = add: |-
                : the resource will ensure that all specified members will be part of the referenced group
                2. mode = overwrite: the resource will replace all existing members with the members specified within the members block
                3. To clear all members from a group, specify an empty list of descriptors in the members attribute and set the mode member to overwrite.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Group membership.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Group membership.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Group membership.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Group membership.'
        importStatements: []
    azuredevops_iteration_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Iteration (Sprint)
        name: azuredevops_iteration_permissions
        title: azuredevops_iteration_permissions
        examples:
            - name: example-root-permissions
              manifest: |-
                {
                  "permissions": {
                    "CREATE_CHILDREN": "Deny",
                    "DELETE": "Deny",
                    "GENERIC_READ": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-iteration-permissions
              manifest: |-
                {
                  "path": "Iteration 1",
                  "permissions": {
                    "CREATE_CHILDREN": "Allow",
                    "DELETE": "Allow",
                    "GENERIC_READ": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Optional) The name of the branch to assign the permissions.'
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Iteration Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Iteration Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Iteration Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Iteration Permission.'
        importStatements: []
    azuredevops_library_permissions:
        subCategory: ""
        description: Manages permissions for an Azure DevOps Library
        name: azuredevops_library_permissions
        title: azuredevops_library_permissions
        examples:
            - name: permissions
              manifest: |-
                {
                  "permissions": {
                    "Administer": "allow",
                    "Use": "allow",
                    "View": "allow"
                  },
                  "principal": "${data.azuredevops_group.tf-project-readers.id}",
                  "project_id": "${azuredevops_project.project.id}"
                }
              references:
                principal: data.azuredevops_group.tf-project-readers.id
                project_id: azuredevops_project.project.id
              dependencies:
                azuredevops_project.project: |-
                    {
                      "description": "Testing-description",
                      "name": "Testing",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Library Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Library Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Library Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Library Permission.'
            variable_group_id: '- (Required) The id of the variable group to assign the permissions.'
        importStatements: []
    azuredevops_pipeline_authorization:
        subCategory: ""
        description: Manages Pipeline Authorizations within Azure DevOps Project.
        name: azuredevops_pipeline_authorization
        title: azuredevops_pipeline_authorization
        examples:
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_id": "${azuredevops_agent_queue.example.id}",
                  "type": "queue"
                }
              references:
                project_id: azuredevops_project.example.id
                resource_id: azuredevops_agent_queue.example.id
              dependencies:
                azuredevops_agent_pool.example: |-
                    {
                      "auto_provision": false,
                      "auto_update": false,
                      "name": "Example Pool"
                    }
                azuredevops_agent_queue.example: |-
                    {
                      "agent_pool_id": "${azuredevops_agent_pool.example.id}",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "pipeline_id": "${azuredevops_build_definition.example.id}",
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_id": "${azuredevops_agent_queue.example.id}",
                  "type": "queue"
                }
              references:
                pipeline_id: azuredevops_build_definition.example.id
                project_id: azuredevops_project.example.id
                resource_id: azuredevops_agent_queue.example.id
              dependencies:
                azuredevops_agent_pool.example: |-
                    {
                      "auto_provision": false,
                      "auto_update": false,
                      "name": "Example Pool"
                    }
                azuredevops_agent_queue.example: |-
                    {
                      "agent_pool_id": "${azuredevops_agent_pool.example.id}",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_build_definition.example: |-
                    {
                      "name": "Example Pipeline",
                      "project_id": "${azuredevops_project.example.id}",
                      "repository": [
                        {
                          "repo_id": "${data.azuredevops_git_repository.example.id}",
                          "repo_type": "TfsGit",
                          "yml_path": "azure-pipelines.yml"
                        }
                      ]
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            pipeline_id: '- (Optional) The ID of the pipeline. If not configured, all pipelines will be authorized. Changing this forces a new resource to be created.'
            pipeline_project_id: '- (Optional) The ID of the project where the pipeline exists. Defaults to project_id if not specified. Changing this forces a new resource to be created'
            project_id: '- (Required) The  ID of the project. Changing this forces a new resource to be created'
            resource_id: '- (Required) The ID of the resource to authorize. Changing this forces a new resource to be created'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Pipeline Authorization.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Pipeline Authorization.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Pipeline Authorization.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Pipeline Authorization.'
            type: '- (Required) The type of the resource to authorize. Possible values are: endpoint, queue, variablegroup, environment, repository. Changing this forces a new resource to be created'
        importStatements: []
    azuredevops_project:
        subCategory: ""
        description: Manages a project within Azure DevOps organization.
        name: azuredevops_project
        title: azuredevops_project
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "features": {
                    "artifacts": "disabled",
                    "testplans": "disabled"
                  },
                  "name": "Example Project",
                  "version_control": "Git",
                  "visibility": "private",
                  "work_item_template": "Agile"
                }
        argumentDocs:
            azuredevops_project_features: resource
            description: '- (Optional) The Description of the Project.'
            features: '- (Optional) Defines the status (enabled, disabled) of the project features. Valid features are boards, repositories, pipelines, testplans, artifacts'
            id: '- The Project ID of the Project.'
            name: '- (Required) The Project Name.'
            process_template_id: '- The Process Template ID used by the Project.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Project.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Project.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Project.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Project.'
            version_control: '- (Optional) Specifies the version control system. Possbile values are: Git or Tfvc. Defaults to Git.'
            visibility: '- (Optional) Specifies the visibility of the Project. Possible values are: private or public. Defaults to private.'
            work_item_template: '- (Optional) Specifies the work item template. Possible values are: Agile, Basic, CMMI, Scrum or a custom, pre-existing one. Defaults to Agile. An empty string will use the parent organization default.'
        importStatements: []
    azuredevops_project_features:
        subCategory: ""
        description: Manages features for Azure DevOps projects.
        name: azuredevops_project_features
        title: azuredevops_project_features
        examples:
            - name: example-features
              manifest: |-
                {
                  "features": {
                    "artifacts": "enabled",
                    "testplans": "disabled"
                  },
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            azuredevops_project_features: resource
            features: '- (Required) Defines the status (enabled, disabled) of the project features.  Valid features boards, repositories, pipelines, testplans, artifacts'
            projectd_id: '- (Required) The id of the project for which the project features will be managed.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Project Features.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Project Features.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Project Features.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Project Features.'
        importStatements: []
    azuredevops_project_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps project
        name: azuredevops_project_permissions
        title: azuredevops_project_permissions
        examples:
            - name: example-permission
              manifest: |-
                {
                  "permissions": {
                    "DELETE": "Deny",
                    "DELETE_TEST_RESULTS": "Deny",
                    "EDIT_BUILD_STATUS": "NotSet",
                    "WORK_ITEM_MOVE": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Project Permission.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Project Permission.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Project Permission.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Project Permission.'
        importStatements: []
    azuredevops_project_pipeline_settings:
        subCategory: ""
        description: Manages Pipeline Settings for Azure DevOps projects.
        name: azuredevops_project_pipeline_settings
        title: azuredevops_project_pipeline_settings
        examples:
            - name: example
              manifest: |-
                {
                  "enforce_job_scope": true,
                  "enforce_referenced_repo_scoped_token": false,
                  "enforce_settable_var": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "publish_pipeline_metadata": false,
                  "status_badges_are_private": true
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            enforce_job_scope: '- (Optional) Limit job authorization scope to current project for non-release pipelines.'
            enforce_job_scope_for_release: '- (Optional) Limit job authorization scope to current project for release pipelines.'
            enforce_referenced_repo_scoped_token: '- (Optional) Protect access to repositories in YAML pipelines.'
            enforce_settable_var: '- (Optional) Limit variables that can be set at queue time.'
            id: '- The ID of the project.'
            project_id: '- (Required) The ID of the project for which the project pipeline settings will be managed.'
            publish_pipeline_metadata: '- (Optional) Publish metadata from pipelines.'
            status_badges_are_private: '- (Optional) Disable anonymous access to badges.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Project Pipeline Settings.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Project Pipeline Settings.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Project Pipeline Settings.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Project Pipeline Settings.'
        importStatements: []
    azuredevops_project_tags:
        subCategory: ""
        description: Manages Project Tags within Azure DevOps organization.
        name: azuredevops_project_tags
        title: azuredevops_project_tags
        examples:
            - name: example
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "tags": [
                    "tag1",
                    "tag2"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            project_id: '- (Required) The ID of the Project. Changing this forces a new resource to be created.'
            tags: '- (Required) A mapping of tags assigned to the Project.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Project Tags.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Project Tags.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Project Tags.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Project Tags.'
        importStatements: []
    azuredevops_repository_policy_author_email_pattern:
        subCategory: ""
        description: Manages author email pattern repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_author_email_pattern
        title: azuredevops_repository_policy_author_email_pattern
        examples:
            - name: example
              manifest: |-
                {
                  "author_email_patterns": [
                    "user1@test.com",
                    "user2@test.com"
                  ],
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "author_email_patterns": [
                    "user1@test.com",
                    "user2@test.com"
                  ],
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            '!': are excluded. Order is important.
            author_email_patterns: '- (Required) Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards.'
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of repository policy configuration.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Author Email Pattern Repository Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Author Email Pattern Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Author Email Pattern Repository Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Author Email Pattern Repository Policy.'
        importStatements: []
    azuredevops_repository_policy_case_enforcement:
        subCategory: ""
        description: Manages a case enforcement repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_case_enforcement
        title: azuredevops_repository_policy_case_enforcement
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "enforce_consistent_case": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "enforce_consistent_case": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            enforce_consistent_case: '- (Required) Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Case Enforcement Repository Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Case Enforcement Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Case Enforcement Repository Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Case Enforcement Repository Policy.'
        importStatements: []
    azuredevops_repository_policy_check_credentials:
        subCategory: ""
        description: Manage a credentials check repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_check_credentials
        title: azuredevops_repository_policy_check_credentials
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Check Credentials Repository Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Check Credentials Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Check Credentials Repository Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Check Credentials Repository Policy.'
        importStatements: []
    azuredevops_repository_policy_file_path_pattern:
        subCategory: ""
        description: Manages a file path pattern repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_file_path_pattern
        title: azuredevops_repository_policy_file_path_pattern
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "filepath_patterns": [
                    "*.go",
                    "/home/test/*.ts"
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: examplep
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "filepath_patterns": [
                    "*.go",
                    "/home/test/*.ts"
                  ],
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            filepath_patterns: '- (Required) Block pushes from introducing file paths that match the following patterns. Exact paths begin with "/". You can specify exact paths and wildcards. You can also specify multiple paths using ";" as a separator. Paths prefixed with "!" are excluded. Order is important.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 30 minutes) Used when creating the File Path Pattern Repository Policy.'
            timeouts.delete: '- (Defaults to 30 minutes) Used when deleting the File Path Pattern Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the File Path Pattern Repository Policy.'
            timeouts.update: '- (Defaults to 30 minutes) Used when updating the File Path Pattern Repository Policy.'
        importStatements: []
    azuredevops_repository_policy_max_file_size:
        subCategory: ""
        description: Manages a max file size repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_max_file_size
        title: azuredevops_repository_policy_max_file_size
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_file_size": 1,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_file_size": 1,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            max_file_size: '- (Required) Block pushes that contain new or updated files larger than this limit. Possible values are: 1, 2, 5, 10, 50, 100, 200 (MB).'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Maximum File Size Repository Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Maximum File Size Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Maximum File Size Repository Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Maximum File Size Repository Policy.'
        importStatements: []
    azuredevops_repository_policy_max_path_length:
        subCategory: ""
        description: Manages a max path length repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_max_path_length
        title: azuredevops_repository_policy_max_path_length
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_path_length": 500,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Sample Repo",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "max_path_length": 1000,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            max_path_length: '- (Required) Block pushes that introduce paths that exceed the specified length.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Maximum Path Length Repository Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Maximum Path Length Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Maximum Path Length Repository Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Maximum Path Length Repository Policy.'
        importStatements: []
    azuredevops_repository_policy_reserved_names:
        subCategory: ""
        description: Manage a reserved names repository policy within Azure DevOps project.
        name: azuredevops_repository_policy_reserved_names
        title: azuredevops_repository_policy_reserved_names
        examples:
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_ids": [
                    "${azuredevops_git_repository.example.id}"
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
                repository_ids: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "blocking": true,
                  "enabled": true,
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            blocking: '- (Optional) A flag indicating if the policy should be blocking. Defaults to true.'
            enabled: '- (Optional) A flag indicating if the policy should be enabled. Defaults to true.'
            id: '- The ID of the repository policy.'
            project_id: '- (Required) The ID of the project in which the policy will be created.'
            repository_ids: (Optional) Control whether the policy is enabled for the repository or the project. If repository_ids not configured, the policy will be set to the project.
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Reserved Names Repository Policy.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Reserved Names Repository Policy.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Reserved Names Repository Policy.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Reserved Names Repository Policy.'
        importStatements: []
    azuredevops_resource_authorization:
        subCategory: ""
        description: Manages authorization of resources within Azure DevOps organization.
        name: azuredevops_resource_authorization
        title: azuredevops_resource_authorization
        examples:
            - name: example
              manifest: |-
                {
                  "authorized": true,
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_id": "${azuredevops_serviceendpoint_bitbucket.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
                resource_id: azuredevops_serviceendpoint_bitbucket.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_bitbucket.example: |-
                    {
                      "description": "Managed by Terraform",
                      "password": "password",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "example-bitbucket",
                      "username": "username"
                    }
        argumentDocs:
            authorized: '- (Required) Set to true to allow public access in the project.'
            definition_id: '- (Optional) The ID of the build definition to authorize.'
            project_id: '- (Required) The project ID or project name.'
            resource_id: '- (Required) The ID of the resource to authorize.'
            type: '- (Optional) The type of the resource to authorize. Possible values: endpoint, queue, variablegroup. Defaults to value: endpoint.'
        importStatements: []
    azuredevops_securityrole_assignment:
        subCategory: ""
        description: Manages assignment of security roles to various resources within Azure DevOps organization.
        name: azuredevops_securityrole_assignment
        title: azuredevops_securityrole_assignment
        examples:
            - name: example
              manifest: |-
                {
                  "identity_id": "${azuredevops_group.example.origin_id}",
                  "resource_id": "${format(\"%s_%s\", azuredevops_project.example.id, azuredevops_environment.example.id)}",
                  "role_name": "Administrator",
                  "scope": "distributedtask.environmentreferencerole"
                }
              references:
                identity_id: azuredevops_group.example.origin_id
              dependencies:
                azuredevops_environment.example: |-
                    {
                      "description": "Example pipeline deployment environment",
                      "name": "Example Environment",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_group.example: |-
                    {
                      "description": "Description of example group",
                      "display_name": "Example group",
                      "scope": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            identity_id: '- (Required) The ID of the identity to authorize.'
            resource_id: '- (Required) The ID of the resource on which the role is to be assigned. Changing this forces a new resource to be created.'
            role_name: '- (Required) Name of the role to assign.'
            scope: '- (Required) The scope in which this assignment should exist.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Security Role Assignment.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Security Role Assignment.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Security Role Assignment.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Security Role Assignment.'
        importStatements: []
    azuredevops_service_principal_entitlement:
        subCategory: ""
        description: Manages a Service Principal Entitlement.
        name: azuredevops_service_principal_entitlement
        title: azuredevops_service_principal_entitlement
        examples:
            - name: example
              manifest: |-
                {
                  "origin_id": "00000000-0000-0000-0000-000000000000"
                }
        argumentDocs:
            account_license_type: '- (Optional) Type of Account License. Possible values are: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.'
            descriptor: '- The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.'
            display_name: '- The display name of service principal.'
            id: '- The ID of the Service Principal Entitlement.'
            licensing_source: '- (Optional) The source of the licensing (e.g. Account. MSDN etc.) Possible values are: account (Default), auto, msdn, none, profile, trial'
            origin: '- (Optional) The type of source provider for the origin identifier.'
            origin_id: '- (Required) The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Service Principal Entitlement.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Service Principal Entitlement.'
            timeouts.read: '- (Defaults to 2 minutes) Used when retrieving the Service Principal Entitlement.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Service Principal Entitlement.'
        importStatements:
            - terraform import azuredevops_service_principal_entitlement.example 8480c6eb-ce60-47e9-88df-eca3c801638b
    azuredevops_serviceendpoint_argocd:
        subCategory: ""
        description: Manages a ArgoCD server endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_argocd
        title: azuredevops_serviceendpoint_argocd
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example ArgoCD",
                  "url": "https://argocd.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example ArgoCD",
                  "url": "https://argocd.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block for the ArgoCD as documented below.'
            authentication_basic.password: '- (Required) The Password of the ArgoCD.'
            authentication_basic.username: '- (Required) The Username of the ArgoCD.'
            authentication_token: '- (Optional) An authentication_token block for the ArgoCD as documented below.'
            authentication_token.token: '- (Required)  Authentication Token generated through ArgoCD.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Argo CD Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Argo CD Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Argo CD Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Argo CD Service Endpoint.'
            url: '- (Required) URL of the ArgoCD server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_artifactory:
        subCategory: ""
        description: Manages an JFrog Artifactory server endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_artifactory
        title: azuredevops_serviceendpoint_artifactory
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic.password: '- (Required) The Password of the Artifactory.'
            authentication_basic.username: '- (Required) The Username of the Artifactory.'
            authentication_token: '- (Optional) A authentication_token block as defined below.'
            authentication_token.token: '- (Required) Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the JFrog Artifactory Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the JFrog Artifactory Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the JFrog Artifactory Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the JFrog Artifactory Service Endpoint.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_aws:
        subCategory: ""
        description: Manages a AWS service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_aws
        title: azuredevops_serviceendpoint_aws
        examples:
            - name: example
              manifest: |-
                {
                  "access_key_id": "00000000-0000-0000-0000-000000000000",
                  "description": "Managed by AzureDevOps",
                  "project_id": "${azuredevops_project.example.id}",
                  "secret_access_key": "accesskey",
                  "service_endpoint_name": "Example AWS"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            access_key_id: '- (Optional) The AWS access key ID for signing programmatic requests.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            external_id: '- (Optional) A unique identifier that is used by third parties when assuming roles in their customers'' accounts, aka cross-account role access.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            role_session_name: '- (Optional) Optional identifier for the assumed role session.'
            role_to_assume: '- (Optional) The Amazon Resource Name (ARN) of the role to assume.'
            secret_access_key: '- (Optional) The AWS secret access key for signing programmatic requests.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            session_token: '- (Optional) The AWS session token for signing programmatic requests.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the AWS Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the AWS Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the AWS Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the AWS Service Endpoint.'
            use_oidc: '- (Optional) Enable this to attempt getting credentials with OIDC token from Azure Devops.'
        importStatements: []
    azuredevops_serviceendpoint_azure_service_bus:
        subCategory: ""
        description: Manages a Azure Service Bus service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azure_service_bus
        title: azuredevops_serviceendpoint_azure_service_bus
        examples:
            - name: example
              manifest: |-
                {
                  "connection_string": "connection string",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "queue_name": "queue",
                  "service_endpoint_name": "Example Azure Service Bus"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            connection_string: '- (Required) The  Azure Service Bus Connection string.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            queue_name: '- (Required) The Azure Service Bus Queue Name.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Service Bus Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Service Bus Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Service Bus Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Service Bus Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_azurecr:
        subCategory: ""
        description: Manages a Azure Container Registry service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azurecr
        title: azuredevops_serviceendpoint_azurecr
        examples:
            - name: example
              manifest: |-
                {
                  "azurecr_name": "ExampleAcr",
                  "azurecr_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurecr_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurecr_subscription_name": "subscription name",
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_group": "example-rg",
                  "service_endpoint_name": "Example AzureCR"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurecr_name": "ExampleAcr",
                  "azurecr_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurecr_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurecr_subscription_name": "subscription name",
                  "credentials": [
                    {
                      "serviceprincipalid": "${azurerm_user_assigned_identity.example.client_id}"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "resource_group": "Example AzureCR ResourceGroup",
                  "service_endpoint_authentication_scheme": "WorkloadIdentityFederation",
                  "service_endpoint_name": "Example AzureCR"
                }
              references:
                credentials.serviceprincipalid: azurerm_user_assigned_identity.example.client_id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azurerm_federated_identity_credential.example: |-
                    {
                      "audience": [
                        "api://AzureADTokenExchange"
                      ],
                      "issuer": "${azuredevops_serviceendpoint_azurecr.example.workload_identity_federation_issuer}",
                      "name": "example-federated-credential",
                      "parent_id": "${azurerm_user_assigned_identity.example.id}",
                      "resource_group_name": "${azurerm_resource_group.identity.name}",
                      "subject": "${azuredevops_serviceendpoint_azurecr.example.workload_identity_federation_subject}"
                    }
                azurerm_resource_group.identity: |-
                    {
                      "location": "UK South",
                      "name": "identity"
                    }
                azurerm_user_assigned_identity.example: |-
                    {
                      "location": "${azurerm_resource_group.identity.location}",
                      "name": "example-identity",
                      "resource_group_name": "${azurerm_resource_group.identity.name}"
                    }
        argumentDocs:
            azurecr_name: '- (Required) The Azure container registry name.'
            azurecr_spn_tenantid: '- (Required) The tenant id of the service principal.'
            azurecr_subscription_id: '- (Required) The subscription id of the Azure targets.'
            azurecr_subscription_name: '- (Required) The subscription name of the Azure targets.'
            credentials: '- (Optional) A credentials block as defined below.'
            credentials.serviceprincipalid: '- (Required) The ID of the Service Principal Application.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            resource_group: '- (Required) The resource group to which the container registry belongs.'
            service_endpoint_authentication_scheme: '- (Optional) Specifies the type of azurerm endpoint, either WorkloadIdentityFederation, ManagedServiceIdentity or ServicePrincipal. Defaults to ServicePrincipal for backwards compatibility. ManagedServiceIdentity has not yet been implemented for this resource.'
            service_endpoint_name: '- (Required) The name you will use to refer to this service connection in task inputs.'
            service_principal_id: '- The Application(Client) ID of the Service Principal.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Azure Container Registry Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Azure Container Registry Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Azure Container Registry Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Azure Container Registry Service Endpoint.'
            workload_identity_federation_issuer: '- The issuer if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation. This looks like https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000, where the GUID is the Organization ID of your Azure DevOps Organisation.'
            workload_identity_federation_subject: '- The subject if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation. This looks like sc://<organisation>/<project>/<service-connection-name>.'
        importStatements: []
    azuredevops_serviceendpoint_azuredevops:
        subCategory: ""
        description: Manages a Azure DevOps service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azuredevops
        title: azuredevops_serviceendpoint_azuredevops
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "org_url": "https://dev.azure.com/testorganization",
                  "personal_access_token": "0000000000000000000000000000000000000000000000000000",
                  "project_id": "${azuredevops_project.example.id}",
                  "release_api_url": "https://vsrm.dev.azure.com/testorganization",
                  "service_endpoint_name": "Example Azure DevOps"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            org_url: '- (Required) The organization URL.'
            personal_access_token: '- (Required) The Azure DevOps personal access token.'
            project_id: '- (Required) The ID of the project.'
            release_api_url: '- (Required) The URL of the release API.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
        importStatements: []
    azuredevops_serviceendpoint_azurerm:
        subCategory: ""
        description: Manages a Azure Resource Manager service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_azurerm
        title: azuredevops_serviceendpoint_azurerm
        examples:
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "credentials": [
                    {
                      "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                      "serviceprincipalkey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_authentication_scheme": "ServicePrincipal",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_management_group_id": "managementGroup",
                  "azurerm_management_group_name": "managementGroup",
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "credentials": [
                    {
                      "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                      "serviceprincipalkey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_authentication_scheme": "ServicePrincipal",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_authentication_scheme": "ServicePrincipal",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "credentials": [
                    {
                      "serviceprincipalid": "${azurerm_user_assigned_identity.example.client_id}"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_authentication_scheme": "WorkloadIdentityFederation",
                  "service_endpoint_name": "${local.service_connection_name}"
                }
              references:
                credentials.serviceprincipalid: azurerm_user_assigned_identity.example.client_id
                project_id: azuredevops_project.example.id
                service_endpoint_name: local.service_connection_name
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azurerm_federated_identity_credential.example: |-
                    {
                      "audience": [
                        "api://AzureADTokenExchange"
                      ],
                      "issuer": "${azuredevops_serviceendpoint_azurerm.example.workload_identity_federation_issuer}",
                      "name": "example-federated-credential",
                      "parent_id": "${azurerm_user_assigned_identity.example.id}",
                      "resource_group_name": "${azurerm_resource_group.identity.name}",
                      "subject": "${azuredevops_serviceendpoint_azurerm.example.workload_identity_federation_subject}"
                    }
                azurerm_resource_group.identity: |-
                    {
                      "location": "UK South",
                      "name": "identity"
                    }
                azurerm_user_assigned_identity.example: |-
                    {
                      "location": "${azurerm_resource_group.identity.location}",
                      "name": "example-identity",
                      "resource_group_name": "azurerm_resource_group.identity.name"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_authentication_scheme": "WorkloadIdentityFederation",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                  "azurerm_subscription_name": "Example Subscription Name",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_authentication_scheme": "ManagedServiceIdentity",
                  "service_endpoint_name": "Example AzureRM"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            WorkloadIdentityFederation: authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found here.
            azurerm_management_group_id: '- (Optional) The Management group ID of the Azure targets.'
            azurerm_management_group_name: '- (Optional) The Management group Name of the targets.'
            azurerm_spn_tenantid: '- (Required) The Tenant ID of the service principal.'
            azurerm_subscription_id: '- (Optional) The Subscription ID of the Azure targets.'
            azurerm_subscription_name: '- (Optional) The Subscription Name of the targets.'
            credentials: '- (Optional) A credentials block as defined below.'
            credentials.serviceprincipalcertificate: '- (Optional) The service principal certificate. This not required if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation.'
            credentials.serviceprincipalid: '- (Required) The service principal application ID'
            credentials.serviceprincipalkey: '- (Optional) The service principal secret. This not required if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation.'
            description: '- (Optional) Service connection description.'
            environment: '- (Optional) The Cloud Environment to use. Defaults to AzureCloud. Possible values are AzureCloud, AzureChinaCloud, AzureUSGovernment, AzureGermanCloud and AzureStack. Changing this forces a new resource to be created.'
            features: '- (Optional) A features block as defined below.'
            features.validate: '- (Optional) Whether or not to validate connection with Azure after create or update operations. Defaults to false'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            resource_group: '- (Optional) The resource group used for scope of automatic service endpoint.'
            server_url: '- (Optional) The server URL of the service endpoint. Changing this forces a new resource to be created.'
            service_endpoint_authentication_scheme: '- (Optional) Specifies the type of Azure Resource Manager Service Endpoint. Possible values are WorkloadIdentityFederation, ManagedServiceIdentity or ServicePrincipal. Defaults to ServicePrincipal for backwards compatibility.'
            service_endpoint_name: '- (Required) The Service Endpoint Name.'
            service_principal_id: '- The Application(Client) ID of the Service Principal.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Azure Resource Manager Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Azure Resource Manager Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Azure Resource Manager Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Azure Resource Manager Service Endpoint.'
            workload_identity_federation_issuer: '- The issuer if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation. This looks like https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000, where the GUID is the Organization ID of your Azure DevOps Organisation.'
            workload_identity_federation_subject: '- The subject if service_endpoint_authentication_scheme is set to WorkloadIdentityFederation. This looks like sc://<organisation>/<project>/<service-connection-name>.'
        importStatements: []
    azuredevops_serviceendpoint_bitbucket:
        subCategory: ""
        description: Manages a Bitbucket service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_bitbucket
        title: azuredevops_serviceendpoint_bitbucket
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Bitbucket",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) Bitbucket account password.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Bitbucket Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Bitbucket Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Bitbucket Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Bitbucket Service Endpoint.'
            username: '- (Required) Bitbucket account username.'
        importStatements: []
    azuredevops_serviceendpoint_black_duck:
        subCategory: ""
        description: Manages a Black Duck Detect service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_black_duck
        title: azuredevops_serviceendpoint_black_duck
        examples:
            - name: example
              manifest: |-
                {
                  "api_token": "token",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://blackduck.com/",
                  "service_endpoint_name": "Example Black Duck"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_token: '- (Required) The API token of the Black Duck Detect.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The server URL of the Black Duck Detect.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Black Duck Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Black Duck Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Black Duck Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Black Duck Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_checkmarx_one:
        subCategory: ""
        description: Manages a Checkmarx One service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_checkmarx_one
        title: azuredevops_serviceendpoint_checkmarx_one
        examples:
            - name: example
              manifest: |-
                {
                  "api_key": "apikey",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://server.com",
                  "service_endpoint_name": "Example Checkmarx One"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authorization_url": "https://authurl.com",
                  "client_id": "clientid",
                  "client_secret": "secret",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://server.com",
                  "service_endpoint_name": "Example Checkmarx One"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_key: '- (Optional) The account of the Checkmarx One. Conflict with client_id and client_secret.'
            authorization_url: '- (Optional) The URL of Checkmarx Authorization. Used when using client_id and client_secret authorization.'
            client_id: '- (Optional) The Client ID of the Checkmarx One. Conflict with api_key'
            client_secret: '- (Optional) The Client Secret of the Checkmarx One. Conflict with api_key'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The Server URL of the Checkmarx One Service.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Checkmarx One Service.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Checkmarx One Service.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Checkmarx One Service.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Checkmarx One Service.'
        importStatements: []
    azuredevops_serviceendpoint_checkmarx_sast:
        subCategory: ""
        description: Manages a Checkmarx SAST service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_checkmarx_sast
        title: azuredevops_serviceendpoint_checkmarx_sast
        examples:
            - name: example
              manifest: |-
                {
                  "password": "password",
                  "preset": "preset",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://server.com",
                  "service_endpoint_name": "Example Checkmarx SAST",
                  "team": "team",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) The password of the Checkmarx SAST.'
            preset: '- (Optional) Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The Server URL of the Checkmarx SAST.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            team: '- (Optional) The full team name of the Checkmarx.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Checkmarx SAST Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Checkmarx SAST Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Checkmarx SAST Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Checkmarx SAST Service Endpoint.'
            username: '- (Required) The username of the Checkmarx SAST.'
        importStatements: []
    azuredevops_serviceendpoint_checkmarx_sca:
        subCategory: ""
        description: Manages a Checkmarx SCA service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_checkmarx_sca
        title: azuredevops_serviceendpoint_checkmarx_sca
        examples:
            - name: example
              manifest: |-
                {
                  "access_control_url": "https://accesscontrol.com",
                  "account": "account",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://server.com",
                  "service_endpoint_name": "Example Checkmarx SCA",
                  "username": "username",
                  "web_app_url": "https://webapp.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            access_control_url: '- (Required) The Access Control URL of the Checkmarx SCA.'
            account: '- (Required) The account of the Checkmarx SCA.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) The password of the Checkmarx SCA.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The Server URL of the Checkmarx SCA.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            team: '- (Optional) The full team name of the Checkmarx.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Checkmarx SCA Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Checkmarx SCA Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Checkmarx SCA Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Checkmarx SCA Service Endpoint.'
            username: '- (Required) The username of the Checkmarx SCA.'
            web_app_url: '- (Required) The Web App URL of the Checkmarx SCA.'
        importStatements: []
    azuredevops_serviceendpoint_dockerregistry:
        subCategory: ""
        description: Manages a Docker Registry service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_dockerregistry
        title: azuredevops_serviceendpoint_dockerregistry
        examples:
            - name: example
              manifest: |-
                {
                  "docker_email": "email@example.com",
                  "docker_password": "12345",
                  "docker_username": "example",
                  "project_id": "${azuredevops_project.example.id}",
                  "registry_type": "DockerHub",
                  "service_endpoint_name": "Example Docker Hub"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-other
              manifest: |-
                {
                  "docker_password": "12345",
                  "docker_registry": "https://sample.azurecr.io/v1",
                  "docker_username": "sample",
                  "project_id": "${azuredevops_project.example.id}",
                  "registry_type": "Others",
                  "service_endpoint_name": "Example Docker Registry"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            docker_email: '- (Optional) The email for Docker account user.'
            docker_password: '- (Optional) The password for the account user identified above.'
            docker_registry: '- (Optional) The URL of the Docker registry. (Default: "https://index.docker.io/v1/")'
            docker_username: '- (Optional) The identifier of the Docker account user.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            registry_type: '- (Optional) Can be "DockerHub" or "Others" (Default "DockerHub")'
            service_endpoint_name: '- (Required) The name you will use to refer to this service connection in task inputs.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Docker Registry Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Docker Registry Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Docker Registry Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Docker Registry Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_dynamics_lifecycle_services:
        subCategory: ""
        description: Manages a Dynamics Lifecycle Services service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_dynamics_lifecycle_services
        title: azuredevops_serviceendpoint_dynamics_lifecycle_services
        examples:
            - name: example
              manifest: |-
                {
                  "authorization_endpoint": "https://login.microsoftonline.com/organization",
                  "client_id": "00000000-0000-0000-0000-000000000000",
                  "description": "Managed by Terraform",
                  "lifecycle_services_api_endpoint": "https://lcsapi.lcs.dynamics.com",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Service connection",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authorization_endpoint: '- (Required) The URL of the Authentication Endpoint.'
            client_id: '- (Required) The client ID for a native application registration in Azure Active Directory with API permissions for Dynamics Lifecycle Services.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            lifecycle_services_api_endpoint: '- (Required) The URL of the Lifecycle Services API Endpoint.'
            password: '- (Required) The Password for the Azure Active Directory account.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Dynamic Life Cycle Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Dynamic Life Cycle Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Dynamic Life Cycle Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Dynamic Life Cycle Service Endpoint.'
            username: '- (Required) The E-mail address of user with sufficient permissions to interact with LCS asset library and environments.'
        importStatements: []
    azuredevops_serviceendpoint_externaltfs:
        subCategory: ""
        description: Manages an Azure Repository/Team Foundation Server service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_externaltfs
        title: azuredevops_serviceendpoint_externaltfs
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "connection_url": "https://dev.azure.com/myorganization",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example External TFS Name"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_personal: '- (Required) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for Azure DevOps Organization.'
            connection_url: '- (Required) Azure DevOps Organization or TFS Project Collection Url.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Azure Repository/Team Foundation Server Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Azure Repository/Team Foundation Server Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Azure Repository/Team Foundation Server Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Azure Repository/Team Foundation Server Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_gcp_terraform:
        subCategory: ""
        description: Manages a GCP for Terraform service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_gcp_terraform
        title: azuredevops_serviceendpoint_gcp_terraform
        examples:
            - name: example
              manifest: |-
                {
                  "client_email": "gcp-sa-example@example.iam.gserviceaccount.com",
                  "description": "Managed by Terraform",
                  "gcp_project_id": "Example GCP Project",
                  "private_key": "0000000000000000000000000000000000000",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GCP Terraform extension",
                  "token_uri": "https://oauth2.example.com/token"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            client_email: '- (Optional) The client email field in the JSON key file for creating the JSON Web Token.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            gcp_project_id: '- (Required) GCP project associated with the Service Connection.'
            id: '- The ID of the service endpoint.'
            private_key: '- (Required) The Private Key for connecting to the endpoint.'
            project_id: '- (Required) The ID of the project.'
            scope: '- (Optional) Scope to be provided.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the GCP for Terraform Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the GCP for Terraform Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the GCP for Terraform Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the GCP for Terraform Service Endpoint.'
            token_uri: '- (Required) The token uri field in the JSON key file for creating the JSON Web Token.'
        importStatements: []
    azuredevops_serviceendpoint_generic:
        subCategory: ""
        description: Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external server using basic authentication via a username and password.
        name: azuredevops_serviceendpoint_generic
        title: azuredevops_serviceendpoint_generic
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://some-server.example.com",
                  "service_endpoint_name": "Example Generic",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) The password or token key used to authenticate to the server url using basic authentication.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The URL of the server associated with the service endpoint.'
            service_endpoint_name: '- (Required) The service endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Generic Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Generic Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Generic Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Generic Service Endpoint.'
            username: '- (Optional) The username used to authenticate to the server url using basic authentication.'
        importStatements: []
    azuredevops_serviceendpoint_generic_git:
        subCategory: ""
        description: Manages an Other Git service endpoint within Azure DevOps, which can be used to authenticate to any external git service using basic authentication via a username and password.
        name: azuredevops_serviceendpoint_generic_git
        title: azuredevops_serviceendpoint_generic_git
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_url": "https://dev.azure.com/org/project/_git/repository",
                  "service_endpoint_name": "Example Generic Git",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            enable_pipelines_access: '- (Optional) A value indicating whether or not to attempt accessing this git server from Azure Pipelines.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) The PAT or password used to authenticate to the git repository.'
            project_id: '- (Required) The ID of the project.'
            repository_url: '- (Required) The URL of the repository associated with the service endpoint.'
            service_endpoint_name: '- (Required) The name of the service endpoint.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Other Git Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Other Git Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Other Git Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Other Git Service Endpoint.'
            username: '- (Optional) The username used to authenticate to the git repository.'
        importStatements: []
    azuredevops_serviceendpoint_github:
        subCategory: ""
        description: Manages a GitHub service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_github
        title: azuredevops_serviceendpoint_github
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Personal Access Token"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "auth_oauth": [
                    {
                      "oauth_configuration_id": "00000000-0000-0000-0000-000000000000"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Apps: Azure Pipelines"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_oauth: '- (Optional) An auth_oauth block as documented below. Allows connecting using an Oauth token.'
            auth_oauth.oauth_configuration_id: '- (Required) The OAuth Configuration ID.'
            auth_personal: '- (Optional) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for GitHub.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the GitHub Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the GitHub Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the GitHub Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the GitHub Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_github_enterprise:
        subCategory: ""
        description: Manages a GitHub Enterprise Server service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_github_enterprise
        title: azuredevops_serviceendpoint_github_enterprise
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Enterprise",
                  "url": "https://github.contoso.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "auth_oauth": [
                    {
                      "oauth_configuration_id": "00000000-0000-0000-0000-000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitHub Enterprise"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_oauth: '- (Optional) An auth_oauth block as documented below. Allows connecting using an Oauth token.'
            auth_oauth.oauth_configuration_id: '- (Required) The OAuth Configuration ID.'
            auth_personal: '- (Optional) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for GitHub.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the GitHub Enterprise Server Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the GitHub Enterprise Server Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the GitHub Enterprise Server Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the GitHub Enterprise Server Service Endpoint.'
            url: '- (Optional) GitHub Enterprise Server Url.'
        importStatements: []
    azuredevops_serviceendpoint_gitlab:
        subCategory: ""
        description: Manages a GitLab service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_gitlab
        title: azuredevops_serviceendpoint_gitlab
        examples:
            - name: example
              manifest: |-
                {
                  "api_token": "token",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example GitLab",
                  "url": "https://gitlab.com",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_token: '- (Required) The API token of the GitLab.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Gitlab Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Gitlab Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Gitlab Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Gitlab Service Endpoint.'
            url: '- (Required) The server URL for GitLab. Example: https://gitlab.com.'
            username: '- (Required) The username used to login to GitLab.'
        importStatements: []
    azuredevops_serviceendpoint_incomingwebhook:
        subCategory: ""
        description: Manages a Service Connection Incoming WebHook.
        name: azuredevops_serviceendpoint_incomingwebhook
        title: azuredevops_serviceendpoint_incomingwebhook
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "http_header": "X-Hub-Signature",
                  "project_id": "${azuredevops_project.example.id}",
                  "secret": "secret",
                  "service_endpoint_name": "Example IncomingWebhook",
                  "webhook_name": "example_webhook"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            http_header: '- (Optional) Http header name on which checksum will be sent.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Service Connection Incoming WebHook to be created.'
            secret: '- (Optional) Secret for the WebHook. WebHook service will use this secret to calculate the payload checksum.'
            service_endpoint_name: '- (Required) The name of the service endpoint. Changing this forces a new Service Connection Incoming WebHook to be created.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Incoming WebHook Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Incoming WebHook Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Incoming WebHook Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Incoming WebHook Service Endpoint.'
            webhook_name: '- (Required) The name of the WebHook.'
        importStatements:
            - terraform import azuredevops_serviceendpoint_incomingwebhook.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
    azuredevops_serviceendpoint_jenkins:
        subCategory: ""
        description: Manages a Service Connection for Jenkins.
        name: azuredevops_serviceendpoint_jenkins
        title: azuredevops_serviceendpoint_jenkins
        examples:
            - name: example
              manifest: |-
                {
                  "accept_untrusted_certs": false,
                  "description": "Service Endpoint for 'Jenkins' (Managed by Terraform)",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "jenkins-example",
                  "url": "https://example.com",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            accept_untrusted_certs: '- (Optional) Allows the Jenkins clients to accept self-signed SSL server certificates. Defaults to false.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) The Service Endpoint password to authenticate at the Jenkins Instance.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Service Connection Jenkins to be created.'
            service_endpoint_name: '- (Required) The name of the service endpoint. Changing this forces a new Service Connection Jenkins to be created.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Jenkins Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Jenkins Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Jenkins Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Jenkins Service Endpoint.'
            url: '- (Required) The Service Endpoint url.'
            username: '- (Required) The Service Endpoint username to authenticate at the Jenkins Instance.'
        importStatements:
            - terraform import azuredevops_serviceendpoint_jenkins.example projectName/00000000-0000-0000-0000-000000000000
    azuredevops_serviceendpoint_jfrog_artifactory_v2:
        subCategory: ""
        description: Manages a JFrog Artifactory V2 service endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_artifactory_v2
        title: azuredevops_serviceendpoint_jfrog_artifactory_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Artifactory V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Artifactory V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block as documented below.'
            authentication_basic.password: '- (Required) The Password of the Artifactory.'
            authentication_basic.username: '- (Required) The Username of the Artifactory.'
            authentication_token: '- (Optional) An authentication_token block as documented below.'
            authentication_token.token: '- (Required) Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the JFrog Artifactory V2 Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the JFrog Artifactory V2 Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the JFrog Artifactory V2 Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the JFrog Artifactory V2 Service Endpoint.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_jfrog_distribution_v2:
        subCategory: ""
        description: Manages a JFrog Distribution V2 service endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_distribution_v2
        title: azuredevops_serviceendpoint_jfrog_distribution_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Distribution V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example JFrog Distribution V2",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block as documented below.'
            authentication_basic.password: '- (Required) The Password of the Artifactory.'
            authentication_basic.username: '- (Required) The Username of the Artifactory.'
            authentication_token: '- (Optional) An authentication_token block as documented below.'
            authentication_token.token: '- (Required) The Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the JFrog Distribution V2 Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the JFrog Distribution V2 Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the JFrog Distribution V2 Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the JFrog Distribution V2 Service Endpoint.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_jfrog_platform_v2:
        subCategory: ""
        description: Manages a JFrog Platform V2 service endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_platform_v2
        title: azuredevops_serviceendpoint_jfrog_platform_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block as documented below.'
            authentication_basic.password: '- (Required) The Password of the Artifactory.'
            authentication_basic.username: '- (Required) The Username of the  Artifactory.'
            authentication_token: '- (Optional) An authentication_token block as documented below.'
            authentication_token.token: '- (Required) Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the JFrog Platform V2 Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the JFrog Platform V2 Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the JFrog Platform V2 Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the JFrog Platform V2 Service Endpoint.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_jfrog_xray_v2:
        subCategory: ""
        description: Manages a JFrog XRay V2 service endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_jfrog_xray_v2
        title: azuredevops_serviceendpoint_jfrog_xray_v2
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Artifactory",
                  "url": "https://artifactory.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block as documented below.'
            authentication_basic.password: '- (Required) The Password of the Artifactory.'
            authentication_basic.username: '- (Required) The Username of the  Artifactory.'
            authentication_token: '- (Optional) An authentication_token block as documented below.'
            authentication_token.token: '- (Required) Authentication Token generated through Artifactory.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the JFrog XRay V2 Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the JFrog XRay V2 Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the JFrog XRay V2 Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the JFrog XRay V2 Service Endpoint.'
            url: '- (Required) URL of the Artifactory server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_kubernetes:
        subCategory: ""
        description: Manages a Kubernetes service endpoint Azure DevOps organization.
        name: azuredevops_serviceendpoint_kubernetes
        title: azuredevops_serviceendpoint_kubernetes
        examples:
            - name: example-azure
              manifest: |-
                {
                  "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                  "authorization_type": "AzureSubscription",
                  "azure_subscription": [
                    {
                      "cluster_name": "example-aks",
                      "namespace": "default",
                      "resourcegroup_id": "example-rg",
                      "subscription_id": "00000000-0000-0000-0000-000000000000",
                      "subscription_name": "Example",
                      "tenant_id": "00000000-0000-0000-0000-000000000000"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Kubernetes"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-kubeconfig
              manifest: |-
                {
                  "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                  "authorization_type": "Kubeconfig",
                  "kubeconfig": [
                    {
                      "accept_untrusted_certs": true,
                      "cluster_context": "dev-frontend",
                      "kube_config": "                              apiVersion: v1\n                              clusters:\n                              - cluster:\n                                  certificate-authority: fake-ca-file\n                                  server: https://1.2.3.4\n                                name: development\n                              contexts:\n                              - context:\n                                  cluster: development\n                                  namespace: frontend\n                                  user: developer\n                                name: dev-frontend\n                              current-context: dev-frontend\n                              kind: Config\n                              preferences: {}\n                              users:\n                              - name: developer\n                                user:\n                                  client-certificate: fake-cert-file\n                                  client-key: fake-key-file\n"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Kubernetes"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-service-account
              manifest: |-
                {
                  "apiserver_url": "https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io",
                  "authorization_type": "ServiceAccount",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_account": [
                    {
                      "ca_cert": "0000000000000000000000000000000",
                      "token": "000000000000000000000000"
                    }
                  ],
                  "service_endpoint_name": "Example Kubernetes"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            apiserver_url: '- (Required) The hostname (in form of URI) of the Kubernetes API.'
            authorization_type: '- (Required) The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.'
            azure_subscription: '- (Optional) An azure_subscription block as defined below.'
            azure_subscription.azure_environment: '- (Optional) Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.'
            azure_subscription.cluster_admin: '- (Optional) Set this option to allow use cluster admin credentials.'
            azure_subscription.cluster_name: '- (Required) The name of the Kubernetes cluster.'
            azure_subscription.namespace: '- (Optional) The Kubernetes namespace. Default value is "default".'
            azure_subscription.resourcegroup_id: '- (Required) The resource group name, to which the Kubernetes cluster is deployed.'
            azure_subscription.subscription_id: '- (Required) The id of the Azure subscription.'
            azure_subscription.subscription_name: '- (Required) The name of the Azure subscription.'
            azure_subscription.tenant_id: '- (Required) The id of the tenant used by the subscription.'
            id: '- The ID of the service endpoint.'
            kubeconfig: '- (Optional) A kubeconfig block as defined below.'
            kubeconfig.accept_untrusted_certs: '- (Optional) Set this option to allow clients to accept a self-signed certificate.'
            kubeconfig.cluster_context: '- (Optional) Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.'
            kubeconfig.kube_config: '- (Required) The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.'
            project_id: '- (Required) The ID of the project.'
            service_account: '- (Optional)  A service_account block as defined below.'
            service_account.accept_untrusted_certs: '- (Optional) Set this option to allow clients to accept a self-signed certificate. Defaults to false.'
            service_account.ca_cert: '- (Required) The certificate from a Kubernetes secret object.'
            service_account.token: '- (Required) The token from a Kubernetes secret object.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Kubernetes Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Kubernetes Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Kubernetes Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Kubernetes Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_maven:
        subCategory: ""
        description: Manages a Service Connection for Maven.
        name: azuredevops_serviceendpoint_maven
        title: azuredevops_serviceendpoint_maven
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "description": "Service Endpoint for 'Maven' (Managed by Terraform)",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_id": "example",
                  "service_endpoint_name": "maven-example",
                  "url": "https://example.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Service Endpoint for 'Maven' (Managed by Terraform)",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_id": "example",
                  "service_endpoint_name": "maven-example",
                  "url": "https://example.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) A authentication_basic block as documented below.'
            authentication_basic.password: '- (Required) The password Maven Repository.'
            authentication_basic.username: '- (Required) The Username of the Maven Repository.'
            authentication_token: '- (Optional) A authentication_token block as documented below.'
            authentication_token.token: '- (Required) Authentication Token generated through maven repository.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Service Connection Maven to be created.'
            repository_id: '- (Required) The ID of the server that matches the id element of the repository/mirror that Maven tries to connect to.'
            service_endpoint_name: '- (Required) The name of the service endpoint. Changing this forces a new Service Connection Maven to be created.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Maven Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Maven Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Maven Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Maven Service Endpoint.'
            url: '- (Required) The URL of the Maven Repository.'
        importStatements:
            - terraform import azuredevops_serviceendpoint_maven.example projectName/00000000-0000-0000-0000-000000000000
    azuredevops_serviceendpoint_nexus:
        subCategory: ""
        description: Manages a Service Connection for Nexus IQ.
        name: azuredevops_serviceendpoint_nexus
        title: azuredevops_serviceendpoint_nexus
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Service Endpoint for 'Nexus IQ' (Managed by Terraform)",
                  "password": "password",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "nexus-example",
                  "url": "https://example.com",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            password: '- (Required) The Service Endpoint password to authenticate at the Nexus IQ Instance.'
            project_id: '- (Required) The ID of the project. Changing this forces a new Service Connection Nexus to be created.'
            service_endpoint_name: '- (Required) The name of the service endpoint. Changing this forces a new Service Connection Nexus to be created.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Nexus Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Nexus Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Nexus Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Nexus Service Endpoint.'
            url: '- (Required) The Service Endpoint url.'
            username: '- (Required) The Service Endpoint username to authenticate at the Nexus IQ Instance.'
        importStatements:
            - terraform import azuredevops_serviceendpoint_nexus.example projectName/00000000-0000-0000-0000-000000000000
    azuredevops_serviceendpoint_npm:
        subCategory: ""
        description: Manages a NPM service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_npm
        title: azuredevops_serviceendpoint_npm
        examples:
            - name: example
              manifest: |-
                {
                  "access_token": "00000000-0000-0000-0000-000000000000",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example npm",
                  "url": "https://registry.npmjs.org"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            access_token: '- (Required) The access token for npm registry.'
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the NPM Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the NPM Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the NPM Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the NPM Service Endpoint.'
            url: '- (Required) URL of the npm registry to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_nuget:
        subCategory: ""
        description: Manages a NuGet service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_nuget
        title: azuredevops_serviceendpoint_nuget
        examples:
            - name: example
              manifest: |-
                {
                  "api_key": "apikey",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example NuGet"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_key: '- (Optional) The API Key used to connect to the endpoint.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            feed_url: '- (Required) The URL for the feed. This will generally end with index.json.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) The account password used to connect to the endpoint'
            personal_access_token: '- (Optional) The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the NuGet Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the NuGet Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the NuGet Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the NuGet Service Endpoint.'
            username: '- (Optional) The account username used to connect to the endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_octopusdeploy:
        subCategory: ""
        description: Manages an Octopus Deploy service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_octopusdeploy
        title: azuredevops_serviceendpoint_octopusdeploy
        examples:
            - name: example
              manifest: |-
                {
                  "api_key": "000000000000000000000000000000000000",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Octopus Deploy",
                  "url": "https://octopus.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_key: '- (Required) API key to connect to Octopus Deploy.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            ignore_ssl_error: '- (Optional) Whether to ignore SSL errors when connecting to the Octopus server from the agent. Default to false.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Octopus Deploy Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Octopus Deploy Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Octopus Deploy Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Octopus Deploy Service Endpoint.'
            url: '- (Required) Octopus Server url.'
        importStatements: []
    azuredevops_serviceendpoint_openshift:
        subCategory: ""
        description: Manages an Openshift service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_openshift
        title: azuredevops_serviceendpoint_openshift
        examples:
            - name: example
              manifest: |-
                {
                  "accept_untrusted_certs": true,
                  "auth_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "certificate_authority_file": "/opt/file",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://example.server",
                  "service_endpoint_name": "Example Openshift"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "accept_untrusted_certs": true,
                  "auth_token": [
                    {
                      "token": "username"
                    }
                  ],
                  "certificate_authority_file": "/opt/file",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://example.server",
                  "service_endpoint_name": "Example Openshift"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "auth_none": [
                    {
                      "kube_config": "config"
                    }
                  ],
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://example.server",
                  "service_endpoint_name": "Example Openshift"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            accept_untrusted_certs: '- (Optional) Set this option to allow clients to accept a self-signed certificate. Available when using auth_basic or auth_token authorization.'
            auth_basic: '- (Optional) An auth_basic block as documented below.'
            auth_basic.password: '- (Required) The password of the user.'
            auth_basic.username: '- (Required) The name of the user.'
            auth_none: '- (Optional) An auth_none block as documented below.'
            auth_none.kube_config: '- (Optional) The kubectl config'
            auth_token: '- (Optional) An auth_token block as documented below.'
            auth_token.token: '- (Required) The API token.'
            certificate_authority_file: '- (Optional) The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using auth_basic or auth_token authorization.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Optional) The URL for the OpenShift cluster to connect to.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Openshift Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Openshift Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Openshift Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Openshift Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_permissions:
        subCategory: ""
        description: Manages permissions for a AzureDevOps Service Endpoint
        name: azuredevops_serviceendpoint_permissions
        title: azuredevops_serviceendpoint_permissions
        examples:
            - name: example-root-permissions
              manifest: |-
                {
                  "permissions": {
                    "Administer": "allow",
                    "Create": "allow",
                    "Use": "allow",
                    "ViewAuthorization": "allow",
                    "ViewEndpoint": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_dockerregistry.example: |-
                    {
                      "docker_email": "email@example.com",
                      "docker_password": "password",
                      "docker_username": "username",
                      "project_id": "${azuredevops_project.example.id}",
                      "registry_type": "DockerHub",
                      "service_endpoint_name": "Example Docker Hub"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "Administer": "deny",
                    "Create": "deny",
                    "Use": "allow",
                    "ViewAuthorization": "allow",
                    "ViewEndpoint": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}",
                  "serviceendpoint_id": "${azuredevops_serviceendpoint_dockerregistry.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
                serviceendpoint_id: azuredevops_serviceendpoint_dockerregistry.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_dockerregistry.example: |-
                    {
                      "docker_email": "email@example.com",
                      "docker_password": "password",
                      "docker_username": "username",
                      "project_id": "${azuredevops_project.example.id}",
                      "registry_type": "DockerHub",
                      "service_endpoint_name": "Example Docker Hub"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            serviceendpoint_id: '- (Optional) The id of the service endpoint to assign the permissions.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Service Endpoint Permissions.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Service Endpoint Permissions.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Service Endpoint Permissions.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Service Endpoint Permissions.'
        importStatements: []
    azuredevops_serviceendpoint_runpipeline:
        subCategory: ""
        description: Manages a Azure DevOps plugin RunPipeline.
        name: azuredevops_serviceendpoint_runpipeline
        title: azuredevops_serviceendpoint_runpipeline
        examples:
            - name: example
              manifest: |-
                {
                  "auth_personal": [
                    {
                      "personal_access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "organization_name": "Organization Name",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Pipeline Runner"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            auth_personal: '- (Required) An auth_personal block as documented below. Allows connecting using a personal access token.'
            auth_personal.personal_access_token: '- (Required) The Personal Access Token for Azure DevOps Pipeline. It also can be set with AZDO_PERSONAL_ACCESS_TOKEN environment variable.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            organization_name: '- (Required) The organization name used for Organization Url and Release API Url fields.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Run Pipeline Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Run Pipeline Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Run Pipeline Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Run Pipeline Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_servicefabric:
        subCategory: ""
        description: Manages a Service Fabric service endpoint Azure DevOps organization.
        name: azuredevops_serviceendpoint_servicefabric
        title: azuredevops_serviceendpoint_servicefabric
        examples:
            - name: example
              manifest: |-
                {
                  "certificate": [
                    {
                      "client_certificate": "${filebase64(\"certificate.pfx\")}",
                      "client_certificate_password": "password",
                      "server_certificate_lookup": "Thumbprint",
                      "server_certificate_thumbprint": "0000000000000000000000000000000000000000"
                    }
                  ],
                  "cluster_endpoint": "tcp://test",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Service Fabric"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: test
              manifest: |-
                {
                  "azure_active_directory": [
                    {
                      "password": "password",
                      "server_certificate_lookup": "Thumbprint",
                      "server_certificate_thumbprint": "0000000000000000000000000000000000000000",
                      "username": "username"
                    }
                  ],
                  "cluster_endpoint": "tcp://test",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.project.id}",
                  "service_endpoint_name": "Sample Service Fabric"
                }
              references:
                project_id: azuredevops_project.project.id
              dependencies:
                azuredevops_project.project: |-
                    {
                      "name": "Sample Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: test
              manifest: |-
                {
                  "cluster_endpoint": "tcp://test",
                  "description": "Managed by Terraform",
                  "none": [
                    {
                      "cluster_spn": "HTTP/www.contoso.com",
                      "unsecured": false
                    }
                  ],
                  "project_id": "${azuredevops_project.project.id}",
                  "service_endpoint_name": "Sample Service Fabric"
                }
              references:
                project_id: azuredevops_project.project.id
              dependencies:
                azuredevops_project.project: |-
                    {
                      "name": "Sample Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            azure_active_directory: -(Optional) An azure_active_directory block as documented below.
            azure_active_directory.password: '- (Required) - Password for the Azure Active Directory account.'
            azure_active_directory.server_certificate_common_name: '- (Optional) The common name(s) of the cluster''s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma ('','')'
            azure_active_directory.server_certificate_lookup: '- (Required) Verification mode for the cluster. Possible values are: Thumbprint, CommonName.'
            azure_active_directory.server_certificate_thumbprint: '- (Optional) The thumbprint(s) of the cluster''s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma ('','')'
            azure_active_directory.username: '- (Required) - Specify an Azure Active Directory account.'
            certificate: -(Optional) A certificate block as documented below.
            certificate.client_certificate: '- (Required) Base64 encoding of the cluster''s client certificate file.'
            certificate.client_certificate_password: '- (Optional) Password for the certificate.'
            certificate.server_certificate_common_name: '- (Optional) The common name(s) of the cluster''s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma ('','')'
            certificate.server_certificate_lookup: '- (Required) Verification mode for the cluster. Possible values are: Thumbprint, CommonName.'
            certificate.server_certificate_thumbprint: '- (Optional) The thumbprint(s) of the cluster''s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma ('','')'
            cluster_endpoint: '- (Required) Client connection endpoint for the cluster. Prefix the value with tcp://;. This value overrides the publish profile.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            none: -(Optional) A none block as documented below.
            none.cluster_spn: '- (Optional) Fully qualified domain SPN for gMSA account. This is applicable only if unsecured option is disabled.'
            none.unsecured: '- (Optional) Skip using windows security for authentication.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Service Fabric Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Service Fabric Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Service Fabric Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Service Fabric Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_snyk:
        subCategory: ""
        description: Manages a Snyk Security Scan service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_snyk
        title: azuredevops_serviceendpoint_snyk
        examples:
            - name: example
              manifest: |-
                {
                  "api_token": "00000000-0000-0000-0000-000000000000",
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "server_url": "https://snyk.io/",
                  "service_endpoint_name": "Example Snyk"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            api_token: '- (Required) The API token of the Snyk Security Scan.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            server_url: '- (Required) The server URL of the Snyk Security Scan.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Snyk Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Snyk Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Snyk Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Snyk Service Endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_sonarcloud:
        subCategory: ""
        description: Manages the SonarQube Cloud service endpoint within an Azure DevOps organization.
        name: azuredevops_serviceendpoint_sonarcloud
        title: azuredevops_serviceendpoint_sonarcloud
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example SonarCloud",
                  "token": "0000000000000000000000000000000000000000"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the SonarQube Cloud Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the SonarQube Cloud Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the SonarQube Cloud Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the SonarQube Cloud Service Endpoint.'
            token: '- (Required) The Authentication Token generated through SonarCloud (go to My Account > Security > Generate Tokens).'
        importStatements: []
    azuredevops_serviceendpoint_sonarqube:
        subCategory: ""
        description: Manages a SonarQube Server service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_sonarqube
        title: azuredevops_serviceendpoint_sonarqube
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example SonarQube",
                  "token": "0000000000000000000000000000000000000000",
                  "url": "https://sonarqube.my.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the SonarQube Server Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the SonarQube Server Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the SonarQube Server Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the SonarQube Server Service Endpoint.'
            token: '- (Required) The Authentication Token generated through SonarQube (go to My Account > Security > Generate Tokens).'
            url: '- (Required) URL of the SonarQube server to connect with.'
        importStatements: []
    azuredevops_serviceendpoint_ssh:
        subCategory: ""
        description: Manages a SSH service endpoint within Azure DevOps organization.
        name: azuredevops_serviceendpoint_ssh
        title: azuredevops_serviceendpoint_ssh
        examples:
            - name: example
              manifest: |-
                {
                  "description": "Managed by Terraform",
                  "host": "1.2.3.4",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example SSH",
                  "username": "username"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            host: '- (Required) The Host name or IP address of the remote machine.'
            id: '- The ID of the service endpoint.'
            password: '- (Optional) Password for connecting to the endpoint.'
            port: '- (Optional) Port number on the remote machine to use for connecting. Defaults to 22.'
            private_key: '- (Optional) Private Key for connecting to the endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the SSh Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the SSh Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the SSh Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the SSh Service Endpoint.'
            username: '- (Required) Username for connecting to the endpoint.'
        importStatements: []
    azuredevops_serviceendpoint_visualstudiomarketplace:
        subCategory: ""
        description: Manages a Visual Studio Marketplace service endpoint within Azure DevOps organization. Packaging and publishing Azure Devops and Visual Studio extensions to the Visual Studio Marketplace.
        name: azuredevops_serviceendpoint_visualstudiomarketplace
        title: azuredevops_serviceendpoint_visualstudiomarketplace
        examples:
            - name: example
              manifest: |-
                {
                  "authentication_token": [
                    {
                      "token": "token"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Marketplace",
                  "url": "https://markpetplace.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "authentication_basic": [
                    {
                      "password": "password",
                      "username": "username"
                    }
                  ],
                  "description": "Managed by Terraform",
                  "project_id": "${azuredevops_project.example.id}",
                  "service_endpoint_name": "Example Marketplace",
                  "url": "https://markpetplace.com"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            authentication_basic: '- (Optional) An authentication_basic block as documented below.'
            authentication_basic.password: '- The password of the marketplace.'
            authentication_basic.username: '- The username of the marketplace.'
            authentication_token: '- (Optional) An authentication_token block as documented below.'
            authentication_token.token: '- The Personal Access Token.'
            description: '- (Optional) The Service Endpoint description. Defaults to Managed by Terraform.'
            id: '- The ID of the service endpoint.'
            project_id: '- (Required) The ID of the project.'
            service_endpoint_name: '- (Required) The Service Endpoint name.'
            timeouts.create: '- (Defaults to 2 minutes) Used when creating the Visual Studio Marketplace Service Endpoint.'
            timeouts.delete: '- (Defaults to 2 minutes) Used when deleting the Visual Studio Marketplace Service Endpoint.'
            timeouts.read: '- (Defaults to 1 minute) Used when retrieving the Visual Studio Marketplace Service Endpoint.'
            timeouts.update: '- (Defaults to 2 minutes) Used when updating the Visual Studio Marketplace Service Endpoint.'
            url: '- (Required) The server URL for Visual Studio Marketplace.'
        importStatements: []
    azuredevops_servicehook_permissions:
        subCategory: ""
        description: Manages permissions for AzureDevOps Service Hook permissions.
        name: azuredevops_servicehook_permissions
        title: azuredevops_servicehook_permissions
        examples:
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "DeleteSubscriptions": "allow",
                    "EditSubscriptions": "allow",
                    "PublishEvents": "allow",
                    "ViewSubscriptions": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (optional) The ID of the project.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Service Hook Permissions.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Service Hook Permissions.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Service Hook Permissions.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Service Hook Permissions.'
        importStatements: []
    azuredevops_servicehook_storage_queue_pipelines:
        subCategory: ""
        description: Manages a Storage Queue Pipelines Service Hook.
        name: azuredevops_servicehook_storage_queue_pipelines
        title: azuredevops_servicehook_storage_queue_pipelines
        examples:
            - name: example
              manifest: |-
                {
                  "account_key": "${azurerm_storage_account.example.primary_access_key}",
                  "account_name": "${azurerm_storage_account.example.name}",
                  "project_id": "${azuredevops_project.example.id}",
                  "queue_name": "${azurerm_storage_queue.example.name}",
                  "run_state_changed_event": [
                    {
                      "run_result_filter": "Succeeded",
                      "run_state_filter": "Completed"
                    }
                  ],
                  "visi_timeout": 30
                }
              references:
                account_key: azurerm_storage_account.example.primary_access_key
                account_name: azurerm_storage_account.example.name
                project_id: azuredevops_project.example.id
                queue_name: azurerm_storage_queue.example.name
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "example-project"
                    }
                azurerm_resource_group.example: |-
                    {
                      "location": "West Europe",
                      "name": "example-resources"
                    }
                azurerm_storage_account.example: |-
                    {
                      "account_replication_type": "LRS",
                      "account_tier": "Standard",
                      "location": "${azurerm_resource_group.example.location}",
                      "name": "servicehookexamplestacc",
                      "resource_group_name": "${azurerm_resource_group.example.name}"
                    }
                azurerm_storage_queue.example: |-
                    {
                      "name": "examplequeue",
                      "storage_account_name": "${azurerm_storage_account.example.name}"
                    }
            - name: example
              manifest: |-
                {
                  "account_key": "${azurerm_storage_account.example.primary_access_key}",
                  "account_name": "${azurerm_storage_account.example.name}",
                  "project_id": "${azuredevops_project.example.id}",
                  "queue_name": "${azurerm_storage_queue.example.name}",
                  "run_state_changed_event": [
                    {}
                  ],
                  "visi_timeout": 30
                }
              references:
                account_key: azurerm_storage_account.example.primary_access_key
                account_name: azurerm_storage_account.example.name
                project_id: azuredevops_project.example.id
                queue_name: azurerm_storage_queue.example.name
        argumentDocs:
            account_key: '- (Required)  A valid account key from the queue''s storage account.'
            account_name: '- (Required) The queue''s storage account name.'
            id: '- The ID of the Service Hook Storage Queue Pipelines.'
            project_id: '- (Required) The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.'
            queue_name: '- (Required) The name of the queue that will store the events.'
            run_state_changed_event: '- (Optional) A run_state_changed_event block as defined below. Conflicts with stage_state_changed_event'
            run_state_changed_event.pipeline_id: '- (Optional) The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.'
            run_state_changed_event.run_result_filter: '- (Optional) Which run result should generate an event. Only valid if published_event is RunStateChanged. If not specified, all results will trigger the event.'
            run_state_changed_event.run_state_filter: '- (Optional) Which run state should generate an event. Only valid if published_event is RunStateChanged. If not specified, all states will trigger the event.'
            stage_state_changed_event: '- (Optional) A stage_state_changed_event block as defined below. Conflicts with run_state_changed_event'
            stage_state_changed_event.pipeline_id: '- (Optional) The pipeline ID that will generate an event.'
            stage_state_changed_event.stage_name: '- (Optional) Which stage should generate an event. Only valid if published_event is StageStateChanged. If not specified, all stages will trigger the event.'
            stage_state_changed_event.stage_result_filter: '- (Optional) Which stage result should generate an event. Only valid if published_event is StageStateChanged. If not specified, all results will trigger the event.'
            stage_state_changed_event.stage_state_filter: '- (Optional) Which stage state should generate an event. Only valid if published_event is StageStateChanged. If not specified, all states will trigger the event.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Storage Queue Pipelines Service Hook.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Storage Queue Pipelines Service Hook.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Storage Queue Pipelines Service Hook.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Storage Queue Pipelines Service Hook.'
            ttl: '- (Optional) event time-to-live - the duration a message can remain in the queue before it''s automatically removed. Defaults to 604800.'
            visi_timeout: '- (Optional) event visibility timout - how long a message is invisible to other consumers after it''s been dequeued. Defaults to 0.'
        importStatements:
            - terraform import azuredevops_servicehook_storage_queue_pipelines.example 00000000-0000-0000-0000-000000000000
    azuredevops_tagging_permissions:
        subCategory: ""
        description: Manages permissions for AzureDevOps Tagging
        name: azuredevops_tagging_permissions
        title: azuredevops_tagging_permissions
        examples:
            - name: example-permissions
              manifest: |-
                {
                  "permissions": {
                    "Create": "allow",
                    "Delete": "allow",
                    "Enumerate": "allow",
                    "Update": "allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group or user principal to assign the permissions.'
            project_id: '- (Optional) The ID of the project to assign the permissions. If omitted, organization wide permissions for tagging are managed.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Tagging permissions.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Tagging permissions.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Tagging permissions.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Tagging permissions.'
        importStatements: []
    azuredevops_team:
        subCategory: ""
        description: Manages a team within a project in a Azure DevOps organization.
        name: azuredevops_team
        title: azuredevops_team
        examples:
            - name: example
              manifest: |-
                {
                  "administrators": [
                    "${data.azuredevops_group.example-project-contributors.descriptor}"
                  ],
                  "members": [
                    "${data.azuredevops_group.example-project-readers.descriptor}"
                  ],
                  "name": "Example Team",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                administrators: data.azuredevops_group.example-project-contributors.descriptor
                members: data.azuredevops_group.example-project-readers.descriptor
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            administrators: '- (Optional) List of subject descriptors to define administrators of the team.'
            azuredevops_team: |-
                resource via the administrators block and by using the
                azuredevops_team_administrators resource. However it's not possible to use
                both methods to manage team administrators, since there'll be conflicts.
            description: '- (Optional) The description of the Team.'
            descriptor: '- The descriptor of the Team.'
            id: '- The ID of the Team.'
            members: '- (Optional) List of subject descriptors to define members of the team.'
            name: '- (Required) The name of the Team.'
            project_id: '- (Required) The Project ID.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Team.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Team.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Team.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Team.'
        importStatements: []
    azuredevops_team_administrators:
        subCategory: ""
        description: Manages administrators of a team within a project in a Azure DevOps organization.
        name: azuredevops_team_administrators
        title: azuredevops_team_administrators
        examples:
            - name: example-team-administrators
              manifest: |-
                {
                  "administrators": [
                    "${data.azuredevops_group.example-project-contributors.descriptor}"
                  ],
                  "mode": "overwrite",
                  "project_id": "${azuredevops_team.example.project_id}",
                  "team_id": "${azuredevops_team.example.id}"
                }
              references:
                administrators: data.azuredevops_group.example-project-contributors.descriptor
                project_id: azuredevops_team.example.project_id
                team_id: azuredevops_team.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_team.example: |-
                    {
                      "name": "${azuredevops_project.example.name} Team 2",
                      "project_id": "${azuredevops_project.example.id}"
                    }
        argumentDocs:
            administrators: '- (Required) List of subject descriptors to define administrators of the team.'
            azuredevops_team: |-
                resource via the administrators block and by using the
                azuredevops_team_administrators resource. However it's not possible to use
                both methods to manage team administrators, since there'll be conflicts.
            id: '- A random ID for this resource. There is no "natural" ID, so a random one is assigned.'
            mode: '- (Optional) The mode how the resource manages team administrators. Possible values: add, overwrite. Defaults to add.'
            mode = add: |-
                : the resource will ensure that all specified administrators will be part of the referenced team
                 2. mode = overwrite: the resource will replace all existing administrators with the administrators specified within the administrators block
            project_id: '- (Required) The Project ID.'
            team_id: '- (Required) The ID of the Team.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Team administrators.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Team administrators.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Team administrators.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Team administrators.'
        importStatements: []
    azuredevops_team_members:
        subCategory: ""
        description: Manages members of a team within a project in a Azure DevOps organization.
        name: azuredevops_team_members
        title: azuredevops_team_members
        examples:
            - name: example-team-members
              manifest: |-
                {
                  "members": [
                    "${data.azuredevops_group.example-project-readers.descriptor}"
                  ],
                  "mode": "overwrite",
                  "project_id": "${azuredevops_team.example.project_id}",
                  "team_id": "${azuredevops_team.example.id}"
                }
              references:
                members: data.azuredevops_group.example-project-readers.descriptor
                project_id: azuredevops_team.example.project_id
                team_id: azuredevops_team.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_team.example: |-
                    {
                      "name": "${azuredevops_project.example.name} Team 2",
                      "project_id": "${azuredevops_project.example.id}"
                    }
        argumentDocs:
            azuredevops_team: |-
                resource via the members block and by using the
                azuredevops_team_members resource. However, it's not possible to use
                both methods to manage team members, since there'll be conflicts.
            id: '- A random ID for this resource. There is no "natural" ID, so a random one is assigned.'
            members: '- (Required) List of subject descriptors to define members of the team.'
            mode: '- (Optional) The mode how the resource manages team members. Possible values: add, overwrite. Defaults to add.'
            mode = add: |-
                : the resource will ensure that all specified members will be part of the referenced team
                2. mode = overwrite: the resource will replace all existing members with the members specified within the members block
            project_id: '- (Required) The Project ID.'
            team_id: '- (Required) The ID of the Team.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Team Members.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Team Members.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Team Members.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Team Members.'
        importStatements: []
    azuredevops_user_entitlement:
        subCategory: ""
        description: Manages a user entitlement within Azure DevOps organization.
        name: azuredevops_user_entitlement
        title: azuredevops_user_entitlement
        examples:
            - name: example
              manifest: |-
                {
                  "principal_name": "foo@contoso.com"
                }
        argumentDocs:
            account_license_type: '- (Optional) Type of Account License. Valid values: advanced, earlyAdopter, express, none, professional, or stakeholder. Defaults to express. In addition the value basic is allowed which is an alias for express and reflects the name of the express license used in the Azure DevOps web interface.'
            descriptor: '- The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.'
            id: '- The id of the entitlement.'
            licensing_source: '- (Optional) The source of the licensing (e.g. Account. MSDN etc.) Valid values: account (Default), auto, msdn, none, profile, trial'
            origin: '- (Optional) The type of source provider for the origin identifier.'
            origin_id: '- (Optional) The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.'
            principal_name: '- (Optional) The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the User Entitlement.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the User Entitlement.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the User Entitlement.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the User Entitlement.'
        importStatements: []
    azuredevops_variable_group:
        subCategory: ""
        description: Manages variable groups within Azure DevOps project.
        name: azuredevops_variable_group
        title: azuredevops_variable_group
        examples:
            - name: example
              manifest: |-
                {
                  "allow_access": true,
                  "description": "Example Variable Group Description",
                  "name": "Example Variable Group",
                  "project_id": "${azuredevops_project.example.id}",
                  "variable": [
                    {
                      "name": "key1",
                      "value": "val1"
                    },
                    {
                      "is_secret": true,
                      "name": "key2",
                      "secret_value": "val2"
                    }
                  ]
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "allow_access": true,
                  "description": "Example Variable Group Description",
                  "key_vault": [
                    {
                      "name": "example-kv",
                      "service_endpoint_id": "${azuredevops_serviceendpoint_azurerm.example.id}"
                    }
                  ],
                  "name": "Example Variable Group",
                  "project_id": "${azuredevops_project.example.id}",
                  "variable": [
                    {
                      "name": "key1"
                    },
                    {
                      "name": "key2"
                    }
                  ]
                }
              references:
                key_vault.service_endpoint_id: azuredevops_serviceendpoint_azurerm.example.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_serviceendpoint_azurerm.example: |-
                    {
                      "azurerm_spn_tenantid": "00000000-0000-0000-0000-000000000000",
                      "azurerm_subscription_id": "00000000-0000-0000-0000-000000000000",
                      "azurerm_subscription_name": "Example Subscription Name",
                      "credentials": [
                        {
                          "serviceprincipalid": "00000000-0000-0000-0000-000000000000",
                          "serviceprincipalkey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        }
                      ],
                      "description": "Managed by Terraform",
                      "project_id": "${azuredevops_project.example.id}",
                      "service_endpoint_name": "Example AzureRM"
                    }
        argumentDocs:
            allow_access: '- (Required) Boolean that indicate if this variable group is shared by all pipelines of this project.'
            description: '- (Optional) The description of the Variable Group.'
            id: '- The ID of the Variable Group returned after creation in Azure DevOps.'
            key_vault: -(Optional) A list of key_vault blocks as documented below.
            key_vault.name: '- (Required) The name of the Azure key vault to link secrets from as variables.'
            key_vault.search_depth: '- (Optional) Set the Azure Key Vault Secret search depth. Defaults to 20.'
            key_vault.service_endpoint_id: '- (Required) The id of the Azure subscription endpoint to access the key vault.'
            name: '- (Required) The name of the Variable Group.'
            project_id: '- (Required) The ID of the project.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Variable Group.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Variable Group.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Variable Group.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Variable Group.'
            variable: '- (Required) One or more variable blocks as documented below.'
            variable.is_secret: '- (Optional) A boolean flag describing if the variable value is sensitive. Defaults to false.'
            variable.name: '- (Required) The key value used for the variable. Must be unique within the Variable Group.'
            variable.secret_value: '- (Optional) The secret value of the variable. If omitted, it will default to empty string. Used when is_secret set to true.'
            variable.value: '- (Optional) The value of the variable. If omitted, it will default to empty string.'
        importStatements: []
    azuredevops_variable_group_permissions:
        subCategory: ""
        description: Manages permissions for aa Azure DevOps Variable Group
        name: azuredevops_variable_group_permissions
        title: azuredevops_variable_group_permissions
        examples:
            - name: permissions
              manifest: |-
                {
                  "permissions": {
                    "Administer": "allow",
                    "Use": "allow",
                    "View": "allow"
                  },
                  "principal": "${data.azuredevops_group.tf-project-readers.id}",
                  "project_id": "${azuredevops_project.project.id}",
                  "variable_group_id": "${azuredevops_variable_group.example.id}"
                }
              references:
                principal: data.azuredevops_group.tf-project-readers.id
                project_id: azuredevops_project.project.id
                variable_group_id: azuredevops_variable_group.example.id
              dependencies:
                azuredevops_project.project: |-
                    {
                      "description": "Testing-description",
                      "name": "Testing",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
                azuredevops_variable_group.example: |-
                    {
                      "allow_access": true,
                      "description": "Test Description",
                      "name": "test",
                      "project_id": "${azuredevops_project.project.id}",
                      "variable": [
                        {
                          "name": "key1",
                          "value": "val1"
                        }
                      ]
                    }
        argumentDocs:
            permissions: '- (Required) the permissions to assign. The following permissions are available.'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Default: true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Variable Group Permissions.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Variable Group Permissions.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Variable Group Permissions.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Variable Group Permissions.'
            variable_group_id: '- (Required) The id of the variable group to assign the permissions.'
        importStatements: []
    azuredevops_wiki:
        subCategory: ""
        description: Manages Wikis within Azure DevOps project.
        name: azuredevops_wiki
        title: azuredevops_wiki
        examples:
            - name: example
              manifest: |-
                {
                  "name": "Example project wiki ",
                  "project_id": "${azuredevops_project.example.id}",
                  "type": "projectWiki"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project"
                    }
            - name: example2
              manifest: |-
                {
                  "mapped_path": "/",
                  "name": "Example wiki in repository",
                  "project_id": "${azuredevops_project.example.id}",
                  "repository_id": "${azuredevops_git_repository.example.id}",
                  "type": "codeWiki",
                  "version": "main"
                }
              references:
                project_id: azuredevops_project.example.id
                repository_id: azuredevops_git_repository.example.id
              dependencies:
                azuredevops_git_repository.example: |-
                    {
                      "initialization": [
                        {
                          "init_type": "Clean"
                        }
                      ],
                      "name": "Example Repository",
                      "project_id": "${azuredevops_project.example.id}"
                    }
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project"
                    }
        argumentDocs:
            id: '- The ID of the wiki returned after creation in Azure DevOps.'
            mapped_path: '- (Optional) Folder path inside repository which is shown as Wiki.'
            name: '- (Required) The name of the Wiki.'
            project_id: '- (Required) The ID of the Project.'
            remote_url: '- The remote web url to the wiki.'
            repository_id: '- (Optional) The ID of the repository.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Wiki.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Wiki.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Wiki.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Wiki.'
            type: '-  (Required) The type of the wiki. Possible values are codeWiki, projectWiki.'
            url: '- The REST url for this wiki.'
            version: '- (Optional) Version of the wiki.'
        importStatements:
            - terraform import azuredevops_wiki.wiki 00000000-0000-0000-0000-000000000000
    azuredevops_wiki_page:
        subCategory: ""
        description: Manages Wiki pages within Azure DevOps project.
        name: azuredevops_wiki_page
        title: azuredevops_wiki_page
        examples:
            - name: example
              manifest: |-
                {
                  "content": "content",
                  "path": "/page",
                  "project_id": "${azuredevops_project.example.id}",
                  "wiki_id": "${azuredevops_wiki.example.id}"
                }
              references:
                project_id: azuredevops_project.example.id
                wiki_id: azuredevops_wiki.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project"
                    }
                azuredevops_wiki.example: |-
                    {
                      "name": "Example project wiki ",
                      "project_id": "${azuredevops_project.example.id}",
                      "type": "projectWiki"
                    }
        argumentDocs:
            content: '- (Required) The content of the wiki page.'
            id: '- The ID of the wiki page returned after creation in Azure DevOps.'
            path: '-  (Required) The path of the wiki page.'
            project_id: '- (Required) The ID of the Project.'
            timeouts.create: '- (Defaults to 5 minutes) Used when creating the Wiki Page.'
            timeouts.delete: '- (Defaults to 5 minutes) Used when deleting the Wiki Page.'
            timeouts.read: '- (Defaults to 2 minute) Used when retrieving the Wiki Page.'
            timeouts.update: '- (Defaults to 5 minutes) Used when updating the Wiki Page.'
            wiki_id: '- (Required) The ID of the Wiki.'
        importStatements: []
    azuredevops_workitem:
        subCategory: ""
        description: Manages a Work Item in Azure Devops.
        name: azuredevops_workitem
        title: azuredevops_workitem
        examples:
            - name: example
              manifest: |-
                {
                  "project_id": "${data.azuredevops_project.example.id}",
                  "state": "Active",
                  "tags": [
                    "Tag"
                  ],
                  "title": "Example Work Item",
                  "type": "Issue"
                }
              references:
                project_id: data.azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "custom_fields": {
                    "example": "example"
                  },
                  "project_id": "${data.azuredevops_project.example.id}",
                  "state": "Active",
                  "tags": [
                    "Tag"
                  ],
                  "title": "Example Work Item",
                  "type": "Issue"
                }
              references:
                project_id: data.azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: epic
              manifest: |-
                {
                  "project_id": "${azuredevops_project.example.id}",
                  "state": "New",
                  "title": "Example EPIC Title",
                  "type": "Epic"
                }
              references:
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example
              manifest: |-
                {
                  "parent_id": "${azuredevops_workitem.epic.id}",
                  "project_id": "${azuredevops_project.example.id}",
                  "state": "Active",
                  "tags": [
                    "Tag"
                  ],
                  "title": "Example Work Item",
                  "type": "Issue"
                }
              references:
                parent_id: azuredevops_workitem.epic.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            area_path: '- (Optional) Specifies the area where the Work Item is used.'
            custom_fields: '- (Optional) Specifies a list with Custom Fields for the Work Item.'
            id: '- The ID of the Work Item.'
            iteration_path: '- (Optional) Specifies the iteration in which the Work Item is used.'
            parent_id: '- (Optional) The parent work item.'
            project_id: '- (Required) The ID of the Project.'
            relations: '- A relations blocks as documented below.'
            relations.rel: '- The type of relationship. For example: System.LinkTypes.Hierarchy-Reverse is a parent relationship. More details item link type.'
            relations.url: '- The URL of the Work Item.'
            state: '- (Optional) The state of the Work Item. The four main states that are defined for the User Story (Agile) are New, Active, Resolved, and Closed. See Workflow states for more details.'
            tags: '- (Optional) Specifies a list of Tags.'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Work Item.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Work Item.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Work Item.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Work Item.'
            title: '- (Required) The Title of the Work Item.'
            type: '- (Required) The Type of the Work Item. The work item type varies depending on the process used when creating the project(Agile, Basic, Scrum, Scrum). See Work Item Types for more details.'
            url: '- The URL of the Work Item.'
        importStatements: []
    azuredevops_workitemquery_permissions:
        subCategory: ""
        description: Manages permissions for Work Item Queries
        name: azuredevops_workitemquery_permissions
        title: azuredevops_workitemquery_permissions
        examples:
            - name: project-wiq-root-permissions
              manifest: |-
                {
                  "permissions": {
                    "CreateRepository": "Deny",
                    "DeleteRepository": "Deny",
                    "RenameRepository": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-permissions
              manifest: |-
                {
                  "path": "/Team",
                  "permissions": {
                    "Contribute": "Allow",
                    "Delete": "Deny",
                    "Read": "NotSet"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-project-permissions
              manifest: |-
                {
                  "permissions": {
                    "Contribute": "Deny",
                    "Delete": "Deny",
                    "ManagePermissions": "Deny",
                    "Read": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-readers.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-readers.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
            - name: example-sharedqueries-permissions
              manifest: |-
                {
                  "path": "/",
                  "permissions": {
                    "Delete": "Deny",
                    "Read": "Allow"
                  },
                  "principal": "${data.azuredevops_group.example-contributors.id}",
                  "project_id": "${azuredevops_project.example.id}"
                }
              references:
                principal: data.azuredevops_group.example-contributors.id
                project_id: azuredevops_project.example.id
              dependencies:
                azuredevops_project.example: |-
                    {
                      "description": "Managed by Terraform",
                      "name": "Example Project",
                      "version_control": "Git",
                      "visibility": "private",
                      "work_item_template": "Agile"
                    }
        argumentDocs:
            path: '- (Optional) Path to a query or folder beneath Shared Queries'
            permissions: '- (Required) the permissions to assign. The following permissions are available'
            principal: '- (Required) The group principal to assign the permissions.'
            project_id: '- (Required) The ID of the project to assign the permissions.'
            replace: '- (Optional) Replace (true) or merge (false) the permissions. Defaults to true'
            timeouts.create: '- (Defaults to 10 minutes) Used when creating the Work Item Query Permissions.'
            timeouts.delete: '- (Defaults to 10 minutes) Used when deleting the Work Item Query Permissions.'
            timeouts.read: '- (Defaults to 5 minute) Used when retrieving the Work Item Query Permissions.'
            timeouts.update: '- (Defaults to 10 minutes) Used when updating the Work Item Query Permissions.'
        importStatements: []
